"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@genkit-ai";
exports.ids = ["vendor-chunks/@genkit-ai"];
exports.modules = {

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/__codegen/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/__codegen/version.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar version_exports = {};\n__export(version_exports, {\n  version: () => version\n});\nmodule.exports = __toCommonJS(version_exports);\nconst version = \"0.9.0-dev.2\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9fX2NvZGVnZW4vdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvX19jb2RlZ2VuL3ZlcnNpb24uanM/Y2I2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdmVyc2lvbl9leHBvcnRzID0ge307XG5fX2V4cG9ydCh2ZXJzaW9uX2V4cG9ydHMsIHtcbiAgdmVyc2lvbjogKCkgPT4gdmVyc2lvblxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh2ZXJzaW9uX2V4cG9ydHMpO1xuY29uc3QgdmVyc2lvbiA9IFwiMC45LjAtZGV2LjJcIjtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICB2ZXJzaW9uXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/action.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/action.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar action_exports = {};\n__export(action_exports, {\n  JSONSchema7: () => import_json_schema.JSONSchema7,\n  Status: () => import_statusTypes.Status,\n  StatusCodes: () => import_statusTypes.StatusCodes,\n  StatusSchema: () => import_statusTypes.StatusSchema,\n  action: () => action,\n  actionWithMiddleware: () => actionWithMiddleware,\n  defineAction: () => defineAction,\n  getStreamingCallback: () => getStreamingCallback,\n  isInRuntimeContext: () => isInRuntimeContext,\n  runInActionRuntimeContext: () => runInActionRuntimeContext,\n  runWithStreamingCallback: () => runWithStreamingCallback\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_json_schema = __webpack_require__(/*! json-schema */ \"(rsc)/./node_modules/json-schema/lib/validate.js\");\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nfunction actionWithMiddleware(action2, middleware) {\n  const wrapped = (req) => __async(this, null, function* () {\n    const dispatch = (index, req2) => __async(this, null, function* () {\n      if (index === middleware.length) {\n        return yield action2(req2);\n      }\n      const currentMiddleware = middleware[index];\n      return currentMiddleware(\n        req2,\n        (modifiedReq) => __async(this, null, function* () {\n          return dispatch(index + 1, modifiedReq || req2);\n        })\n      );\n    });\n    return yield dispatch(0, req);\n  });\n  wrapped.__action = action2.__action;\n  return wrapped;\n}\nfunction action(config, fn) {\n  const actionName = typeof config.name === \"string\" ? config.name : `${config.name.pluginId}/${config.name.actionId}`;\n  const actionFn = (input) => __async(this, null, function* () {\n    input = (0, import_schema.parseSchema)(input, {\n      schema: config.inputSchema,\n      jsonSchema: config.inputJsonSchema\n    });\n    let output = yield (0, import_tracing.newTrace)(\n      {\n        name: actionName,\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"action\"\n        }\n      },\n      (metadata) => __async(this, null, function* () {\n        metadata.name = actionName;\n        metadata.input = input;\n        const output2 = yield fn(input);\n        metadata.output = JSON.stringify(output2);\n        return output2;\n      })\n    );\n    output = (0, import_schema.parseSchema)(output, {\n      schema: config.outputSchema,\n      jsonSchema: config.outputJsonSchema\n    });\n    return output;\n  });\n  actionFn.__action = {\n    name: actionName,\n    description: config.description,\n    inputSchema: config.inputSchema,\n    inputJsonSchema: config.inputJsonSchema,\n    outputSchema: config.outputSchema,\n    outputJsonSchema: config.outputJsonSchema,\n    metadata: config.metadata\n  };\n  if (config.use) {\n    return actionWithMiddleware(actionFn, config.use);\n  }\n  return actionFn;\n}\nfunction validateActionName(registry, name) {\n  if (name.includes(\"/\")) {\n    validatePluginName(registry, name.split(\"/\", 1)[0]);\n    validateActionId(name.substring(name.indexOf(\"/\") + 1));\n  }\n  return name;\n}\nfunction validatePluginName(registry, pluginId) {\n  if (!registry.lookupPlugin(pluginId)) {\n    throw new Error(\n      `Unable to find plugin name used in the action name: ${pluginId}`\n    );\n  }\n  return pluginId;\n}\nfunction validateActionId(actionId) {\n  if (actionId.includes(\"/\")) {\n    throw new Error(`Action name must not include slashes (/): ${actionId}`);\n  }\n  return actionId;\n}\nfunction defineAction(registry, config, fn) {\n  if (isInRuntimeContext()) {\n    throw new Error(\n      \"Cannot define new actions at runtime.\\nSee: https://github.com/firebase/genkit/blob/main/docs/errors/no_new_actions_at_runtime.md\"\n    );\n  }\n  if (typeof config.name === \"string\") {\n    validateActionName(registry, config.name);\n  } else {\n    validateActionId(config.name.actionId);\n  }\n  const act = action(config, (i) => __async(this, null, function* () {\n    (0, import_tracing.setCustomMetadataAttributes)({ subtype: config.actionType });\n    yield registry.initializeAllPlugins();\n    return yield runInActionRuntimeContext(() => fn(i));\n  }));\n  act.__action.actionType = config.actionType;\n  registry.registerAction(config.actionType, act);\n  return act;\n}\nconst streamingAls = new import_node_async_hooks.AsyncLocalStorage();\nconst sentinelNoopCallback = () => null;\nfunction runWithStreamingCallback(streamingCallback, fn) {\n  return streamingAls.run(streamingCallback || sentinelNoopCallback, fn);\n}\nfunction getStreamingCallback() {\n  const cb = streamingAls.getStore();\n  if (cb === sentinelNoopCallback) {\n    return void 0;\n  }\n  return cb;\n}\nconst runtimeCtxAls = new import_node_async_hooks.AsyncLocalStorage();\nfunction isInRuntimeContext() {\n  return !!runtimeCtxAls.getStore();\n}\nfunction runInActionRuntimeContext(fn) {\n  return runtimeCtxAls.run(\"runtime\", fn);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/action.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/auth.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/auth.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar auth_exports = {};\n__export(auth_exports, {\n  getFlowAuth: () => getFlowAuth,\n  runWithAuthContext: () => runWithAuthContext\n});\nmodule.exports = __toCommonJS(auth_exports);\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_action = __webpack_require__(/*! ./action.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/action.js\");\nconst authAsyncLocalStorage = new import_node_async_hooks.AsyncLocalStorage();\nfunction runWithAuthContext(auth, fn) {\n  return authAsyncLocalStorage.run(auth, () => (0, import_action.runInActionRuntimeContext)(fn));\n}\nfunction getFlowAuth() {\n  return authAsyncLocalStorage.getStore();\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9hdXRoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSw4QkFBOEIsbUJBQU8sQ0FBQywwQ0FBa0I7QUFDeEQsb0JBQW9CLG1CQUFPLENBQUMsdUVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FHTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9hdXRoLmpzPzllOTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGF1dGhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoYXV0aF9leHBvcnRzLCB7XG4gIGdldEZsb3dBdXRoOiAoKSA9PiBnZXRGbG93QXV0aCxcbiAgcnVuV2l0aEF1dGhDb250ZXh0OiAoKSA9PiBydW5XaXRoQXV0aENvbnRleHRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoYXV0aF9leHBvcnRzKTtcbnZhciBpbXBvcnRfbm9kZV9hc3luY19ob29rcyA9IHJlcXVpcmUoXCJub2RlOmFzeW5jX2hvb2tzXCIpO1xudmFyIGltcG9ydF9hY3Rpb24gPSByZXF1aXJlKFwiLi9hY3Rpb24uanNcIik7XG5jb25zdCBhdXRoQXN5bmNMb2NhbFN0b3JhZ2UgPSBuZXcgaW1wb3J0X25vZGVfYXN5bmNfaG9va3MuQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbmZ1bmN0aW9uIHJ1bldpdGhBdXRoQ29udGV4dChhdXRoLCBmbikge1xuICByZXR1cm4gYXV0aEFzeW5jTG9jYWxTdG9yYWdlLnJ1bihhdXRoLCAoKSA9PiAoMCwgaW1wb3J0X2FjdGlvbi5ydW5JbkFjdGlvblJ1bnRpbWVDb250ZXh0KShmbikpO1xufVxuZnVuY3Rpb24gZ2V0Rmxvd0F1dGgoKSB7XG4gIHJldHVybiBhdXRoQXN5bmNMb2NhbFN0b3JhZ2UuZ2V0U3RvcmUoKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRGbG93QXV0aCxcbiAgcnVuV2l0aEF1dGhDb250ZXh0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/error.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/error.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar error_exports = {};\n__export(error_exports, {\n  GenkitError: () => GenkitError,\n  getErrorMessage: () => getErrorMessage,\n  getErrorStack: () => getErrorStack\n});\nmodule.exports = __toCommonJS(error_exports);\nclass GenkitError extends Error {\n  constructor({\n    status,\n    message,\n    detail,\n    source\n  }) {\n    super(`${source ? `${source}: ` : \"\"}${status}: ${message}`);\n    this.status = status;\n    this.detail = detail;\n  }\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction getErrorStack(e) {\n  if (e instanceof Error) {\n    return e.stack;\n  }\n  return void 0;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsYUFBYSxZQUFZLE9BQU8sU0FBUyxFQUFFLE9BQU8sSUFBSSxRQUFRO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEVBQUU7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUlMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Vycm9yLmpzPzI2N2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGVycm9yX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGVycm9yX2V4cG9ydHMsIHtcbiAgR2Vua2l0RXJyb3I6ICgpID0+IEdlbmtpdEVycm9yLFxuICBnZXRFcnJvck1lc3NhZ2U6ICgpID0+IGdldEVycm9yTWVzc2FnZSxcbiAgZ2V0RXJyb3JTdGFjazogKCkgPT4gZ2V0RXJyb3JTdGFja1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhlcnJvcl9leHBvcnRzKTtcbmNsYXNzIEdlbmtpdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgc3RhdHVzLFxuICAgIG1lc3NhZ2UsXG4gICAgZGV0YWlsLFxuICAgIHNvdXJjZVxuICB9KSB7XG4gICAgc3VwZXIoYCR7c291cmNlID8gYCR7c291cmNlfTogYCA6IFwiXCJ9JHtzdGF0dXN9OiAke21lc3NhZ2V9YCk7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5kZXRhaWwgPSBkZXRhaWw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZShlKSB7XG4gIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gZS5tZXNzYWdlO1xuICB9XG4gIHJldHVybiBgJHtlfWA7XG59XG5mdW5jdGlvbiBnZXRFcnJvclN0YWNrKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlLnN0YWNrO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgR2Vua2l0RXJyb3IsXG4gIGdldEVycm9yTWVzc2FnZSxcbiAgZ2V0RXJyb3JTdGFja1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/flow.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/flow.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => {\n  return (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __await = function(promise, isYieldStar) {\n  this[0] = promise;\n  this[1] = isYieldStar;\n};\nvar __asyncGenerator = (__this, __arguments, generator) => {\n  var resume = (k, v, yes, no) => {\n    try {\n      var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;\n      Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === \"return\" ? k : \"next\", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume(\"throw\", e, yes, no));\n    } catch (e) {\n      no(e);\n    }\n  };\n  var method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no));\n  var it = {};\n  return generator = generator.apply(__this, __arguments), it[__knownSymbol(\"asyncIterator\")] = () => it, method(\"next\"), method(\"throw\"), method(\"return\"), it;\n};\nvar flow_exports = {};\n__export(flow_exports, {\n  Flow: () => Flow,\n  FlowServer: () => FlowServer,\n  defineFlow: () => defineFlow,\n  defineStreamingFlow: () => defineStreamingFlow,\n  run: () => run\n});\nmodule.exports = __toCommonJS(flow_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar bodyParser = __toESM(__webpack_require__(/*! body-parser */ \"(rsc)/./node_modules/body-parser/index.js\"));\nvar import_cors = __toESM(__webpack_require__(/*! cors */ \"(rsc)/./node_modules/cors/lib/index.js\"));\nvar import_express = __toESM(__webpack_require__(/*! express */ \"express\"));\nvar import_get_port = __toESM(__webpack_require__(/*! get-port */ \"(rsc)/./node_modules/get-port/index.js\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_auth = __webpack_require__(/*! ./auth.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/auth.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_flowTypes = __webpack_require__(/*! ./flowTypes.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/flowTypes.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/utils.js\");\nconst streamDelimiter = \"\\n\";\nclass Flow {\n  constructor(registry, config, flowFn) {\n    this.registry = registry;\n    this.name = config.name;\n    this.inputSchema = config.inputSchema;\n    this.outputSchema = config.outputSchema;\n    this.streamSchema = \"streamSchema\" in config ? config.streamSchema : void 0;\n    this.authPolicy = config.authPolicy;\n    this.middleware = config.middleware;\n    this.flowFn = flowFn;\n  }\n  /**\n   * Executes the flow with the input directly.\n   */\n  invoke(input, opts) {\n    return __async(this, null, function* () {\n      yield this.registry.initializeAllPlugins();\n      return yield (0, import_auth.runWithAuthContext)(\n        opts.auth,\n        () => (0, import_tracing.newTrace)(\n          {\n            name: this.name,\n            labels: {\n              [import_tracing.SPAN_TYPE_ATTR]: \"flow\"\n            }\n          },\n          (metadata, rootSpan) => __async(this, null, function* () {\n            if (opts.labels) {\n              const labels = opts.labels;\n              Object.keys(opts.labels).forEach((label) => {\n                (0, import_tracing.setCustomMetadataAttribute)(\n                  (0, import_utils.flowMetadataPrefix)(`label:${label}`),\n                  labels[label]\n                );\n              });\n            }\n            (0, import_tracing.setCustomMetadataAttributes)({\n              [(0, import_utils.flowMetadataPrefix)(\"name\")]: this.name\n            });\n            try {\n              metadata.input = input;\n              const output = yield this.flowFn(input, opts.streamingCallback);\n              metadata.output = JSON.stringify(output);\n              (0, import_tracing.setCustomMetadataAttribute)((0, import_utils.flowMetadataPrefix)(\"state\"), \"done\");\n              return {\n                result: output,\n                traceId: rootSpan.spanContext().traceId,\n                spanId: rootSpan.spanContext().spanId\n              };\n            } catch (e) {\n              metadata.state = \"error\";\n              rootSpan.setStatus({\n                code: import_api.SpanStatusCode.ERROR,\n                message: (0, import_error.getErrorMessage)(e)\n              });\n              if (e instanceof Error) {\n                rootSpan.recordException(e);\n              }\n              (0, import_tracing.setCustomMetadataAttribute)((0, import_utils.flowMetadataPrefix)(\"state\"), \"error\");\n              throw e;\n            }\n          })\n        )\n      );\n    });\n  }\n  /**\n   * Runs the flow. This is used when calling a flow from another flow.\n   */\n  run(payload, opts) {\n    return __async(this, null, function* () {\n      var _a;\n      const input = this.inputSchema ? this.inputSchema.parse(payload) : payload;\n      yield (_a = this.authPolicy) == null ? void 0 : _a.call(this, opts == null ? void 0 : opts.withLocalAuthContext, payload);\n      if (this.middleware) {\n        import_logging.logger.warn(\n          `Flow (${this.name}) middleware won't run when invoked with runFlow.`\n        );\n      }\n      const result = yield this.invoke(input, {\n        auth: opts == null ? void 0 : opts.withLocalAuthContext\n      });\n      return result.result;\n    });\n  }\n  /**\n   * Runs the flow and streams results. This is used when calling a flow from another flow.\n   */\n  stream(payload, opts) {\n    var _a, _b;\n    let chunkStreamController;\n    const chunkStream = new ReadableStream({\n      start(controller) {\n        chunkStreamController = controller;\n      },\n      pull() {\n      },\n      cancel() {\n      }\n    });\n    const authPromise = (_b = (_a = this.authPolicy) == null ? void 0 : _a.call(this, opts == null ? void 0 : opts.withLocalAuthContext, payload)) != null ? _b : Promise.resolve();\n    const invocationPromise = authPromise.then(\n      () => this.invoke(\n        this.inputSchema ? this.inputSchema.parse(payload) : payload,\n        {\n          streamingCallback: (chunk) => {\n            chunkStreamController.enqueue(chunk);\n          }\n        }\n      ).then((s) => s.result)\n    ).finally(() => {\n      chunkStreamController.close();\n    });\n    return {\n      output: invocationPromise,\n      stream: function() {\n        return __asyncGenerator(this, null, function* () {\n          const reader = chunkStream.getReader();\n          while (true) {\n            const chunk = yield new __await(reader.read());\n            if (chunk.value) {\n              yield chunk.value;\n            }\n            if (chunk.done) {\n              break;\n            }\n          }\n          return yield new __await(invocationPromise);\n        });\n      }()\n    };\n  }\n  expressHandler(request, response) {\n    return __async(this, null, function* () {\n      var _a;\n      const { stream } = request.query;\n      const auth = request.auth;\n      let input = request.body.data;\n      try {\n        yield (_a = this.authPolicy) == null ? void 0 : _a.call(this, auth, input);\n      } catch (e) {\n        const respBody = {\n          error: {\n            status: \"PERMISSION_DENIED\",\n            message: e.message || \"Permission denied to resource\"\n          }\n        };\n        response.status(403).send(respBody).end();\n        return;\n      }\n      if (stream === \"true\") {\n        response.writeHead(200, {\n          \"Content-Type\": \"text/plain\",\n          \"Transfer-Encoding\": \"chunked\"\n        });\n        try {\n          const result = yield this.invoke(input, {\n            streamingCallback: (chunk) => {\n              response.write(JSON.stringify(chunk) + streamDelimiter);\n            },\n            auth\n          });\n          response.write({\n            result: result.result\n            // Need more results!!!!\n          });\n          response.end();\n        } catch (e) {\n          response.write({\n            error: {\n              status: \"INTERNAL\",\n              message: (0, import_error.getErrorMessage)(e),\n              details: (0, import_error.getErrorStack)(e)\n            }\n          });\n          response.end();\n        }\n      } else {\n        try {\n          const result = yield this.invoke(input, { auth });\n          response.setHeader(\"x-genkit-trace-id\", result.traceId);\n          response.setHeader(\"x-genkit-span-id\", result.spanId);\n          response.status(200).send({\n            result: result.result\n          }).end();\n        } catch (e) {\n          response.status(500).send({\n            error: {\n              status: \"INTERNAL\",\n              message: (0, import_error.getErrorMessage)(e),\n              details: (0, import_error.getErrorStack)(e)\n            }\n          }).end();\n        }\n      }\n    });\n  }\n}\nconst _FlowServer = class _FlowServer {\n  constructor(registry, options) {\n    /** Port the server is actually running on. This may differ from `options.port` if the original was occupied. Null is server is not running. */\n    this.port = null;\n    /** Express server instance. Null if server is not running. */\n    this.server = null;\n    this.registry = registry;\n    this.options = __spreadValues({\n      port: 3400\n    }, options);\n  }\n  /**\n   * Finds a free port to run the server on based on the original chosen port and environment.\n   */\n  findPort() {\n    return __async(this, null, function* () {\n      const chosenPort = this.options.port;\n      if ((0, import_utils.isDevEnv)()) {\n        const freePort = yield (0, import_get_port.default)({\n          port: (0, import_get_port.makeRange)(chosenPort, chosenPort + 100)\n        });\n        if (freePort !== chosenPort) {\n          import_logging.logger.warn(\n            `Port ${chosenPort} is already in use, using next available port ${freePort} instead.`\n          );\n        }\n        return freePort;\n      }\n      return chosenPort;\n    });\n  }\n  /**\n   * Starts the server and adds it to the list of running servers to clean up on exit.\n   */\n  start() {\n    return __async(this, null, function* () {\n      var _a, _b;\n      const server = (0, import_express.default)();\n      server.use(bodyParser.json(this.options.jsonParserOptions));\n      server.use((0, import_cors.default)(this.options.cors));\n      if (!!this.options.flows) {\n        import_logging.logger.debug(\"Running flow server with flow paths:\");\n        const pathPrefix = (_a = this.options.pathPrefix) != null ? _a : \"\";\n        (_b = this.options.flows) == null ? void 0 : _b.forEach((flow) => {\n          var _a2;\n          const flowPath = `/${pathPrefix}${flow.flow.name}`;\n          import_logging.logger.debug(` - ${flowPath}`);\n          (_a2 = flow.flow.middleware) == null ? void 0 : _a2.forEach(\n            (middleware) => server.post(flowPath, middleware)\n          );\n          server.post(flowPath, (req, res) => flow.flow.expressHandler(req, res));\n        });\n      } else {\n        import_logging.logger.warn(\"No flows registered in flow server.\");\n      }\n      this.port = yield this.findPort();\n      this.server = server.listen(this.port, () => {\n        import_logging.logger.debug(`Flow server running on http://localhost:${this.port}`);\n        _FlowServer.RUNNING_SERVERS.push(this);\n      });\n    });\n  }\n  /**\n   * Stops the server and removes it from the list of running servers to clean up on exit.\n   */\n  stop() {\n    return __async(this, null, function* () {\n      if (!this.server) {\n        return;\n      }\n      return new Promise((resolve, reject) => {\n        this.server.close((err) => {\n          if (err) {\n            import_logging.logger.error(\n              `Error shutting down flow server on port ${this.port}: ${err}`\n            );\n            reject(err);\n          }\n          const index = _FlowServer.RUNNING_SERVERS.indexOf(this);\n          if (index > -1) {\n            _FlowServer.RUNNING_SERVERS.splice(index, 1);\n          }\n          import_logging.logger.debug(\n            `Flow server on port ${this.port} has successfully shut down.`\n          );\n          this.port = null;\n          this.server = null;\n          resolve();\n        });\n      });\n    });\n  }\n  /**\n   * Stops all running servers.\n   */\n  static stopAll() {\n    return __async(this, null, function* () {\n      return Promise.all(\n        _FlowServer.RUNNING_SERVERS.map((server) => server.stop())\n      );\n    });\n  }\n};\n/** List of all running servers needed to be cleaned up on process exit. */\n_FlowServer.RUNNING_SERVERS = [];\nlet FlowServer = _FlowServer;\nfunction defineFlow(registry, config, fn) {\n  const resolvedConfig = typeof config === \"string\" ? { name: config } : config;\n  const flow = new Flow(registry, resolvedConfig, fn);\n  registerFlowAction(registry, flow);\n  const callableFlow = (input, opts) => __async(this, null, function* () {\n    return flow.run(input, opts);\n  });\n  callableFlow.flow = flow;\n  return callableFlow;\n}\nfunction defineStreamingFlow(registry, config, fn) {\n  const flow = new Flow(registry, config, fn);\n  registerFlowAction(registry, flow);\n  const streamableFlow = (input, opts) => {\n    return flow.stream(input, opts);\n  };\n  streamableFlow.flow = flow;\n  return streamableFlow;\n}\nfunction registerFlowAction(registry, flow) {\n  return (0, import_action.defineAction)(\n    registry,\n    {\n      actionType: \"flow\",\n      name: flow.name,\n      inputSchema: import_flowTypes.FlowActionInputSchema,\n      outputSchema: flow.outputSchema,\n      metadata: {\n        inputSchema: (0, import_schema.toJsonSchema)({ schema: flow.inputSchema }),\n        outputSchema: (0, import_schema.toJsonSchema)({ schema: flow.outputSchema }),\n        requiresAuth: !!flow.authPolicy\n      }\n    },\n    (envelope) => __async(this, null, function* () {\n      var _a, _b, _c;\n      yield (_b = flow.authPolicy) == null ? void 0 : _b.call(\n        flow,\n        envelope.auth,\n        (_a = envelope.start) == null ? void 0 : _a.input\n      );\n      (0, import_tracing.setCustomMetadataAttribute)((0, import_utils.flowMetadataPrefix)(\"wrapperAction\"), \"true\");\n      const response = yield flow.invoke((_c = envelope.start) == null ? void 0 : _c.input, {\n        streamingCallback: (0, import_action.getStreamingCallback)(),\n        auth: envelope.auth\n      });\n      return response.result;\n    })\n  );\n}\nfunction run(name, funcOrInput, fn) {\n  var _arguments = arguments;\n  const func = arguments.length === 3 ? fn : funcOrInput;\n  const input = arguments.length === 3 ? funcOrInput : void 0;\n  if (!func) {\n    throw new Error(\"unable to resolve run function\");\n  }\n  return (0, import_tracing.runInNewSpan)(\n    {\n      metadata: { name },\n      labels: {\n        [import_tracing.SPAN_TYPE_ATTR]: \"flowStep\"\n      }\n    },\n    (meta) => __async(this, null, function* () {\n      meta.input = input;\n      const output = _arguments.length === 3 ? yield func(input) : yield func();\n      meta.output = JSON.stringify(output);\n      return output;\n    })\n  );\n}\nif ( true && \"hot\" in module) {\n  module.hot.accept();\n  module.hot.dispose(() => __async(void 0, null, function* () {\n    import_logging.logger.debug(\"Cleaning up flow server(s) before module reload...\");\n    yield FlowServer.stopAll();\n  }));\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=flow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/flow.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/flowTypes.js":
/*!*******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/flowTypes.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar flowTypes_exports = {};\n__export(flowTypes_exports, {\n  FlowActionInputSchema: () => FlowActionInputSchema,\n  FlowErrorSchema: () => FlowErrorSchema,\n  FlowInvokeEnvelopeMessageSchema: () => FlowInvokeEnvelopeMessageSchema,\n  FlowResponseSchema: () => FlowResponseSchema,\n  FlowResultSchema: () => FlowResultSchema\n});\nmodule.exports = __toCommonJS(flowTypes_exports);\nvar import_zod = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst FlowResponseSchema = import_zod.z.object({\n  response: import_zod.z.unknown().nullable()\n});\nconst FlowErrorSchema = import_zod.z.object({\n  error: import_zod.z.string().optional(),\n  stacktrace: import_zod.z.string().optional()\n});\nconst FlowResultSchema = FlowResponseSchema.and(FlowErrorSchema);\nconst FlowInvokeEnvelopeMessageSchema = import_zod.z.object({\n  // Start new flow.\n  start: import_zod.z.object({\n    input: import_zod.z.unknown().optional(),\n    labels: import_zod.z.record(import_zod.z.string(), import_zod.z.string()).optional()\n  })\n});\nconst FlowActionInputSchema = FlowInvokeEnvelopeMessageSchema.extend({\n  auth: import_zod.z.unknown().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=flowTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9mbG93VHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGlCQUFpQixtQkFBTyxDQUFDLGtEQUFLO0FBQzlCO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLE1BQU0sQ0FNTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9mbG93VHlwZXMuanM/NzgyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZmxvd1R5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGZsb3dUeXBlc19leHBvcnRzLCB7XG4gIEZsb3dBY3Rpb25JbnB1dFNjaGVtYTogKCkgPT4gRmxvd0FjdGlvbklucHV0U2NoZW1hLFxuICBGbG93RXJyb3JTY2hlbWE6ICgpID0+IEZsb3dFcnJvclNjaGVtYSxcbiAgRmxvd0ludm9rZUVudmVsb3BlTWVzc2FnZVNjaGVtYTogKCkgPT4gRmxvd0ludm9rZUVudmVsb3BlTWVzc2FnZVNjaGVtYSxcbiAgRmxvd1Jlc3BvbnNlU2NoZW1hOiAoKSA9PiBGbG93UmVzcG9uc2VTY2hlbWEsXG4gIEZsb3dSZXN1bHRTY2hlbWE6ICgpID0+IEZsb3dSZXN1bHRTY2hlbWFcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZmxvd1R5cGVzX2V4cG9ydHMpO1xudmFyIGltcG9ydF96b2QgPSByZXF1aXJlKFwiem9kXCIpO1xuY29uc3QgRmxvd1Jlc3BvbnNlU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHJlc3BvbnNlOiBpbXBvcnRfem9kLnoudW5rbm93bigpLm51bGxhYmxlKClcbn0pO1xuY29uc3QgRmxvd0Vycm9yU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGVycm9yOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgc3RhY2t0cmFjZTogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgRmxvd1Jlc3VsdFNjaGVtYSA9IEZsb3dSZXNwb25zZVNjaGVtYS5hbmQoRmxvd0Vycm9yU2NoZW1hKTtcbmNvbnN0IEZsb3dJbnZva2VFbnZlbG9wZU1lc3NhZ2VTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgLy8gU3RhcnQgbmV3IGZsb3cuXG4gIHN0YXJ0OiBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgICBpbnB1dDogaW1wb3J0X3pvZC56LnVua25vd24oKS5vcHRpb25hbCgpLFxuICAgIGxhYmVsczogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5zdHJpbmcoKSkub3B0aW9uYWwoKVxuICB9KVxufSk7XG5jb25zdCBGbG93QWN0aW9uSW5wdXRTY2hlbWEgPSBGbG93SW52b2tlRW52ZWxvcGVNZXNzYWdlU2NoZW1hLmV4dGVuZCh7XG4gIGF1dGg6IGltcG9ydF96b2Quei51bmtub3duKCkub3B0aW9uYWwoKVxufSk7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgRmxvd0FjdGlvbklucHV0U2NoZW1hLFxuICBGbG93RXJyb3JTY2hlbWEsXG4gIEZsb3dJbnZva2VFbnZlbG9wZU1lc3NhZ2VTY2hlbWEsXG4gIEZsb3dSZXNwb25zZVNjaGVtYSxcbiAgRmxvd1Jlc3VsdFNjaGVtYVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mbG93VHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/flowTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar src_exports = {};\n__export(src_exports, {\n  Flow: () => import_flow.Flow,\n  FlowServer: () => import_flow.FlowServer,\n  GENKIT_CLIENT_HEADER: () => GENKIT_CLIENT_HEADER,\n  GENKIT_VERSION: () => GENKIT_VERSION,\n  GenkitError: () => import_error.GenkitError,\n  defineFlow: () => import_flow.defineFlow,\n  defineJsonSchema: () => import_schema.defineJsonSchema,\n  defineSchema: () => import_schema.defineSchema,\n  defineStreamingFlow: () => import_flow.defineStreamingFlow,\n  getFlowAuth: () => import_auth.getFlowAuth,\n  run: () => import_flow.run,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_version = __webpack_require__(/*! ./__codegen/version.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\nvar import_zod = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n__reExport(src_exports, __webpack_require__(/*! ./action.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/action.js\"), module.exports);\nvar import_auth = __webpack_require__(/*! ./auth.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/auth.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_flow = __webpack_require__(/*! ./flow.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/flow.js\");\n__reExport(src_exports, __webpack_require__(/*! ./flowTypes.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/flowTypes.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ./plugin.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/plugin.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ./reflection.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/reflection.js\"), module.exports);\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\n__reExport(src_exports, __webpack_require__(/*! ./telemetryTypes.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/utils.js\"), module.exports);\nconst GENKIT_VERSION = import_version.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNyRCxpQkFBaUIsbUJBQU8sQ0FBQyxrREFBSztBQUM5Qix3QkFBd0IsbUJBQU8sQ0FBQyx1RUFBYTtBQUM3QyxrQkFBa0IsbUJBQU8sQ0FBQyxtRUFBVztBQUNyQyxtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBWTtBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyxtRUFBVztBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQyw2RUFBZ0I7QUFDaEQsd0JBQXdCLG1CQUFPLENBQUMsdUVBQWE7QUFDN0Msd0JBQXdCLG1CQUFPLENBQUMsK0VBQWlCO0FBQ2pELG9CQUFvQixtQkFBTyxDQUFDLHVFQUFhO0FBQ3pDLHdCQUF3QixtQkFBTyxDQUFDLHVGQUFxQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyxxRUFBWTtBQUM1QztBQUNBLDRDQUE0QyxnQkFBZ0IsVUFBVSxzQkFBc0I7QUFDNUY7QUFDQSxNQUFNLENBbUJMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4LmpzPzllNmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3JlRXhwb3J0ID0gKHRhcmdldCwgbW9kLCBzZWNvbmRUYXJnZXQpID0+IChfX2NvcHlQcm9wcyh0YXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpLCBzZWNvbmRUYXJnZXQgJiYgX19jb3B5UHJvcHMoc2Vjb25kVGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgRmxvdzogKCkgPT4gaW1wb3J0X2Zsb3cuRmxvdyxcbiAgRmxvd1NlcnZlcjogKCkgPT4gaW1wb3J0X2Zsb3cuRmxvd1NlcnZlcixcbiAgR0VOS0lUX0NMSUVOVF9IRUFERVI6ICgpID0+IEdFTktJVF9DTElFTlRfSEVBREVSLFxuICBHRU5LSVRfVkVSU0lPTjogKCkgPT4gR0VOS0lUX1ZFUlNJT04sXG4gIEdlbmtpdEVycm9yOiAoKSA9PiBpbXBvcnRfZXJyb3IuR2Vua2l0RXJyb3IsXG4gIGRlZmluZUZsb3c6ICgpID0+IGltcG9ydF9mbG93LmRlZmluZUZsb3csXG4gIGRlZmluZUpzb25TY2hlbWE6ICgpID0+IGltcG9ydF9zY2hlbWEuZGVmaW5lSnNvblNjaGVtYSxcbiAgZGVmaW5lU2NoZW1hOiAoKSA9PiBpbXBvcnRfc2NoZW1hLmRlZmluZVNjaGVtYSxcbiAgZGVmaW5lU3RyZWFtaW5nRmxvdzogKCkgPT4gaW1wb3J0X2Zsb3cuZGVmaW5lU3RyZWFtaW5nRmxvdyxcbiAgZ2V0Rmxvd0F1dGg6ICgpID0+IGltcG9ydF9hdXRoLmdldEZsb3dBdXRoLFxuICBydW46ICgpID0+IGltcG9ydF9mbG93LnJ1bixcbiAgejogKCkgPT4gaW1wb3J0X3pvZC56XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpbXBvcnRfdmVyc2lvbiA9IHJlcXVpcmUoXCIuL19fY29kZWdlbi92ZXJzaW9uLmpzXCIpO1xudmFyIGltcG9ydF96b2QgPSByZXF1aXJlKFwiem9kXCIpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG52YXIgaW1wb3J0X2F1dGggPSByZXF1aXJlKFwiLi9hdXRoLmpzXCIpO1xudmFyIGltcG9ydF9lcnJvciA9IHJlcXVpcmUoXCIuL2Vycm9yLmpzXCIpO1xudmFyIGltcG9ydF9mbG93ID0gcmVxdWlyZShcIi4vZmxvdy5qc1wiKTtcbl9fcmVFeHBvcnQoc3JjX2V4cG9ydHMsIHJlcXVpcmUoXCIuL2Zsb3dUeXBlcy5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vcGx1Z2luLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi9yZWZsZWN0aW9uLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG52YXIgaW1wb3J0X3NjaGVtYSA9IHJlcXVpcmUoXCIuL3NjaGVtYS5qc1wiKTtcbl9fcmVFeHBvcnQoc3JjX2V4cG9ydHMsIHJlcXVpcmUoXCIuL3RlbGVtZXRyeVR5cGVzLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi91dGlscy5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuY29uc3QgR0VOS0lUX1ZFUlNJT04gPSBpbXBvcnRfdmVyc2lvbi52ZXJzaW9uO1xuY29uc3QgR0VOS0lUX0NMSUVOVF9IRUFERVIgPSBgZ2Vua2l0LW5vZGUvJHtHRU5LSVRfVkVSU0lPTn0gZ2wtbm9kZS8ke3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZsb3csXG4gIEZsb3dTZXJ2ZXIsXG4gIEdFTktJVF9DTElFTlRfSEVBREVSLFxuICBHRU5LSVRfVkVSU0lPTixcbiAgR2Vua2l0RXJyb3IsXG4gIGRlZmluZUZsb3csXG4gIGRlZmluZUpzb25TY2hlbWEsXG4gIGRlZmluZVNjaGVtYSxcbiAgZGVmaW5lU3RyZWFtaW5nRmxvdyxcbiAgZ2V0Rmxvd0F1dGgsXG4gIHJ1bixcbiAgeixcbiAgLi4ucmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi9mbG93VHlwZXMuanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3BsdWdpbi5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vcmVmbGVjdGlvbi5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vdGVsZW1ldHJ5VHlwZXMuanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/logging.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/logging.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar logging_exports = {};\n__export(logging_exports, {\n  logger: () => logger\n});\nmodule.exports = __toCommonJS(logging_exports);\nconst LOG_LEVELS = [\"debug\", \"info\", \"warn\", \"error\"];\nclass Logger {\n  constructor() {\n    this.defaultLogger = {\n      shouldLog(targetLevel) {\n        return LOG_LEVELS.indexOf(this.level) <= LOG_LEVELS.indexOf(targetLevel);\n      },\n      debug(...args) {\n        this.shouldLog(\"debug\") && console.debug(...args);\n      },\n      info(...args) {\n        this.shouldLog(\"info\") && console.info(...args);\n      },\n      warn(...args) {\n        this.shouldLog(\"warn\") && console.warn(...args);\n      },\n      error(...args) {\n        this.shouldLog(\"error\") && console.error(...args);\n      },\n      level: \"info\"\n    };\n    this.logger = this.defaultLogger;\n  }\n  init(fn) {\n    return __async(this, null, function* () {\n      this.logger = fn;\n    });\n  }\n  info(...args) {\n    this.logger.info.apply(this.logger, args);\n  }\n  debug(...args) {\n    this.logger.debug.apply(this.logger, args);\n  }\n  error(...args) {\n    this.logger.error.apply(this.logger, args);\n  }\n  warn(...args) {\n    this.logger.warn.apply(this.logger, args);\n  }\n  setLogLevel(level) {\n    this.logger.level = level;\n  }\n  logStructured(msg, metadata) {\n    this.logger.info(msg, metadata);\n  }\n  logStructuredError(msg, metadata) {\n    this.logger.error(msg, metadata);\n  }\n}\nconst logger = new Logger();\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9sb2dnaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcuanM/ZTFkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xudmFyIGxvZ2dpbmdfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQobG9nZ2luZ19leHBvcnRzLCB7XG4gIGxvZ2dlcjogKCkgPT4gbG9nZ2VyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGxvZ2dpbmdfZXhwb3J0cyk7XG5jb25zdCBMT0dfTEVWRUxTID0gW1wiZGVidWdcIiwgXCJpbmZvXCIsIFwid2FyblwiLCBcImVycm9yXCJdO1xuY2xhc3MgTG9nZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kZWZhdWx0TG9nZ2VyID0ge1xuICAgICAgc2hvdWxkTG9nKHRhcmdldExldmVsKSB7XG4gICAgICAgIHJldHVybiBMT0dfTEVWRUxTLmluZGV4T2YodGhpcy5sZXZlbCkgPD0gTE9HX0xFVkVMUy5pbmRleE9mKHRhcmdldExldmVsKTtcbiAgICAgIH0sXG4gICAgICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkTG9nKFwiZGVidWdcIikgJiYgY29uc29sZS5kZWJ1ZyguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICBpbmZvKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5zaG91bGRMb2coXCJpbmZvXCIpICYmIGNvbnNvbGUuaW5mbyguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICB3YXJuKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5zaG91bGRMb2coXCJ3YXJuXCIpICYmIGNvbnNvbGUud2FybiguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICBlcnJvciguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkTG9nKFwiZXJyb3JcIikgJiYgY29uc29sZS5lcnJvciguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICBsZXZlbDogXCJpbmZvXCJcbiAgICB9O1xuICAgIHRoaXMubG9nZ2VyID0gdGhpcy5kZWZhdWx0TG9nZ2VyO1xuICB9XG4gIGluaXQoZm4pIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgdGhpcy5sb2dnZXIgPSBmbjtcbiAgICB9KTtcbiAgfVxuICBpbmZvKC4uLmFyZ3MpIHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvLmFwcGx5KHRoaXMubG9nZ2VyLCBhcmdzKTtcbiAgfVxuICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcuYXBwbHkodGhpcy5sb2dnZXIsIGFyZ3MpO1xuICB9XG4gIGVycm9yKC4uLmFyZ3MpIHtcbiAgICB0aGlzLmxvZ2dlci5lcnJvci5hcHBseSh0aGlzLmxvZ2dlciwgYXJncyk7XG4gIH1cbiAgd2FybiguLi5hcmdzKSB7XG4gICAgdGhpcy5sb2dnZXIud2Fybi5hcHBseSh0aGlzLmxvZ2dlciwgYXJncyk7XG4gIH1cbiAgc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgICB0aGlzLmxvZ2dlci5sZXZlbCA9IGxldmVsO1xuICB9XG4gIGxvZ1N0cnVjdHVyZWQobXNnLCBtZXRhZGF0YSkge1xuICAgIHRoaXMubG9nZ2VyLmluZm8obXNnLCBtZXRhZGF0YSk7XG4gIH1cbiAgbG9nU3RydWN0dXJlZEVycm9yKG1zZywgbWV0YWRhdGEpIHtcbiAgICB0aGlzLmxvZ2dlci5lcnJvcihtc2csIG1ldGFkYXRhKTtcbiAgfVxufVxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZ2dlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/logging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/plugin.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/plugin.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar plugin_exports = {};\n__export(plugin_exports, {\n  genkitPlugin: () => genkitPlugin\n});\nmodule.exports = __toCommonJS(plugin_exports);\nvar import_action = __webpack_require__(/*! ./action.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/action.js\");\nfunction genkitPlugin(pluginName, initFn) {\n  if ((0, import_action.isInRuntimeContext)()) {\n    throw new Error(\n      \"Cannot define new plugins at runtime.\\nSee: https://github.com/firebase/genkit/blob/main/docs/errors/no_new_actions_at_runtime.md\"\n    );\n  }\n  return (...args) => ({\n    name: pluginName,\n    initializer: () => __async(this, null, function* () {\n      const initializedPlugin = (yield initFn(...args)) || {};\n      validatePluginActions(pluginName, initializedPlugin);\n      return initializedPlugin;\n    })\n  });\n}\nfunction validatePluginActions(pluginName, plugin) {\n  var _a, _b, _c, _d, _e;\n  if (!plugin) {\n    return;\n  }\n  (_a = plugin.models) == null ? void 0 : _a.forEach((model) => validateNaming(pluginName, model));\n  (_b = plugin.retrievers) == null ? void 0 : _b.forEach(\n    (retriever) => validateNaming(pluginName, retriever)\n  );\n  (_c = plugin.embedders) == null ? void 0 : _c.forEach((embedder) => validateNaming(pluginName, embedder));\n  (_d = plugin.indexers) == null ? void 0 : _d.forEach((indexer) => validateNaming(pluginName, indexer));\n  (_e = plugin.evaluators) == null ? void 0 : _e.forEach(\n    (evaluator) => validateNaming(pluginName, evaluator)\n  );\n}\nfunction validateNaming(pluginName, action) {\n  const nameParts = action.__action.name.split(\"/\");\n  if (nameParts[0] !== pluginName) {\n    const err = `Plugin name ${pluginName} not found in action name ${action.__action.name}. Action names must follow the pattern {pluginName}/{actionName}`;\n    throw new Error(err);\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9wbHVnaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsdUVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixZQUFZLDJCQUEyQixxQkFBcUIsd0NBQXdDLFdBQVcsRUFBRSxXQUFXO0FBQzNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3BsdWdpbi5qcz8wMGU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG52YXIgcGx1Z2luX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHBsdWdpbl9leHBvcnRzLCB7XG4gIGdlbmtpdFBsdWdpbjogKCkgPT4gZ2Vua2l0UGx1Z2luXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHBsdWdpbl9leHBvcnRzKTtcbnZhciBpbXBvcnRfYWN0aW9uID0gcmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpO1xuZnVuY3Rpb24gZ2Vua2l0UGx1Z2luKHBsdWdpbk5hbWUsIGluaXRGbikge1xuICBpZiAoKDAsIGltcG9ydF9hY3Rpb24uaXNJblJ1bnRpbWVDb250ZXh0KSgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDYW5ub3QgZGVmaW5lIG5ldyBwbHVnaW5zIGF0IHJ1bnRpbWUuXFxuU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZ2Vua2l0L2Jsb2IvbWFpbi9kb2NzL2Vycm9ycy9ub19uZXdfYWN0aW9uc19hdF9ydW50aW1lLm1kXCJcbiAgICApO1xuICB9XG4gIHJldHVybiAoLi4uYXJncykgPT4gKHtcbiAgICBuYW1lOiBwbHVnaW5OYW1lLFxuICAgIGluaXRpYWxpemVyOiAoKSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBjb25zdCBpbml0aWFsaXplZFBsdWdpbiA9ICh5aWVsZCBpbml0Rm4oLi4uYXJncykpIHx8IHt9O1xuICAgICAgdmFsaWRhdGVQbHVnaW5BY3Rpb25zKHBsdWdpbk5hbWUsIGluaXRpYWxpemVkUGx1Z2luKTtcbiAgICAgIHJldHVybiBpbml0aWFsaXplZFBsdWdpbjtcbiAgICB9KVxuICB9KTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUGx1Z2luQWN0aW9ucyhwbHVnaW5OYW1lLCBwbHVnaW4pIHtcbiAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgaWYgKCFwbHVnaW4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgKF9hID0gcGx1Z2luLm1vZGVscykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZvckVhY2goKG1vZGVsKSA9PiB2YWxpZGF0ZU5hbWluZyhwbHVnaW5OYW1lLCBtb2RlbCkpO1xuICAoX2IgPSBwbHVnaW4ucmV0cmlldmVycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmZvckVhY2goXG4gICAgKHJldHJpZXZlcikgPT4gdmFsaWRhdGVOYW1pbmcocGx1Z2luTmFtZSwgcmV0cmlldmVyKVxuICApO1xuICAoX2MgPSBwbHVnaW4uZW1iZWRkZXJzKSA9PSBudWxsID8gdm9pZCAwIDogX2MuZm9yRWFjaCgoZW1iZWRkZXIpID0+IHZhbGlkYXRlTmFtaW5nKHBsdWdpbk5hbWUsIGVtYmVkZGVyKSk7XG4gIChfZCA9IHBsdWdpbi5pbmRleGVycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmZvckVhY2goKGluZGV4ZXIpID0+IHZhbGlkYXRlTmFtaW5nKHBsdWdpbk5hbWUsIGluZGV4ZXIpKTtcbiAgKF9lID0gcGx1Z2luLmV2YWx1YXRvcnMpID09IG51bGwgPyB2b2lkIDAgOiBfZS5mb3JFYWNoKFxuICAgIChldmFsdWF0b3IpID0+IHZhbGlkYXRlTmFtaW5nKHBsdWdpbk5hbWUsIGV2YWx1YXRvcilcbiAgKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlTmFtaW5nKHBsdWdpbk5hbWUsIGFjdGlvbikge1xuICBjb25zdCBuYW1lUGFydHMgPSBhY3Rpb24uX19hY3Rpb24ubmFtZS5zcGxpdChcIi9cIik7XG4gIGlmIChuYW1lUGFydHNbMF0gIT09IHBsdWdpbk5hbWUpIHtcbiAgICBjb25zdCBlcnIgPSBgUGx1Z2luIG5hbWUgJHtwbHVnaW5OYW1lfSBub3QgZm91bmQgaW4gYWN0aW9uIG5hbWUgJHthY3Rpb24uX19hY3Rpb24ubmFtZX0uIEFjdGlvbiBuYW1lcyBtdXN0IGZvbGxvdyB0aGUgcGF0dGVybiB7cGx1Z2luTmFtZX0ve2FjdGlvbk5hbWV9YDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdlbmtpdFBsdWdpblxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVnaW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/plugin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/reflection.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/reflection.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar reflection_exports = {};\n__export(reflection_exports, {\n  ReflectionServer: () => ReflectionServer,\n  RunActionResponseSchema: () => RunActionResponseSchema\n});\nmodule.exports = __toCommonJS(reflection_exports);\nvar import_express = __toESM(__webpack_require__(/*! express */ \"express\"));\nvar import_promises = __toESM(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nvar import_get_port = __toESM(__webpack_require__(/*! get-port */ \"(rsc)/./node_modules/get-port/index.js\"));\nvar import_path = __toESM(__webpack_require__(/*! path */ \"path\"));\nvar import_zod = __toESM(__webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst RunActionResponseSchema = import_zod.default.object({\n  result: import_zod.default.unknown().optional(),\n  error: import_zod.default.unknown().optional(),\n  telemetry: import_zod.default.object({\n    traceId: import_zod.default.string().optional()\n  }).optional()\n});\nconst _ReflectionServer = class _ReflectionServer {\n  constructor(registry, options) {\n    /** Port the server is actually running on. This may differ from `options.port` if the original was occupied. Null if server is not running. */\n    this.port = null;\n    /** Express server instance. Null if server is not running. */\n    this.server = null;\n    /** Path to the runtime file. Null if server is not running. */\n    this.runtimeFilePath = null;\n    this.registry = registry;\n    this.options = __spreadValues({\n      port: 3100,\n      bodyLimit: \"30mb\",\n      configuredEnvs: [\"dev\"]\n    }, options);\n  }\n  /**\n   * Finds a free port to run the server on based on the original chosen port and environment.\n   */\n  findPort() {\n    return __async(this, null, function* () {\n      const chosenPort = this.options.port;\n      const freePort = yield (0, import_get_port.default)({\n        port: (0, import_get_port.makeRange)(chosenPort, chosenPort + 100)\n      });\n      if (freePort !== chosenPort) {\n        import_logging.logger.warn(\n          `Port ${chosenPort} is already in use, using next available port ${freePort} instead.`\n        );\n      }\n      return freePort;\n    });\n  }\n  /**\n   * Starts the server.\n   *\n   * The server will be registered to be shut down on process exit.\n   */\n  start() {\n    return __async(this, null, function* () {\n      const server = (0, import_express.default)();\n      server.use(import_express.default.json({ limit: this.options.bodyLimit }));\n      server.use(function(req, res, next) {\n        res.header(\"x-genkit-version\", import_index.GENKIT_VERSION);\n        next();\n      });\n      server.get(\"/api/__health\", (_, response) => __async(this, null, function* () {\n        yield this.registry.listActions();\n        response.status(200).send(\"OK\");\n      }));\n      server.get(\"/api/__quitquitquit\", (_, response) => __async(this, null, function* () {\n        import_logging.logger.debug(\"Received quitquitquit\");\n        response.status(200).send(\"OK\");\n        yield this.stop();\n      }));\n      server.get(\"/api/actions\", (_, response, next) => __async(this, null, function* () {\n        import_logging.logger.debug(\"Fetching actions.\");\n        try {\n          const actions = yield this.registry.listActions();\n          const convertedActions = {};\n          Object.keys(actions).forEach((key) => {\n            const action = actions[key].__action;\n            convertedActions[key] = {\n              key,\n              name: action.name,\n              description: action.description,\n              metadata: action.metadata\n            };\n            if (action.inputSchema || action.inputJsonSchema) {\n              convertedActions[key].inputSchema = (0, import_schema.toJsonSchema)({\n                schema: action.inputSchema,\n                jsonSchema: action.inputJsonSchema\n              });\n            }\n            if (action.outputSchema || action.outputJsonSchema) {\n              convertedActions[key].outputSchema = (0, import_schema.toJsonSchema)({\n                schema: action.outputSchema,\n                jsonSchema: action.outputJsonSchema\n              });\n            }\n          });\n          response.send(convertedActions);\n        } catch (err) {\n          const { message, stack } = err;\n          next({ message, stack });\n        }\n      }));\n      server.post(\"/api/runAction\", (request, response, next) => __async(this, null, function* () {\n        const { key, input } = request.body;\n        const { stream } = request.query;\n        import_logging.logger.debug(`Running action \\`${key}\\` with stream=${stream}...`);\n        let traceId;\n        try {\n          const action = yield this.registry.lookupAction(key);\n          if (!action) {\n            response.status(404).send(`action ${key} not found`);\n            return;\n          }\n          if (stream === \"true\") {\n            const result = yield (0, import_tracing.newTrace)(\n              { name: \"dev-run-action-wrapper\" },\n              (_, span) => __async(this, null, function* () {\n                (0, import_tracing.setCustomMetadataAttribute)(\"genkit-dev-internal\", \"true\");\n                traceId = span.spanContext().traceId;\n                return yield (0, import_action.runWithStreamingCallback)(\n                  (chunk) => {\n                    response.write(JSON.stringify(chunk) + \"\\n\");\n                  },\n                  () => __async(this, null, function* () {\n                    return yield action(input);\n                  })\n                );\n              })\n            );\n            yield (0, import_tracing.flushTracing)();\n            response.write(\n              JSON.stringify({\n                result,\n                telemetry: traceId ? {\n                  traceId\n                } : void 0\n              })\n            );\n            response.end();\n          } else {\n            const result = yield (0, import_tracing.newTrace)(\n              { name: \"dev-run-action-wrapper\" },\n              (_, span) => __async(this, null, function* () {\n                (0, import_tracing.setCustomMetadataAttribute)(\"genkit-dev-internal\", \"true\");\n                traceId = span.spanContext().traceId;\n                return yield action(input);\n              })\n            );\n            yield (0, import_tracing.flushTracing)();\n            response.send({\n              result,\n              telemetry: traceId ? {\n                traceId\n              } : void 0\n            });\n          }\n        } catch (err) {\n          const { message, stack } = err;\n          next({ message, stack, traceId });\n        }\n      }));\n      server.get(\"/api/envs\", (_, response) => __async(this, null, function* () {\n        response.json(this.options.configuredEnvs);\n      }));\n      server.post(\"/api/notify\", (request, response) => __async(this, null, function* () {\n        const { telemetryServerUrl } = request.body;\n        if (typeof telemetryServerUrl === \"string\") {\n          (0, import_tracing.setTelemetryServerUrl)(telemetryServerUrl);\n          import_logging.logger.debug(`Connected to telemetry server on ${telemetryServerUrl}`);\n        }\n        response.status(200).send(\"OK\");\n      }));\n      server.use((err, req, res, next) => {\n        import_logging.logger.error(err.stack);\n        const error = err;\n        const { message, stack } = error;\n        const errorResponse = {\n          code: import_action.StatusCodes.INTERNAL,\n          message,\n          details: {\n            stack\n          }\n        };\n        if (err.traceId) {\n          errorResponse.details.traceId = err.traceId;\n        }\n        res.status(500).json(errorResponse);\n      });\n      this.port = yield this.findPort();\n      this.server = server.listen(this.port, () => __async(this, null, function* () {\n        import_logging.logger.debug(\n          `Reflection server (${process.pid}) running on http://localhost:${this.port}`\n        );\n        _ReflectionServer.RUNNING_SERVERS.push(this);\n        yield this.writeRuntimeFile();\n      }));\n    });\n  }\n  /**\n   * Stops the server and removes it from the list of running servers to clean up on exit.\n   */\n  stop() {\n    return __async(this, null, function* () {\n      if (!this.server) {\n        return;\n      }\n      return new Promise((resolve, reject) => __async(this, null, function* () {\n        yield this.cleanupRuntimeFile();\n        this.server.close((err) => __async(this, null, function* () {\n          if (err) {\n            import_logging.logger.error(\n              `Error shutting down reflection server on port ${this.port}: ${err}`\n            );\n            reject(err);\n          }\n          const index = _ReflectionServer.RUNNING_SERVERS.indexOf(this);\n          if (index > -1) {\n            _ReflectionServer.RUNNING_SERVERS.splice(index, 1);\n          }\n          import_logging.logger.debug(\n            `Reflection server on port ${this.port} has successfully shut down.`\n          );\n          this.port = null;\n          this.server = null;\n          resolve();\n        }));\n      }));\n    });\n  }\n  /**\n   * Writes the runtime file to the project root.\n   */\n  writeRuntimeFile() {\n    return __async(this, null, function* () {\n      try {\n        const rootDir = yield findProjectRoot();\n        const runtimesDir = import_path.default.join(rootDir, \".genkit\", \"runtimes\");\n        const timestamp = (/* @__PURE__ */ new Date()).toISOString();\n        this.runtimeFilePath = import_path.default.join(\n          runtimesDir,\n          `${process.pid}-${timestamp}.json`\n        );\n        const fileContent = JSON.stringify(\n          {\n            id: process.env.GENKIT_RUNTIME_ID || process.pid.toString(),\n            pid: process.pid,\n            reflectionServerUrl: `http://localhost:${this.port}`,\n            timestamp\n          },\n          null,\n          2\n        );\n        yield import_promises.default.mkdir(runtimesDir, { recursive: true });\n        yield import_promises.default.writeFile(this.runtimeFilePath, fileContent, \"utf8\");\n        import_logging.logger.debug(`Runtime file written: ${this.runtimeFilePath}`);\n      } catch (error) {\n        import_logging.logger.error(`Error writing runtime file: ${error}`);\n      }\n    });\n  }\n  /**\n   * Cleans up the port file.\n   */\n  cleanupRuntimeFile() {\n    return __async(this, null, function* () {\n      if (!this.runtimeFilePath) {\n        return;\n      }\n      try {\n        const fileContent = yield import_promises.default.readFile(this.runtimeFilePath, \"utf8\");\n        const data = JSON.parse(fileContent);\n        if (data.pid === process.pid) {\n          yield import_promises.default.unlink(this.runtimeFilePath);\n          import_logging.logger.debug(`Runtime file cleaned up: ${this.runtimeFilePath}`);\n        }\n      } catch (error) {\n        import_logging.logger.error(`Error cleaning up runtime file: ${error}`);\n      }\n    });\n  }\n  /**\n   * Stops all running reflection servers.\n   */\n  static stopAll() {\n    return __async(this, null, function* () {\n      return Promise.all(\n        _ReflectionServer.RUNNING_SERVERS.map((server) => server.stop())\n      );\n    });\n  }\n};\n/** List of all running servers needed to be cleaned up on process exit. */\n_ReflectionServer.RUNNING_SERVERS = [];\nlet ReflectionServer = _ReflectionServer;\nfunction findProjectRoot() {\n  return __async(this, null, function* () {\n    let currentDir = process.cwd();\n    while (currentDir !== import_path.default.parse(currentDir).root) {\n      const packageJsonPath = import_path.default.join(currentDir, \"package.json\");\n      try {\n        yield import_promises.default.access(packageJsonPath);\n        return currentDir;\n      } catch (e) {\n        currentDir = import_path.default.dirname(currentDir);\n      }\n    }\n    throw new Error(\"Could not find project root (package.json not found)\");\n  });\n}\nif ( true && \"hot\" in module) {\n  module.hot.accept();\n  module.hot.dispose(() => __async(void 0, null, function* () {\n    import_logging.logger.debug(\"Cleaning up reflection server(s) before module reload...\");\n    yield ReflectionServer.stopAll();\n  }));\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reflection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/reflection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/registry.js":
/*!******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/registry.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar registry_exports = {};\n__export(registry_exports, {\n  Registry: () => Registry\n});\nmodule.exports = __toCommonJS(registry_exports);\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/logging.js\");\nfunction parsePluginName(registryKey) {\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length === 4) {\n    return tokens[2];\n  }\n  return void 0;\n}\nclass Registry {\n  constructor(parent) {\n    this.parent = parent;\n    this.actionsById = {};\n    this.pluginsByName = {};\n    this.schemasByName = {};\n    this.allPluginsInitialized = false;\n  }\n  /**\n   * Creates a new registry overlaid onto the provided registry.\n   * @param parent The parent registry.\n   * @returns The new overlaid registry.\n   */\n  static withParent(parent) {\n    return new Registry(parent);\n  }\n  /**\n   * Looks up an action in the registry.\n   * @param key The key of the action to lookup.\n   * @returns The action.\n   */\n  lookupAction(key) {\n    return __async(this, null, function* () {\n      var _a;\n      const pluginName = parsePluginName(key);\n      if (!this.actionsById[key] && pluginName) {\n        yield this.initializePlugin(pluginName);\n      }\n      return this.actionsById[key] || ((_a = this.parent) == null ? void 0 : _a.lookupAction(key));\n    });\n  }\n  /**\n   * Registers an action in the registry.\n   * @param type The type of the action to register.\n   * @param action The action to register.\n   */\n  registerAction(type, action) {\n    const key = `/${type}/${action.__action.name}`;\n    import_logging.logger.debug(`registering ${key}`);\n    if (this.actionsById.hasOwnProperty(key)) {\n      import_logging.logger.warn(\n        `WARNING: ${key} already has an entry in the registry. Overwriting.`\n      );\n    }\n    this.actionsById[key] = action;\n  }\n  /**\n   * Returns all actions in the registry.\n   * @returns All actions in the registry.\n   */\n  listActions() {\n    return __async(this, null, function* () {\n      var _a;\n      yield this.initializeAllPlugins();\n      return __spreadValues(__spreadValues({}, yield (_a = this.parent) == null ? void 0 : _a.listActions()), this.actionsById);\n    });\n  }\n  /**\n   * Initializes all plugins in the registry.\n   */\n  initializeAllPlugins() {\n    return __async(this, null, function* () {\n      if (this.allPluginsInitialized) {\n        return;\n      }\n      for (const pluginName of Object.keys(this.pluginsByName)) {\n        yield this.initializePlugin(pluginName);\n      }\n      this.allPluginsInitialized = true;\n    });\n  }\n  /**\n   * Registers a plugin provider. This plugin must be initialized before it can be used by calling {@link initializePlugin} or {@link initializeAllPlugins}.\n   * @param name The name of the plugin to register.\n   * @param provider The plugin provider.\n   */\n  registerPluginProvider(name, provider) {\n    if (this.pluginsByName[name]) {\n      throw new Error(`Plugin ${name} already registered`);\n    }\n    this.allPluginsInitialized = false;\n    let cached;\n    let isInitialized = false;\n    this.pluginsByName[name] = {\n      name: provider.name,\n      initializer: () => {\n        if (!isInitialized) {\n          cached = provider.initializer();\n          isInitialized = true;\n        }\n        return cached;\n      }\n    };\n  }\n  /**\n   * Looks up a plugin.\n   * @param name The name of the plugin to lookup.\n   * @returns The plugin provider.\n   */\n  lookupPlugin(name) {\n    var _a;\n    return this.pluginsByName[name] || ((_a = this.parent) == null ? void 0 : _a.lookupPlugin(name));\n  }\n  /**\n   * Initializes a plugin already registered with {@link registerPluginProvider}.\n   * @param name The name of the plugin to initialize.\n   * @returns The plugin.\n   */\n  initializePlugin(name) {\n    return __async(this, null, function* () {\n      if (this.pluginsByName[name]) {\n        return yield this.pluginsByName[name].initializer();\n      }\n    });\n  }\n  /**\n   * Registers a schema.\n   * @param name The name of the schema to register.\n   * @param data The schema to register (either a Zod schema or a JSON schema).\n   */\n  registerSchema(name, data) {\n    if (this.schemasByName[name]) {\n      throw new Error(`Schema ${name} already registered`);\n    }\n    this.schemasByName[name] = data;\n  }\n  /**\n   * Looks up a schema.\n   * @param name The name of the schema to lookup.\n   * @returns The schema.\n   */\n  lookupSchema(name) {\n    var _a;\n    return this.schemasByName[name] || ((_a = this.parent) == null ? void 0 : _a.lookupSchema(name));\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/registry.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/schema.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/schema.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar schema_exports = {};\n__export(schema_exports, {\n  ValidationError: () => ValidationError,\n  defineJsonSchema: () => defineJsonSchema,\n  defineSchema: () => defineSchema,\n  parseSchema: () => parseSchema,\n  toJsonSchema: () => toJsonSchema,\n  validateSchema: () => validateSchema,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(schema_exports);\nvar import_ajv = __toESM(__webpack_require__(/*! ajv */ \"(rsc)/./node_modules/ajv/dist/ajv.js\"));\nvar import_ajv_formats = __toESM(__webpack_require__(/*! ajv-formats */ \"(rsc)/./node_modules/ajv-formats/dist/index.js\"));\nvar import_zod = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nvar import_zod_to_json_schema = __toESM(__webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/cjs/index.js\"));\nvar import_error = __webpack_require__(/*! ./error.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst ajv = new import_ajv.default();\n(0, import_ajv_formats.default)(ajv);\nconst jsonSchemas = /* @__PURE__ */ new WeakMap();\nconst validators = /* @__PURE__ */ new WeakMap();\nclass ValidationError extends import_error.GenkitError {\n  constructor({\n    data,\n    errors,\n    schema\n  }) {\n    super({\n      status: \"INVALID_ARGUMENT\",\n      message: `Schema validation failed. Parse Errors:\n\n${errors.map((e) => `- ${e.path}: ${e.message}`).join(\"\\n\")}\n\nProvided data:\n\n${JSON.stringify(data, null, 2)}\n\nRequired JSON schema:\n\n${JSON.stringify(schema, null, 2)}`,\n      detail: { errors, schema }\n    });\n  }\n}\nfunction toJsonSchema({\n  jsonSchema,\n  schema\n}) {\n  if (!jsonSchema && !schema)\n    return null;\n  if (jsonSchema)\n    return jsonSchema;\n  if (jsonSchemas.has(schema))\n    return jsonSchemas.get(schema);\n  const outSchema = (0, import_zod_to_json_schema.default)(schema, {\n    $refStrategy: \"none\",\n    removeAdditionalStrategy: \"strict\"\n  });\n  jsonSchemas.set(schema, outSchema);\n  return outSchema;\n}\nfunction toErrorDetail(error) {\n  return {\n    path: error.instancePath.substring(1).replace(/\\//g, \".\") || \"(root)\",\n    message: error.message\n  };\n}\nfunction validateSchema(data, options) {\n  var _a;\n  const toValidate = toJsonSchema(options);\n  if (!toValidate) {\n    return { valid: true, schema: toValidate };\n  }\n  const validator = validators.get(toValidate) || ajv.compile(toValidate);\n  const valid = validator(data);\n  const errors = (_a = validator.errors) == null ? void 0 : _a.map((e) => e);\n  return { valid, errors: errors == null ? void 0 : errors.map(toErrorDetail), schema: toValidate };\n}\nfunction parseSchema(data, options) {\n  const { valid, errors, schema } = validateSchema(data, options);\n  if (!valid)\n    throw new ValidationError({ data, errors, schema });\n  return data;\n}\nfunction defineSchema(registry, name, schema) {\n  registry.registerSchema(name, { schema });\n  return schema;\n}\nfunction defineJsonSchema(registry, name, jsonSchema) {\n  registry.registerSchema(name, { jsonSchema });\n  return jsonSchema;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9zY2hlbWEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EseUJBQXlCLG1CQUFPLENBQUMsaURBQUs7QUFDdEMsaUNBQWlDLG1CQUFPLENBQUMsbUVBQWE7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMsa0RBQUs7QUFDOUIsd0NBQXdDLG1CQUFPLENBQUMscUZBQW9CO0FBQ3BFLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEsRUFBRSx1QkFBdUIsT0FBTyxJQUFJLFVBQVU7O0FBRTlDOztBQUVBLEVBQUU7O0FBRUY7O0FBRUEsRUFBRSxnQ0FBZ0M7QUFDbEMsZ0JBQWdCO0FBQ2hCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQSxnQ0FBZ0Msc0JBQXNCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxRQUFRO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxZQUFZO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FRTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9zY2hlbWEuanM/N2JkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgc2NoZW1hX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNjaGVtYV9leHBvcnRzLCB7XG4gIFZhbGlkYXRpb25FcnJvcjogKCkgPT4gVmFsaWRhdGlvbkVycm9yLFxuICBkZWZpbmVKc29uU2NoZW1hOiAoKSA9PiBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWE6ICgpID0+IGRlZmluZVNjaGVtYSxcbiAgcGFyc2VTY2hlbWE6ICgpID0+IHBhcnNlU2NoZW1hLFxuICB0b0pzb25TY2hlbWE6ICgpID0+IHRvSnNvblNjaGVtYSxcbiAgdmFsaWRhdGVTY2hlbWE6ICgpID0+IHZhbGlkYXRlU2NoZW1hLFxuICB6OiAoKSA9PiBpbXBvcnRfem9kLnpcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc2NoZW1hX2V4cG9ydHMpO1xudmFyIGltcG9ydF9hanYgPSBfX3RvRVNNKHJlcXVpcmUoXCJhanZcIikpO1xudmFyIGltcG9ydF9hanZfZm9ybWF0cyA9IF9fdG9FU00ocmVxdWlyZShcImFqdi1mb3JtYXRzXCIpKTtcbnZhciBpbXBvcnRfem9kID0gcmVxdWlyZShcInpvZFwiKTtcbnZhciBpbXBvcnRfem9kX3RvX2pzb25fc2NoZW1hID0gX190b0VTTShyZXF1aXJlKFwiem9kLXRvLWpzb24tc2NoZW1hXCIpKTtcbnZhciBpbXBvcnRfZXJyb3IgPSByZXF1aXJlKFwiLi9lcnJvci5qc1wiKTtcbmNvbnN0IGFqdiA9IG5ldyBpbXBvcnRfYWp2LmRlZmF1bHQoKTtcbigwLCBpbXBvcnRfYWp2X2Zvcm1hdHMuZGVmYXVsdCkoYWp2KTtcbmNvbnN0IGpzb25TY2hlbWFzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCB2YWxpZGF0b3JzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBpbXBvcnRfZXJyb3IuR2Vua2l0RXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgZGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc2NoZW1hXG4gIH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBzdGF0dXM6IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICAgICAgbWVzc2FnZTogYFNjaGVtYSB2YWxpZGF0aW9uIGZhaWxlZC4gUGFyc2UgRXJyb3JzOlxuXG4ke2Vycm9ycy5tYXAoKGUpID0+IGAtICR7ZS5wYXRofTogJHtlLm1lc3NhZ2V9YCkuam9pbihcIlxcblwiKX1cblxuUHJvdmlkZWQgZGF0YTpcblxuJHtKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKX1cblxuUmVxdWlyZWQgSlNPTiBzY2hlbWE6XG5cbiR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hLCBudWxsLCAyKX1gLFxuICAgICAgZGV0YWlsOiB7IGVycm9ycywgc2NoZW1hIH1cbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gdG9Kc29uU2NoZW1hKHtcbiAganNvblNjaGVtYSxcbiAgc2NoZW1hXG59KSB7XG4gIGlmICghanNvblNjaGVtYSAmJiAhc2NoZW1hKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAoanNvblNjaGVtYSlcbiAgICByZXR1cm4ganNvblNjaGVtYTtcbiAgaWYgKGpzb25TY2hlbWFzLmhhcyhzY2hlbWEpKVxuICAgIHJldHVybiBqc29uU2NoZW1hcy5nZXQoc2NoZW1hKTtcbiAgY29uc3Qgb3V0U2NoZW1hID0gKDAsIGltcG9ydF96b2RfdG9fanNvbl9zY2hlbWEuZGVmYXVsdCkoc2NoZW1hLCB7XG4gICAgJHJlZlN0cmF0ZWd5OiBcIm5vbmVcIixcbiAgICByZW1vdmVBZGRpdGlvbmFsU3RyYXRlZ3k6IFwic3RyaWN0XCJcbiAgfSk7XG4gIGpzb25TY2hlbWFzLnNldChzY2hlbWEsIG91dFNjaGVtYSk7XG4gIHJldHVybiBvdXRTY2hlbWE7XG59XG5mdW5jdGlvbiB0b0Vycm9yRGV0YWlsKGVycm9yKSB7XG4gIHJldHVybiB7XG4gICAgcGF0aDogZXJyb3IuaW5zdGFuY2VQYXRoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC8vZywgXCIuXCIpIHx8IFwiKHJvb3QpXCIsXG4gICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWEoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2E7XG4gIGNvbnN0IHRvVmFsaWRhdGUgPSB0b0pzb25TY2hlbWEob3B0aW9ucyk7XG4gIGlmICghdG9WYWxpZGF0ZSkge1xuICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBzY2hlbWE6IHRvVmFsaWRhdGUgfTtcbiAgfVxuICBjb25zdCB2YWxpZGF0b3IgPSB2YWxpZGF0b3JzLmdldCh0b1ZhbGlkYXRlKSB8fCBhanYuY29tcGlsZSh0b1ZhbGlkYXRlKTtcbiAgY29uc3QgdmFsaWQgPSB2YWxpZGF0b3IoZGF0YSk7XG4gIGNvbnN0IGVycm9ycyA9IChfYSA9IHZhbGlkYXRvci5lcnJvcnMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5tYXAoKGUpID0+IGUpO1xuICByZXR1cm4geyB2YWxpZCwgZXJyb3JzOiBlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9ycy5tYXAodG9FcnJvckRldGFpbCksIHNjaGVtYTogdG9WYWxpZGF0ZSB9O1xufVxuZnVuY3Rpb24gcGFyc2VTY2hlbWEoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCB7IHZhbGlkLCBlcnJvcnMsIHNjaGVtYSB9ID0gdmFsaWRhdGVTY2hlbWEoZGF0YSwgb3B0aW9ucyk7XG4gIGlmICghdmFsaWQpXG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcih7IGRhdGEsIGVycm9ycywgc2NoZW1hIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGRlZmluZVNjaGVtYShyZWdpc3RyeSwgbmFtZSwgc2NoZW1hKSB7XG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyU2NoZW1hKG5hbWUsIHsgc2NoZW1hIH0pO1xuICByZXR1cm4gc2NoZW1hO1xufVxuZnVuY3Rpb24gZGVmaW5lSnNvblNjaGVtYShyZWdpc3RyeSwgbmFtZSwganNvblNjaGVtYSkge1xuICByZWdpc3RyeS5yZWdpc3RlclNjaGVtYShuYW1lLCB7IGpzb25TY2hlbWEgfSk7XG4gIHJldHVybiBqc29uU2NoZW1hO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIFZhbGlkYXRpb25FcnJvcixcbiAgZGVmaW5lSnNvblNjaGVtYSxcbiAgZGVmaW5lU2NoZW1hLFxuICBwYXJzZVNjaGVtYSxcbiAgdG9Kc29uU2NoZW1hLFxuICB2YWxpZGF0ZVNjaGVtYSxcbiAgelxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/statusTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/statusTypes.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar statusTypes_exports = {};\n__export(statusTypes_exports, {\n  StatusCodes: () => StatusCodes,\n  StatusNameSchema: () => StatusNameSchema,\n  StatusSchema: () => StatusSchema\n});\nmodule.exports = __toCommonJS(statusTypes_exports);\nvar z = __toESM(__webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\"));\nvar StatusCodes = /* @__PURE__ */ ((StatusCodes2) => {\n  StatusCodes2[StatusCodes2[\"OK\"] = 0] = \"OK\";\n  StatusCodes2[StatusCodes2[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  StatusCodes2[StatusCodes2[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  StatusCodes2[StatusCodes2[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  StatusCodes2[StatusCodes2[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  StatusCodes2[StatusCodes2[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  StatusCodes2[StatusCodes2[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  StatusCodes2[StatusCodes2[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  StatusCodes2[StatusCodes2[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  StatusCodes2[StatusCodes2[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  StatusCodes2[StatusCodes2[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  StatusCodes2[StatusCodes2[\"ABORTED\"] = 10] = \"ABORTED\";\n  StatusCodes2[StatusCodes2[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  StatusCodes2[StatusCodes2[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  StatusCodes2[StatusCodes2[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  StatusCodes2[StatusCodes2[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  StatusCodes2[StatusCodes2[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n  return StatusCodes2;\n})(StatusCodes || {});\nconst StatusNameSchema = z.enum([\n  \"CANCELLED\",\n  \"UNKNOWN\",\n  \"INVALID_ARGUMENT\",\n  \"DEADLINE_EXCEEDED\",\n  \"NOT_FOUND\",\n  \"ALREADY_EXISTS\",\n  \"PERMISSION_DENIED\",\n  \"UNAUTHENTICATED\",\n  \"RESOURCE_EXHAUSTED\",\n  \"FAILED_PRECONDITION\",\n  \"ABORTED\",\n  \"OUT_OF_RANGE\",\n  \"UNIMPLEMENTED\",\n  \"INTERNAL\",\n  \"UNAVAILABLE\",\n  \"DATA_LOSS\"\n]);\nconst StatusCodesSchema = z.nativeEnum(StatusCodes);\nconst StatusSchema = z.object({\n  code: StatusCodesSchema,\n  message: z.string(),\n  details: z.any().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=statusTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9zdGF0dXNUeXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSw4QkFBOEI7QUFDdkc7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsa0RBQUs7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG1CQUFtQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQUlMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3N0YXR1c1R5cGVzLmpzPzc2Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHN0YXR1c1R5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHN0YXR1c1R5cGVzX2V4cG9ydHMsIHtcbiAgU3RhdHVzQ29kZXM6ICgpID0+IFN0YXR1c0NvZGVzLFxuICBTdGF0dXNOYW1lU2NoZW1hOiAoKSA9PiBTdGF0dXNOYW1lU2NoZW1hLFxuICBTdGF0dXNTY2hlbWE6ICgpID0+IFN0YXR1c1NjaGVtYVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzdGF0dXNUeXBlc19leHBvcnRzKTtcbnZhciB6ID0gX190b0VTTShyZXF1aXJlKFwiem9kXCIpKTtcbnZhciBTdGF0dXNDb2RlcyA9IC8qIEBfX1BVUkVfXyAqLyAoKFN0YXR1c0NvZGVzMikgPT4ge1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkNBTkNFTExFRFwiXSA9IDFdID0gXCJDQU5DRUxMRURcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlVOS05PV05cIl0gPSAyXSA9IFwiVU5LTk9XTlwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJERUFETElORV9FWENFRURFRFwiXSA9IDRdID0gXCJERUFETElORV9FWENFRURFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiTk9UX0ZPVU5EXCJdID0gNV0gPSBcIk5PVF9GT1VORFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlBFUk1JU1NJT05fREVOSUVEXCJdID0gN10gPSBcIlBFUk1JU1NJT05fREVOSUVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTkFVVEhFTlRJQ0FURURcIl0gPSAxNl0gPSBcIlVOQVVUSEVOVElDQVRFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiRkFJTEVEX1BSRUNPTkRJVElPTlwiXSA9IDldID0gXCJGQUlMRURfUFJFQ09ORElUSU9OXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJBQk9SVEVEXCJdID0gMTBdID0gXCJBQk9SVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiVU5JTVBMRU1FTlRFRFwiXSA9IDEyXSA9IFwiVU5JTVBMRU1FTlRFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiSU5URVJOQUxcIl0gPSAxM10gPSBcIklOVEVSTkFMXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkRBVEFfTE9TU1wiXSA9IDE1XSA9IFwiREFUQV9MT1NTXCI7XG4gIHJldHVybiBTdGF0dXNDb2RlczI7XG59KShTdGF0dXNDb2RlcyB8fCB7fSk7XG5jb25zdCBTdGF0dXNOYW1lU2NoZW1hID0gei5lbnVtKFtcbiAgXCJDQU5DRUxMRURcIixcbiAgXCJVTktOT1dOXCIsXG4gIFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICBcIkRFQURMSU5FX0VYQ0VFREVEXCIsXG4gIFwiTk9UX0ZPVU5EXCIsXG4gIFwiQUxSRUFEWV9FWElTVFNcIixcbiAgXCJQRVJNSVNTSU9OX0RFTklFRFwiLFxuICBcIlVOQVVUSEVOVElDQVRFRFwiLFxuICBcIlJFU09VUkNFX0VYSEFVU1RFRFwiLFxuICBcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAgXCJBQk9SVEVEXCIsXG4gIFwiT1VUX09GX1JBTkdFXCIsXG4gIFwiVU5JTVBMRU1FTlRFRFwiLFxuICBcIklOVEVSTkFMXCIsXG4gIFwiVU5BVkFJTEFCTEVcIixcbiAgXCJEQVRBX0xPU1NcIlxuXSk7XG5jb25zdCBTdGF0dXNDb2Rlc1NjaGVtYSA9IHoubmF0aXZlRW51bShTdGF0dXNDb2Rlcyk7XG5jb25zdCBTdGF0dXNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGNvZGU6IFN0YXR1c0NvZGVzU2NoZW1hLFxuICBtZXNzYWdlOiB6LnN0cmluZygpLFxuICBkZXRhaWxzOiB6LmFueSgpLm9wdGlvbmFsKClcbn0pO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIFN0YXR1c0NvZGVzLFxuICBTdGF0dXNOYW1lU2NoZW1hLFxuICBTdGF0dXNTY2hlbWFcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHVzVHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/statusTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/telemetryTypes.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar telemetryTypes_exports = {};\nmodule.exports = __toCommonJS(telemetryTypes_exports);\n//# sourceMappingURL=telemetryTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi90ZWxlbWV0cnlUeXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RlbGVtZXRyeVR5cGVzLmpzPzIxYWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHRlbGVtZXRyeVR5cGVzX2V4cG9ydHMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHRlbGVtZXRyeVR5cGVzX2V4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVsZW1ldHJ5VHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar tracing_exports = {};\n__export(tracing_exports, {\n  cleanUpTracing: () => cleanUpTracing,\n  enableTelemetry: () => enableTelemetry,\n  ensureBasicTelemetryInstrumentation: () => ensureBasicTelemetryInstrumentation,\n  flushTracing: () => flushTracing\n});\nmodule.exports = __toCommonJS(tracing_exports);\nvar import_sdk_node = __webpack_require__(/*! @opentelemetry/sdk-node */ \"(rsc)/./node_modules/@opentelemetry/sdk-node/build/src/index.js\");\nvar import_sdk_trace_base = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(rsc)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_exporter = __webpack_require__(/*! ./tracing/exporter.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/utils.js\");\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/exporter.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/instrumentation.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/processor.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing/processor.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/types.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing/types.js\"), module.exports);\nlet telemetrySDK = null;\nlet nodeOtelConfig = null;\nconst instrumentationKey = \"__GENKIT_TELEMETRY_INSTRUMENTED\";\nfunction ensureBasicTelemetryInstrumentation() {\n  if (global[instrumentationKey]) {\n    return;\n  }\n  enableTelemetry({});\n  global[instrumentationKey] = true;\n}\nfunction enableTelemetry(telemetryConfig) {\n  nodeOtelConfig = telemetryConfig || {};\n  const processors = [createTelemetryServerProcessor()];\n  if (nodeOtelConfig.traceExporter) {\n    throw new Error(\"Please specify spanProcessors instead.\");\n  }\n  if (nodeOtelConfig.spanProcessors) {\n    processors.push(...nodeOtelConfig.spanProcessors);\n  }\n  if (nodeOtelConfig.spanProcessor) {\n    processors.push(nodeOtelConfig.spanProcessor);\n    delete nodeOtelConfig.spanProcessor;\n  }\n  nodeOtelConfig.spanProcessors = processors;\n  telemetrySDK = new import_sdk_node.NodeSDK(nodeOtelConfig);\n  telemetrySDK.start();\n  process.on(\"SIGTERM\", () => __async(this, null, function* () {\n    return yield cleanUpTracing();\n  }));\n}\nfunction cleanUpTracing() {\n  return __async(this, null, function* () {\n    return new Promise((resolve) => {\n      if (telemetrySDK) {\n        const metricFlush = maybeFlushMetrics();\n        return metricFlush.then(() => {\n          return telemetrySDK.shutdown().then(() => {\n            import_logging.logger.debug(\"OpenTelemetry SDK shut down.\");\n            telemetrySDK = null;\n            resolve();\n          });\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n}\nfunction createTelemetryServerProcessor() {\n  const exporter = new import_exporter.TraceServerExporter();\n  return (0, import_utils.isDevEnv)() ? new import_sdk_trace_base.SimpleSpanProcessor(exporter) : new import_sdk_trace_base.BatchSpanProcessor(exporter);\n}\nfunction maybeFlushMetrics() {\n  if (nodeOtelConfig == null ? void 0 : nodeOtelConfig.metricReader) {\n    return nodeOtelConfig.metricReader.forceFlush();\n  }\n  return Promise.resolve();\n}\nfunction flushTracing() {\n  return __async(this, null, function* () {\n    if (nodeOtelConfig == null ? void 0 : nodeOtelConfig.spanProcessors) {\n      yield Promise.all(nodeOtelConfig.spanProcessors.map((p) => p.forceFlush()));\n    }\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js":
/*!**************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/exporter.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar exporter_exports = {};\n__export(exporter_exports, {\n  TraceServerExporter: () => TraceServerExporter,\n  setTelemetryServerUrl: () => setTelemetryServerUrl,\n  telemetryServerUrl: () => telemetryServerUrl\n});\nmodule.exports = __toCommonJS(exporter_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_core = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ../logging.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_utils = __webpack_require__(/*! ../utils.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/utils.js\");\nlet telemetryServerUrl;\nfunction setTelemetryServerUrl(url) {\n  telemetryServerUrl = url;\n}\nclass TraceServerExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(spans, resultCallback) {\n    this._sendSpans(spans, resultCallback);\n  }\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown() {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n  /**\n   * Converts span info into trace store format.\n   * @param span\n   */\n  _exportInfo(span) {\n    const spanData = {\n      spanId: span.spanContext().spanId,\n      traceId: span.spanContext().traceId,\n      startTime: transformTime(span.startTime),\n      endTime: transformTime(span.endTime),\n      attributes: __spreadValues({}, span.attributes),\n      displayName: span.name,\n      links: span.links,\n      spanKind: import_api.SpanKind[span.kind],\n      parentSpanId: span.parentSpanId,\n      sameProcessAsParentSpan: { value: !span.spanContext().isRemote },\n      status: span.status,\n      timeEvents: {\n        timeEvent: span.events.map((e) => {\n          var _a;\n          return {\n            time: transformTime(e.time),\n            annotation: {\n              attributes: (_a = e.attributes) != null ? _a : {},\n              description: e.name\n            }\n          };\n        })\n      }\n    };\n    if (span.instrumentationLibrary !== void 0) {\n      spanData.instrumentationLibrary = {\n        name: span.instrumentationLibrary.name\n      };\n      if (span.instrumentationLibrary.schemaUrl !== void 0) {\n        spanData.instrumentationLibrary.schemaUrl = span.instrumentationLibrary.schemaUrl;\n      }\n      if (span.instrumentationLibrary.version !== void 0) {\n        spanData.instrumentationLibrary.version = span.instrumentationLibrary.version;\n      }\n    }\n    (0, import_utils.deleteUndefinedProps)(spanData);\n    return spanData;\n  }\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush() {\n    return Promise.resolve();\n  }\n  _sendSpans(spans, done) {\n    return __async(this, null, function* () {\n      const traces = {};\n      for (const span of spans) {\n        if (!traces[span.spanContext().traceId]) {\n          traces[span.spanContext().traceId] = [];\n        }\n        traces[span.spanContext().traceId].push(span);\n      }\n      let error = false;\n      for (const traceId of Object.keys(traces)) {\n        try {\n          yield this.save(traceId, traces[traceId]);\n        } catch (e) {\n          error = true;\n          import_logging.logger.error(`Failed to save trace ${traceId}`, e);\n        }\n        if (done) {\n          return done({\n            code: error ? import_core.ExportResultCode.FAILED : import_core.ExportResultCode.SUCCESS\n          });\n        }\n      }\n    });\n  }\n  save(traceId, spans) {\n    return __async(this, null, function* () {\n      if (!telemetryServerUrl) {\n        import_logging.logger.debug(\n          `Telemetry server is not configured, trace ${traceId} not saved!`\n        );\n        return;\n      }\n      const data = {\n        traceId,\n        spans: {}\n      };\n      for (const span of spans) {\n        const convertedSpan = this._exportInfo(span);\n        data.spans[convertedSpan.spanId] = convertedSpan;\n        if (!convertedSpan.parentSpanId) {\n          data.displayName = convertedSpan.displayName;\n          data.startTime = convertedSpan.startTime;\n          data.endTime = convertedSpan.endTime;\n        }\n      }\n      yield fetch(`${telemetryServerUrl}/api/traces`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n    });\n  }\n}\nfunction transformTime(time) {\n  return (0, import_core.hrTimeToMilliseconds)(time);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=exporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar instrumentation_exports = {};\n__export(instrumentation_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  SPAN_TYPE_ATTR: () => SPAN_TYPE_ATTR,\n  appendSpan: () => appendSpan,\n  newTrace: () => newTrace,\n  runInNewSpan: () => runInNewSpan,\n  setCustomMetadataAttribute: () => setCustomMetadataAttribute,\n  setCustomMetadataAttributes: () => setCustomMetadataAttributes,\n  spanMetadataAls: () => spanMetadataAls,\n  toDisplayPath: () => toDisplayPath,\n  traceMetadataAls: () => traceMetadataAls\n});\nmodule.exports = __toCommonJS(instrumentation_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_tracing = __webpack_require__(/*! ../tracing.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst spanMetadataAls = new import_node_async_hooks.AsyncLocalStorage();\nconst traceMetadataAls = new import_node_async_hooks.AsyncLocalStorage();\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_TYPE_ATTR = ATTR_PREFIX + \":type\";\nconst TRACER_NAME = \"genkit-tracer\";\nconst TRACER_VERSION = \"v1\";\nfunction newTrace(opts, fn) {\n  return __async(this, null, function* () {\n    (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n    const traceMetadata = traceMetadataAls.getStore() || {\n      paths: /* @__PURE__ */ new Set(),\n      timestamp: import_node_perf_hooks.performance.now(),\n      featureName: opts.name\n    };\n    return yield traceMetadataAls.run(\n      traceMetadata,\n      () => runInNewSpan(\n        {\n          metadata: {\n            name: opts.name\n          },\n          labels: opts.labels,\n          links: opts.links\n        },\n        (metadata, otSpan) => __async(this, null, function* () {\n          return yield fn(metadata, otSpan);\n        })\n      )\n    );\n  });\n}\nfunction runInNewSpan(opts, fn) {\n  return __async(this, null, function* () {\n    var _a;\n    (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n    const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n    const parentStep = spanMetadataAls.getStore();\n    const isInRoot = (parentStep == null ? void 0 : parentStep.isRoot) === true;\n    if (!parentStep)\n      (_a = opts.metadata).isRoot || (_a.isRoot = true);\n    return yield tracer.startActiveSpan(\n      opts.metadata.name,\n      { links: opts.links, root: opts.metadata.isRoot },\n      (otSpan) => __async(this, null, function* () {\n        if (opts.labels)\n          otSpan.setAttributes(opts.labels);\n        try {\n          opts.metadata.path = buildPath(\n            opts.metadata.name,\n            (parentStep == null ? void 0 : parentStep.path) || \"\",\n            opts.labels\n          );\n          const output = yield spanMetadataAls.run(\n            opts.metadata,\n            () => fn(opts.metadata, otSpan, isInRoot)\n          );\n          if (opts.metadata.state !== \"error\") {\n            opts.metadata.state = \"success\";\n          }\n          recordPath(opts.metadata);\n          return output;\n        } catch (e) {\n          recordPath(opts.metadata, e);\n          opts.metadata.state = \"error\";\n          otSpan.setStatus({\n            code: import_api.SpanStatusCode.ERROR,\n            message: getErrorMessage(e)\n          });\n          if (e instanceof Error) {\n            otSpan.recordException(e);\n          }\n          throw e;\n        } finally {\n          otSpan.setAttributes(metadataToAttributes(opts.metadata));\n          otSpan.end();\n        }\n      })\n    );\n  });\n}\nfunction appendSpan(traceId, parentSpanId, metadata, labels) {\n  const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n  const spanContext = import_api.trace.setSpanContext(import_api.ROOT_CONTEXT, {\n    traceId,\n    traceFlags: 1,\n    // sampled\n    spanId: parentSpanId\n  });\n  const span = tracer.startSpan(metadata.name, {}, spanContext);\n  span.setAttributes(metadataToAttributes(metadata));\n  if (labels) {\n    span.setAttributes(labels);\n  }\n  span.end();\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction metadataToAttributes(metadata) {\n  const out = {};\n  Object.keys(metadata).forEach((key) => {\n    if (key === \"metadata\" && typeof metadata[key] === \"object\" && metadata.metadata) {\n      Object.entries(metadata.metadata).forEach(([metaKey, value]) => {\n        out[ATTR_PREFIX + \":metadata:\" + metaKey] = value;\n      });\n    } else if (key === \"input\" || typeof metadata[key] === \"object\") {\n      out[ATTR_PREFIX + \":\" + key] = JSON.stringify(metadata[key]);\n    } else {\n      out[ATTR_PREFIX + \":\" + key] = metadata[key];\n    }\n  });\n  return out;\n}\nfunction setCustomMetadataAttribute(key, value) {\n  const currentStep = getCurrentSpan();\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  currentStep.metadata[key] = value;\n}\nfunction setCustomMetadataAttributes(values) {\n  const currentStep = getCurrentSpan();\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  for (const [key, value] of Object.entries(values)) {\n    currentStep.metadata[key] = value;\n  }\n}\nfunction toDisplayPath(path) {\n  const pathPartRegex = /\\{([^\\,}]+),[^\\}]+\\}/g;\n  return Array.from(path.matchAll(pathPartRegex), (m) => m[1]).join(\" > \");\n}\nfunction getCurrentSpan() {\n  const step = spanMetadataAls.getStore();\n  if (!step) {\n    throw new Error(\"running outside step context\");\n  }\n  return step;\n}\nfunction buildPath(name, parentPath, labels) {\n  const stepType = labels && labels[\"genkit:type\"] ? `,t:${labels[\"genkit:type\"]}` : \"\";\n  return parentPath + `/{${name}${stepType}}`;\n}\nfunction recordPath(spanMeta, err) {\n  var _a, _b, _c, _d;\n  const path = spanMeta.path || \"\";\n  const decoratedPath = decoratePathWithSubtype(spanMeta);\n  const paths = Array.from(\n    ((_a = traceMetadataAls.getStore()) == null ? void 0 : _a.paths) || /* @__PURE__ */ new Set()\n  );\n  const status = err ? \"failure\" : \"success\";\n  if (!paths.some((p) => p.path.startsWith(path) && p.status === status)) {\n    const now = import_node_perf_hooks.performance.now();\n    const start = ((_b = traceMetadataAls.getStore()) == null ? void 0 : _b.timestamp) || now;\n    (_d = (_c = traceMetadataAls.getStore()) == null ? void 0 : _c.paths) == null ? void 0 : _d.add({\n      path: decoratedPath,\n      error: err == null ? void 0 : err.name,\n      latency: now - start,\n      status\n    });\n  }\n  spanMeta.path = decoratedPath;\n}\nfunction decoratePathWithSubtype(metadata) {\n  var _a;\n  if (!metadata.path) {\n    return \"\";\n  }\n  const pathComponents = metadata.path.split(\"}/{\");\n  if (pathComponents.length == 1) {\n    return metadata.path;\n  }\n  const stepSubtype = metadata.metadata && metadata.metadata[\"subtype\"] ? `,s:${metadata.metadata[\"subtype\"]}` : \"\";\n  const root = `${pathComponents.slice(0, -1).join(\"}/{\")}}/`;\n  const decoratedStep = `{${(_a = pathComponents.at(-1)) == null ? void 0 : _a.slice(0, -1)}${stepSubtype}}`;\n  return root + decoratedStep;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/tracing/processor.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/processor.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar processor_exports = {};\n__export(processor_exports, {\n  GenkitSpanProcessorWrapper: () => GenkitSpanProcessorWrapper\n});\nmodule.exports = __toCommonJS(processor_exports);\nvar import_instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\");\nclass GenkitSpanProcessorWrapper {\n  constructor(processor) {\n    this.processor = processor;\n  }\n  forceFlush() {\n    return this.processor.forceFlush();\n  }\n  onStart(span, parentContext) {\n    return this.processor.onStart(span, parentContext);\n  }\n  onEnd(span) {\n    if (Object.keys(span.attributes).find((k) => k.startsWith(import_instrumentation.ATTR_PREFIX + \":\"))) {\n      return this.processor.onEnd(new FilteringReadableSpanProxy(span));\n    } else {\n      return this.processor.onEnd(span);\n    }\n  }\n  shutdown() {\n    return __async(this, null, function* () {\n      return this.processor.shutdown();\n    });\n  }\n}\nclass FilteringReadableSpanProxy {\n  constructor(span) {\n    this.span = span;\n  }\n  get name() {\n    return this.span.name;\n  }\n  get kind() {\n    return this.span.kind;\n  }\n  get parentSpanId() {\n    return this.span.parentSpanId;\n  }\n  get startTime() {\n    return this.span.startTime;\n  }\n  get endTime() {\n    return this.span.endTime;\n  }\n  get status() {\n    return this.span.status;\n  }\n  get attributes() {\n    console.log(\n      \"FilteringReadableSpanProxy get attributes\",\n      this.span.attributes\n    );\n    const out = {};\n    for (const [key, value] of Object.entries(this.span.attributes)) {\n      if (!key.startsWith(import_instrumentation.ATTR_PREFIX + \":\")) {\n        out[key] = value;\n      }\n    }\n    return out;\n  }\n  get links() {\n    return this.span.links;\n  }\n  get events() {\n    return this.span.events;\n  }\n  get duration() {\n    return this.span.duration;\n  }\n  get ended() {\n    return this.span.ended;\n  }\n  get resource() {\n    return this.span.resource;\n  }\n  get instrumentationLibrary() {\n    return this.span.instrumentationLibrary;\n  }\n  get droppedAttributesCount() {\n    return this.span.droppedAttributesCount;\n  }\n  get droppedEventsCount() {\n    return this.span.droppedEventsCount;\n  }\n  get droppedLinksCount() {\n    return this.span.droppedLinksCount;\n  }\n  spanContext() {\n    return this.span.spanContext();\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=processor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi90cmFjaW5nL3Byb2Nlc3Nvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSw2QkFBNkIsbUJBQU8sQ0FBQyxpR0FBc0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi90cmFjaW5nL3Byb2Nlc3Nvci5qcz9lNzcwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG52YXIgcHJvY2Vzc29yX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHByb2Nlc3Nvcl9leHBvcnRzLCB7XG4gIEdlbmtpdFNwYW5Qcm9jZXNzb3JXcmFwcGVyOiAoKSA9PiBHZW5raXRTcGFuUHJvY2Vzc29yV3JhcHBlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhwcm9jZXNzb3JfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2luc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoXCIuL2luc3RydW1lbnRhdGlvbi5qc1wiKTtcbmNsYXNzIEdlbmtpdFNwYW5Qcm9jZXNzb3JXcmFwcGVyIHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yKSB7XG4gICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gIH1cbiAgZm9yY2VGbHVzaCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3IuZm9yY2VGbHVzaCgpO1xuICB9XG4gIG9uU3RhcnQoc3BhbiwgcGFyZW50Q29udGV4dCkge1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3Nvci5vblN0YXJ0KHNwYW4sIHBhcmVudENvbnRleHQpO1xuICB9XG4gIG9uRW5kKHNwYW4pIHtcbiAgICBpZiAoT2JqZWN0LmtleXMoc3Bhbi5hdHRyaWJ1dGVzKS5maW5kKChrKSA9PiBrLnN0YXJ0c1dpdGgoaW1wb3J0X2luc3RydW1lbnRhdGlvbi5BVFRSX1BSRUZJWCArIFwiOlwiKSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb2Nlc3Nvci5vbkVuZChuZXcgRmlsdGVyaW5nUmVhZGFibGVTcGFuUHJveHkoc3BhbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3Iub25FbmQoc3Bhbik7XG4gICAgfVxuICB9XG4gIHNodXRkb3duKCkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3Iuc2h1dGRvd24oKTtcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRmlsdGVyaW5nUmVhZGFibGVTcGFuUHJveHkge1xuICBjb25zdHJ1Y3RvcihzcGFuKSB7XG4gICAgdGhpcy5zcGFuID0gc3BhbjtcbiAgfVxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLm5hbWU7XG4gIH1cbiAgZ2V0IGtpbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5raW5kO1xuICB9XG4gIGdldCBwYXJlbnRTcGFuSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5wYXJlbnRTcGFuSWQ7XG4gIH1cbiAgZ2V0IHN0YXJ0VGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLnN0YXJ0VGltZTtcbiAgfVxuICBnZXQgZW5kVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmVuZFRpbWU7XG4gIH1cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLnN0YXR1cztcbiAgfVxuICBnZXQgYXR0cmlidXRlcygpIHtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIFwiRmlsdGVyaW5nUmVhZGFibGVTcGFuUHJveHkgZ2V0IGF0dHJpYnV0ZXNcIixcbiAgICAgIHRoaXMuc3Bhbi5hdHRyaWJ1dGVzXG4gICAgKTtcbiAgICBjb25zdCBvdXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnNwYW4uYXR0cmlidXRlcykpIHtcbiAgICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoaW1wb3J0X2luc3RydW1lbnRhdGlvbi5BVFRSX1BSRUZJWCArIFwiOlwiKSkge1xuICAgICAgICBvdXRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIGdldCBsaW5rcygpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmxpbmtzO1xuICB9XG4gIGdldCBldmVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5ldmVudHM7XG4gIH1cbiAgZ2V0IGR1cmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZHVyYXRpb247XG4gIH1cbiAgZ2V0IGVuZGVkKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZW5kZWQ7XG4gIH1cbiAgZ2V0IHJlc291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4ucmVzb3VyY2U7XG4gIH1cbiAgZ2V0IGluc3RydW1lbnRhdGlvbkxpYnJhcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5pbnN0cnVtZW50YXRpb25MaWJyYXJ5O1xuICB9XG4gIGdldCBkcm9wcGVkQXR0cmlidXRlc0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZHJvcHBlZEF0dHJpYnV0ZXNDb3VudDtcbiAgfVxuICBnZXQgZHJvcHBlZEV2ZW50c0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZHJvcHBlZEV2ZW50c0NvdW50O1xuICB9XG4gIGdldCBkcm9wcGVkTGlua3NDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmRyb3BwZWRMaW5rc0NvdW50O1xuICB9XG4gIHNwYW5Db250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uc3BhbkNvbnRleHQoKTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdlbmtpdFNwYW5Qcm9jZXNzb3JXcmFwcGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3Nvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/tracing/processor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/tracing/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/types.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  InstrumentationLibrarySchema: () => InstrumentationLibrarySchema,\n  LinkSchema: () => LinkSchema,\n  PathMetadataSchema: () => PathMetadataSchema,\n  SpanContextSchema: () => SpanContextSchema,\n  SpanDataSchema: () => SpanDataSchema,\n  SpanMetadataSchema: () => SpanMetadataSchema,\n  SpanStatusSchema: () => SpanStatusSchema,\n  TimeEventSchema: () => TimeEventSchema,\n  TraceDataSchema: () => TraceDataSchema,\n  TraceMetadataSchema: () => TraceMetadataSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_zod = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst PathMetadataSchema = import_zod.z.object({\n  path: import_zod.z.string(),\n  status: import_zod.z.string(),\n  error: import_zod.z.string().optional(),\n  latency: import_zod.z.number()\n});\nconst TraceMetadataSchema = import_zod.z.object({\n  featureName: import_zod.z.string().optional(),\n  paths: import_zod.z.set(PathMetadataSchema).optional(),\n  timestamp: import_zod.z.number()\n});\nconst SpanMetadataSchema = import_zod.z.object({\n  name: import_zod.z.string(),\n  state: import_zod.z.enum([\"success\", \"error\"]).optional(),\n  input: import_zod.z.any().optional(),\n  output: import_zod.z.any().optional(),\n  isRoot: import_zod.z.boolean().optional(),\n  metadata: import_zod.z.record(import_zod.z.string(), import_zod.z.string()).optional(),\n  path: import_zod.z.string().optional()\n});\nconst SpanStatusSchema = import_zod.z.object({\n  code: import_zod.z.number(),\n  message: import_zod.z.string().optional()\n});\nconst TimeEventSchema = import_zod.z.object({\n  time: import_zod.z.number(),\n  annotation: import_zod.z.object({\n    attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n    description: import_zod.z.string()\n  })\n});\nconst SpanContextSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  spanId: import_zod.z.string(),\n  isRemote: import_zod.z.boolean().optional(),\n  traceFlags: import_zod.z.number()\n});\nconst LinkSchema = import_zod.z.object({\n  context: SpanContextSchema.optional(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()).optional(),\n  droppedAttributesCount: import_zod.z.number().optional()\n});\nconst InstrumentationLibrarySchema = import_zod.z.object({\n  name: import_zod.z.string().readonly(),\n  version: import_zod.z.string().optional().readonly(),\n  schemaUrl: import_zod.z.string().optional().readonly()\n});\nconst SpanDataSchema = import_zod.z.object({\n  spanId: import_zod.z.string(),\n  traceId: import_zod.z.string(),\n  parentSpanId: import_zod.z.string().optional(),\n  startTime: import_zod.z.number(),\n  endTime: import_zod.z.number(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n  displayName: import_zod.z.string(),\n  links: import_zod.z.array(LinkSchema).optional(),\n  instrumentationLibrary: InstrumentationLibrarySchema,\n  spanKind: import_zod.z.string(),\n  sameProcessAsParentSpan: import_zod.z.object({ value: import_zod.z.boolean() }).optional(),\n  status: SpanStatusSchema.optional(),\n  timeEvents: import_zod.z.object({\n    timeEvent: import_zod.z.array(TimeEventSchema)\n  }).optional(),\n  truncated: import_zod.z.boolean().optional()\n});\nconst TraceDataSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  displayName: import_zod.z.string().optional(),\n  startTime: import_zod.z.number().optional().describe(\"trace start time in milliseconds since the epoch\"),\n  endTime: import_zod.z.number().optional().describe(\"end time in milliseconds since the epoch\"),\n  spans: import_zod.z.record(import_zod.z.string(), SpanDataSchema)\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi90cmFjaW5nL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsa0RBQUs7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsK0JBQStCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxNQUFNLENBV0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdHJhY2luZy90eXBlcy5qcz8wMzI2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0eXBlc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh0eXBlc19leHBvcnRzLCB7XG4gIEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWE6ICgpID0+IEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEsXG4gIExpbmtTY2hlbWE6ICgpID0+IExpbmtTY2hlbWEsXG4gIFBhdGhNZXRhZGF0YVNjaGVtYTogKCkgPT4gUGF0aE1ldGFkYXRhU2NoZW1hLFxuICBTcGFuQ29udGV4dFNjaGVtYTogKCkgPT4gU3BhbkNvbnRleHRTY2hlbWEsXG4gIFNwYW5EYXRhU2NoZW1hOiAoKSA9PiBTcGFuRGF0YVNjaGVtYSxcbiAgU3Bhbk1ldGFkYXRhU2NoZW1hOiAoKSA9PiBTcGFuTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5TdGF0dXNTY2hlbWE6ICgpID0+IFNwYW5TdGF0dXNTY2hlbWEsXG4gIFRpbWVFdmVudFNjaGVtYTogKCkgPT4gVGltZUV2ZW50U2NoZW1hLFxuICBUcmFjZURhdGFTY2hlbWE6ICgpID0+IFRyYWNlRGF0YVNjaGVtYSxcbiAgVHJhY2VNZXRhZGF0YVNjaGVtYTogKCkgPT4gVHJhY2VNZXRhZGF0YVNjaGVtYVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0eXBlc19leHBvcnRzKTtcbnZhciBpbXBvcnRfem9kID0gcmVxdWlyZShcInpvZFwiKTtcbmNvbnN0IFBhdGhNZXRhZGF0YVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBwYXRoOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHN0YXR1czogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBlcnJvcjogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGxhdGVuY3k6IGltcG9ydF96b2Quei5udW1iZXIoKVxufSk7XG5jb25zdCBUcmFjZU1ldGFkYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGZlYXR1cmVOYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcGF0aHM6IGltcG9ydF96b2Quei5zZXQoUGF0aE1ldGFkYXRhU2NoZW1hKS5vcHRpb25hbCgpLFxuICB0aW1lc3RhbXA6IGltcG9ydF96b2Quei5udW1iZXIoKVxufSk7XG5jb25zdCBTcGFuTWV0YWRhdGFTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgbmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzdGF0ZTogaW1wb3J0X3pvZC56LmVudW0oW1wic3VjY2Vzc1wiLCBcImVycm9yXCJdKS5vcHRpb25hbCgpLFxuICBpbnB1dDogaW1wb3J0X3pvZC56LmFueSgpLm9wdGlvbmFsKCksXG4gIG91dHB1dDogaW1wb3J0X3pvZC56LmFueSgpLm9wdGlvbmFsKCksXG4gIGlzUm9vdDogaW1wb3J0X3pvZC56LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICBtZXRhZGF0YTogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgcGF0aDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgU3BhblN0YXR1c1NjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBjb2RlOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIG1lc3NhZ2U6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRpbWVFdmVudFNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICB0aW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIGFubm90YXRpb246IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICAgIGF0dHJpYnV0ZXM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouYW55KCkpLFxuICAgIGRlc2NyaXB0aW9uOiBpbXBvcnRfem9kLnouc3RyaW5nKClcbiAgfSlcbn0pO1xuY29uc3QgU3BhbkNvbnRleHRTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgdHJhY2VJZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzcGFuSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgaXNSZW1vdGU6IGltcG9ydF96b2Quei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgdHJhY2VGbGFnczogaW1wb3J0X3pvZC56Lm51bWJlcigpXG59KTtcbmNvbnN0IExpbmtTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgY29udGV4dDogU3BhbkNvbnRleHRTY2hlbWEub3B0aW9uYWwoKSxcbiAgYXR0cmlidXRlczogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5hbnkoKSkub3B0aW9uYWwoKSxcbiAgZHJvcHBlZEF0dHJpYnV0ZXNDb3VudDogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgSW5zdHJ1bWVudGF0aW9uTGlicmFyeVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBuYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkucmVhZG9ubHkoKSxcbiAgdmVyc2lvbjogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCkucmVhZG9ubHkoKSxcbiAgc2NoZW1hVXJsOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKS5yZWFkb25seSgpXG59KTtcbmNvbnN0IFNwYW5EYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHNwYW5JZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICB0cmFjZUlkOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHBhcmVudFNwYW5JZDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHN0YXJ0VGltZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLFxuICBlbmRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIGF0dHJpYnV0ZXM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouYW55KCkpLFxuICBkaXNwbGF5TmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBsaW5rczogaW1wb3J0X3pvZC56LmFycmF5KExpbmtTY2hlbWEpLm9wdGlvbmFsKCksXG4gIGluc3RydW1lbnRhdGlvbkxpYnJhcnk6IEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEsXG4gIHNwYW5LaW5kOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHNhbWVQcm9jZXNzQXNQYXJlbnRTcGFuOiBpbXBvcnRfem9kLnoub2JqZWN0KHsgdmFsdWU6IGltcG9ydF96b2Quei5ib29sZWFuKCkgfSkub3B0aW9uYWwoKSxcbiAgc3RhdHVzOiBTcGFuU3RhdHVzU2NoZW1hLm9wdGlvbmFsKCksXG4gIHRpbWVFdmVudHM6IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICAgIHRpbWVFdmVudDogaW1wb3J0X3pvZC56LmFycmF5KFRpbWVFdmVudFNjaGVtYSlcbiAgfSkub3B0aW9uYWwoKSxcbiAgdHJ1bmNhdGVkOiBpbXBvcnRfem9kLnouYm9vbGVhbigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgVHJhY2VEYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHRyYWNlSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgZGlzcGxheU5hbWU6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBzdGFydFRpbWU6IGltcG9ydF96b2Quei5udW1iZXIoKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwidHJhY2Ugc3RhcnQgdGltZSBpbiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGVwb2NoXCIpLFxuICBlbmRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCkub3B0aW9uYWwoKS5kZXNjcmliZShcImVuZCB0aW1lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2hcIiksXG4gIHNwYW5zOiBpbXBvcnRfem9kLnoucmVjb3JkKGltcG9ydF96b2Quei5zdHJpbmcoKSwgU3BhbkRhdGFTY2hlbWEpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBJbnN0cnVtZW50YXRpb25MaWJyYXJ5U2NoZW1hLFxuICBMaW5rU2NoZW1hLFxuICBQYXRoTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5Db250ZXh0U2NoZW1hLFxuICBTcGFuRGF0YVNjaGVtYSxcbiAgU3Bhbk1ldGFkYXRhU2NoZW1hLFxuICBTcGFuU3RhdHVzU2NoZW1hLFxuICBUaW1lRXZlbnRTY2hlbWEsXG4gIFRyYWNlRGF0YVNjaGVtYSxcbiAgVHJhY2VNZXRhZGF0YVNjaGVtYVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/tracing/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/utils.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  deleteUndefinedProps: () => deleteUndefinedProps,\n  featureMetadataPrefix: () => featureMetadataPrefix,\n  flowMetadataPrefix: () => flowMetadataPrefix,\n  getCurrentEnv: () => getCurrentEnv,\n  isDevEnv: () => isDevEnv\n});\nmodule.exports = __toCommonJS(utils_exports);\nfunction deleteUndefinedProps(obj) {\n  for (const prop in obj) {\n    if (obj[prop] === void 0) {\n      delete obj[prop];\n    } else {\n      if (typeof obj[prop] === \"object\") {\n        deleteUndefinedProps(obj[prop]);\n      }\n    }\n  }\n}\nfunction getCurrentEnv() {\n  return process.env.GENKIT_ENV || \"prod\";\n}\nfunction isDevEnv() {\n  return getCurrentEnv() === \"dev\";\n}\nfunction flowMetadataPrefix(name) {\n  return `flow:${name}`;\n}\nfunction featureMetadataPrefix(name) {\n  return `feature:${name}`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsS0FBSztBQUN0QjtBQUNBO0FBQ0Esb0JBQW9CLEtBQUs7QUFDekI7QUFDQTtBQUNBLE1BQU0sQ0FNTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi91dGlscy5qcz8zNzA2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB1dGlsc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh1dGlsc19leHBvcnRzLCB7XG4gIGRlbGV0ZVVuZGVmaW5lZFByb3BzOiAoKSA9PiBkZWxldGVVbmRlZmluZWRQcm9wcyxcbiAgZmVhdHVyZU1ldGFkYXRhUHJlZml4OiAoKSA9PiBmZWF0dXJlTWV0YWRhdGFQcmVmaXgsXG4gIGZsb3dNZXRhZGF0YVByZWZpeDogKCkgPT4gZmxvd01ldGFkYXRhUHJlZml4LFxuICBnZXRDdXJyZW50RW52OiAoKSA9PiBnZXRDdXJyZW50RW52LFxuICBpc0RldkVudjogKCkgPT4gaXNEZXZFbnZcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModXRpbHNfZXhwb3J0cyk7XG5mdW5jdGlvbiBkZWxldGVVbmRlZmluZWRQcm9wcyhvYmopIHtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iaikge1xuICAgIGlmIChvYmpbcHJvcF0gPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlIG9ialtwcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBvYmpbcHJvcF0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZGVsZXRlVW5kZWZpbmVkUHJvcHMob2JqW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRFbnYoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5HRU5LSVRfRU5WIHx8IFwicHJvZFwiO1xufVxuZnVuY3Rpb24gaXNEZXZFbnYoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50RW52KCkgPT09IFwiZGV2XCI7XG59XG5mdW5jdGlvbiBmbG93TWV0YWRhdGFQcmVmaXgobmFtZSkge1xuICByZXR1cm4gYGZsb3c6JHtuYW1lfWA7XG59XG5mdW5jdGlvbiBmZWF0dXJlTWV0YWRhdGFQcmVmaXgobmFtZSkge1xuICByZXR1cm4gYGZlYXR1cmU6JHtuYW1lfWA7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVsZXRlVW5kZWZpbmVkUHJvcHMsXG4gIGZlYXR1cmVNZXRhZGF0YVByZWZpeCxcbiAgZmxvd01ldGFkYXRhUHJlZml4LFxuICBnZXRDdXJyZW50RW52LFxuICBpc0RldkVudlxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/lib/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar src_exports = {};\n__export(src_exports, {\n  Dotprompt: () => import_prompt.Dotprompt,\n  defineDotprompt: () => import_prompt.defineDotprompt,\n  defineHelper: () => import_template.defineHelper,\n  definePartial: () => import_template.definePartial,\n  loadPromptFile: () => loadPromptFile,\n  loadPromptFolder: () => import_registry2.loadPromptFolder,\n  loadPromptUrl: () => loadPromptUrl,\n  prompt: () => prompt,\n  promptRef: () => promptRef\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_fs = __webpack_require__(/*! fs */ \"fs\");\nvar import_path = __webpack_require__(/*! path */ \"path\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/prompt.js\");\nvar import_registry2 = __webpack_require__(/*! ./registry.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/registry.js\");\nvar import_template = __webpack_require__(/*! ./template.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/template.js\");\nfunction prompt(registry, name, options) {\n  return __async(this, null, function* () {\n    return yield (0, import_registry2.lookupPrompt)(\n      registry,\n      name,\n      options == null ? void 0 : options.variant\n    );\n  });\n}\nfunction promptRef(name, options) {\n  return new import_prompt.DotpromptRef(name, options);\n}\nfunction loadPromptFile(registry, path) {\n  return import_prompt.Dotprompt.parse(\n    registry,\n    (0, import_path.basename)(path).split(\".\")[0],\n    (0, import_fs.readFileSync)(path, \"utf-8\")\n  );\n}\nfunction loadPromptUrl(registry, name, url) {\n  return __async(this, null, function* () {\n    const fetch = (yield Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@genkit-ai\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/index.js\"))).default;\n    const response = yield fetch(url);\n    const text = yield response.text();\n    return import_prompt.Dotprompt.parse(registry, name, text);\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsY0FBSTtBQUM1QixrQkFBa0IsbUJBQU8sQ0FBQyxrQkFBTTtBQUNoQyxvQkFBb0IsbUJBQU8sQ0FBQyw0RUFBYTtBQUN6Qyx1QkFBdUIsbUJBQU8sQ0FBQyxnRkFBZTtBQUM5QyxzQkFBc0IsbUJBQU8sQ0FBQyxnRkFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixzZ0JBQW9CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsTUFBTSxDQVVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2RvdHByb21wdC9saWIvaW5kZXguanM/OGFlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBEb3Rwcm9tcHQ6ICgpID0+IGltcG9ydF9wcm9tcHQuRG90cHJvbXB0LFxuICBkZWZpbmVEb3Rwcm9tcHQ6ICgpID0+IGltcG9ydF9wcm9tcHQuZGVmaW5lRG90cHJvbXB0LFxuICBkZWZpbmVIZWxwZXI6ICgpID0+IGltcG9ydF90ZW1wbGF0ZS5kZWZpbmVIZWxwZXIsXG4gIGRlZmluZVBhcnRpYWw6ICgpID0+IGltcG9ydF90ZW1wbGF0ZS5kZWZpbmVQYXJ0aWFsLFxuICBsb2FkUHJvbXB0RmlsZTogKCkgPT4gbG9hZFByb21wdEZpbGUsXG4gIGxvYWRQcm9tcHRGb2xkZXI6ICgpID0+IGltcG9ydF9yZWdpc3RyeTIubG9hZFByb21wdEZvbGRlcixcbiAgbG9hZFByb21wdFVybDogKCkgPT4gbG9hZFByb21wdFVybCxcbiAgcHJvbXB0OiAoKSA9PiBwcm9tcHQsXG4gIHByb21wdFJlZjogKCkgPT4gcHJvbXB0UmVmXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpbXBvcnRfZnMgPSByZXF1aXJlKFwiZnNcIik7XG52YXIgaW1wb3J0X3BhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbnZhciBpbXBvcnRfcHJvbXB0ID0gcmVxdWlyZShcIi4vcHJvbXB0LmpzXCIpO1xudmFyIGltcG9ydF9yZWdpc3RyeTIgPSByZXF1aXJlKFwiLi9yZWdpc3RyeS5qc1wiKTtcbnZhciBpbXBvcnRfdGVtcGxhdGUgPSByZXF1aXJlKFwiLi90ZW1wbGF0ZS5qc1wiKTtcbmZ1bmN0aW9uIHByb21wdChyZWdpc3RyeSwgbmFtZSwgb3B0aW9ucykge1xuICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIHJldHVybiB5aWVsZCAoMCwgaW1wb3J0X3JlZ2lzdHJ5Mi5sb29rdXBQcm9tcHQpKFxuICAgICAgcmVnaXN0cnksXG4gICAgICBuYW1lLFxuICAgICAgb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy52YXJpYW50XG4gICAgKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcm9tcHRSZWYobmFtZSwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IGltcG9ydF9wcm9tcHQuRG90cHJvbXB0UmVmKG5hbWUsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gbG9hZFByb21wdEZpbGUocmVnaXN0cnksIHBhdGgpIHtcbiAgcmV0dXJuIGltcG9ydF9wcm9tcHQuRG90cHJvbXB0LnBhcnNlKFxuICAgIHJlZ2lzdHJ5LFxuICAgICgwLCBpbXBvcnRfcGF0aC5iYXNlbmFtZSkocGF0aCkuc3BsaXQoXCIuXCIpWzBdLFxuICAgICgwLCBpbXBvcnRfZnMucmVhZEZpbGVTeW5jKShwYXRoLCBcInV0Zi04XCIpXG4gICk7XG59XG5mdW5jdGlvbiBsb2FkUHJvbXB0VXJsKHJlZ2lzdHJ5LCBuYW1lLCB1cmwpIHtcbiAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCBmZXRjaCA9ICh5aWVsZCBpbXBvcnQoXCJub2RlLWZldGNoXCIpKS5kZWZhdWx0O1xuICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2godXJsKTtcbiAgICBjb25zdCB0ZXh0ID0geWllbGQgcmVzcG9uc2UudGV4dCgpO1xuICAgIHJldHVybiBpbXBvcnRfcHJvbXB0LkRvdHByb21wdC5wYXJzZShyZWdpc3RyeSwgbmFtZSwgdGV4dCk7XG4gIH0pO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIERvdHByb21wdCxcbiAgZGVmaW5lRG90cHJvbXB0LFxuICBkZWZpbmVIZWxwZXIsXG4gIGRlZmluZVBhcnRpYWwsXG4gIGxvYWRQcm9tcHRGaWxlLFxuICBsb2FkUHJvbXB0Rm9sZGVyLFxuICBsb2FkUHJvbXB0VXJsLFxuICBwcm9tcHQsXG4gIHByb21wdFJlZlxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/lib/metadata.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/lib/metadata.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar metadata_exports = {};\n__export(metadata_exports, {\n  PromptFrontmatterSchema: () => PromptFrontmatterSchema,\n  toFrontmatter: () => toFrontmatter,\n  toMetadata: () => toMetadata\n});\nmodule.exports = __toCommonJS(metadata_exports);\nvar import_model = __webpack_require__(/*! @genkit-ai/ai/model */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_picoschema = __webpack_require__(/*! ./picoschema.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/picoschema.js\");\nconst PromptFrontmatterSchema = import_core.z.object({\n  name: import_core.z.string().optional(),\n  variant: import_core.z.string().optional(),\n  model: import_core.z.string().optional(),\n  tools: import_core.z.array(import_core.z.string()).optional(),\n  config: import_model.GenerationCommonConfigSchema.passthrough().optional(),\n  input: import_core.z.object({\n    default: import_core.z.any(),\n    schema: import_core.z.unknown()\n  }).optional(),\n  output: import_core.z.object({\n    format: import_core.z.enum([\"json\", \"text\", \"media\"]).optional(),\n    schema: import_core.z.unknown().optional()\n  }).optional(),\n  metadata: import_core.z.record(import_core.z.unknown()).optional()\n});\nfunction stripUndefinedOrNull(obj) {\n  if (typeof obj !== \"object\" || obj === null) {\n    return obj;\n  }\n  for (const key in obj) {\n    if (obj[key] === void 0 || obj[key] === null) {\n      delete obj[key];\n    } else if (typeof obj[key] === \"object\") {\n      stripUndefinedOrNull(obj[key]);\n    }\n  }\n  return obj;\n}\nfunction fmSchemaToSchema(registry, fmSchema) {\n  if (!fmSchema)\n    return {};\n  if (typeof fmSchema === \"string\")\n    return registry.lookupSchema(fmSchema);\n  return { jsonSchema: (0, import_picoschema.picoschema)(fmSchema) };\n}\nfunction toMetadata(registry, attributes) {\n  const fm = (0, import_schema.parseSchema)(attributes, {\n    schema: PromptFrontmatterSchema\n  });\n  let input;\n  if (fm.input) {\n    input = __spreadValues({\n      default: fm.input.default\n    }, fmSchemaToSchema(registry, fm.input.schema));\n  }\n  let output;\n  if (fm.output) {\n    output = __spreadValues({\n      format: fm.output.format\n    }, fmSchemaToSchema(registry, fm.output.schema));\n  }\n  return stripUndefinedOrNull({\n    name: fm.name,\n    variant: fm.variant,\n    model: fm.model,\n    config: fm.config,\n    input,\n    output,\n    metadata: fm.metadata,\n    tools: fm.tools\n  });\n}\nfunction toFrontmatter(md) {\n  var _a, _b;\n  return stripUndefinedOrNull({\n    name: md.name,\n    variant: md.variant,\n    model: typeof md.model === \"string\" ? md.model : (_a = md.model) == null ? void 0 : _a.name,\n    config: md.config,\n    input: md.input ? {\n      default: md.input.default,\n      schema: (0, import_schema.toJsonSchema)({\n        schema: md.input.schema,\n        jsonSchema: md.input.jsonSchema\n      })\n    } : void 0,\n    output: md.output ? {\n      format: md.output.format,\n      schema: (0, import_schema.toJsonSchema)({\n        schema: md.output.schema,\n        jsonSchema: md.output.jsonSchema\n      })\n    } : void 0,\n    metadata: md.metadata,\n    tools: (_b = md.tools) == null ? void 0 : _b.map(\n      (t) => {\n        var _a2;\n        return typeof t === \"string\" ? t : ((_a2 = t.__action) == null ? void 0 : _a2.name) || t.name;\n      }\n    )\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/lib/metadata.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/lib/picoschema.js":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/lib/picoschema.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar picoschema_exports = {};\n__export(picoschema_exports, {\n  picoschema: () => picoschema\n});\nmodule.exports = __toCommonJS(picoschema_exports);\nconst JSON_SCHEMA_SCALAR_TYPES = [\n  \"string\",\n  \"boolean\",\n  \"null\",\n  \"number\",\n  \"integer\",\n  \"any\"\n];\nconst WILDCARD_PROPERTY_NAME = \"(*)\";\nfunction picoschema(schema) {\n  if (!schema)\n    return null;\n  if ([...JSON_SCHEMA_SCALAR_TYPES, \"object\", \"array\"].includes(\n    schema == null ? void 0 : schema.type\n  )) {\n    return schema;\n  }\n  if (typeof (schema == null ? void 0 : schema.properties) === \"object\") {\n    return __spreadProps(__spreadValues({}, schema), { type: \"object\" });\n  }\n  return parsePico(schema);\n}\nfunction extractDescription(input) {\n  if (!input.includes(\",\"))\n    return [input, null];\n  const match = input.match(/(.*?), *(.*)$/);\n  return [match[1], match[2]];\n}\nfunction parsePico(obj, path = []) {\n  if (typeof obj === \"string\") {\n    const [type, description] = extractDescription(obj);\n    if (!JSON_SCHEMA_SCALAR_TYPES.includes(type)) {\n      throw new Error(`Picoschema: Unsupported scalar type '${type}'.`);\n    }\n    if (type === \"any\") {\n      return description ? { description } : {};\n    }\n    return description ? { type, description } : { type };\n  } else if (typeof obj !== \"object\") {\n    throw new Error(\n      \"Picoschema: only consists of objects and strings. Got: \" + JSON.stringify(obj)\n    );\n  }\n  const schema = {\n    type: \"object\",\n    properties: {},\n    required: [],\n    additionalProperties: false\n  };\n  for (const key in obj) {\n    if (key === WILDCARD_PROPERTY_NAME) {\n      schema.additionalProperties = parsePico(obj[key], [...path, key]);\n      continue;\n    }\n    const [name, typeInfo] = key.split(\"(\");\n    const isOptional = name.endsWith(\"?\");\n    const propertyName = isOptional ? name.slice(0, -1) : name;\n    if (!isOptional) {\n      schema.required.push(propertyName);\n    }\n    if (!typeInfo) {\n      const prop = parsePico(obj[key], [...path, key]);\n      if (isOptional && typeof prop.type === \"string\") {\n        prop.type = [prop.type, \"null\"];\n      }\n      schema.properties[propertyName] = prop;\n      continue;\n    }\n    const [type, description] = extractDescription(\n      typeInfo.substring(0, typeInfo.length - 1)\n    );\n    if (type === \"array\") {\n      schema.properties[propertyName] = {\n        type: isOptional ? [\"array\", \"null\"] : \"array\",\n        items: parsePico(obj[key], [...path, key])\n      };\n    } else if (type === \"object\") {\n      const prop = parsePico(obj[key], [...path, key]);\n      if (isOptional)\n        prop.type = [prop.type, \"null\"];\n      schema.properties[propertyName] = prop;\n    } else if (type === \"enum\") {\n      const prop = { enum: obj[key] };\n      if (isOptional)\n        prop.enum.push(null);\n      schema.properties[propertyName] = prop;\n    } else {\n      throw new Error(\n        \"Picoschema: parenthetical types must be 'object' or 'array', got: \" + type\n      );\n    }\n    if (description) {\n      schema.properties[propertyName].description = description;\n    }\n  }\n  if (!schema.required.length)\n    delete schema.required;\n  return schema;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=picoschema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/lib/picoschema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/lib/prompt.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/lib/prompt.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar prompt_exports = {};\n__export(prompt_exports, {\n  Dotprompt: () => Dotprompt,\n  DotpromptRef: () => DotpromptRef,\n  GENKIT_SESSION_STATE_INPUT_KEY: () => GENKIT_SESSION_STATE_INPUT_KEY,\n  defineDotprompt: () => defineDotprompt\n});\nmodule.exports = __toCommonJS(prompt_exports);\nvar import_ai = __webpack_require__(/*! @genkit-ai/ai */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/index.js\");\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar import_front_matter = __toESM(__webpack_require__(/*! front-matter */ \"(rsc)/./node_modules/front-matter/index.js\"));\nvar import_metadata = __webpack_require__(/*! ./metadata.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/metadata.js\");\nvar import_registry2 = __webpack_require__(/*! ./registry.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/registry.js\");\nvar import_template = __webpack_require__(/*! ./template.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/template.js\");\nconst GENKIT_SESSION_STATE_INPUT_KEY = \"__genkit__sessionState\";\nclass Dotprompt {\n  constructor(registry, options, template, action) {\n    this.registry = registry;\n    this.name = options.name || \"untitledPrompt\";\n    this.variant = options.variant;\n    this.model = options.model;\n    this.input = options.input || { schema: import_core.z.any() };\n    this.output = options.output;\n    this.tools = options.tools;\n    this.config = options.config;\n    this.template = template;\n    this.hash = (0, import_crypto.createHash)(\"sha256\").update(JSON.stringify(this)).digest(\"hex\");\n    this._render = (0, import_template.compile)(this.template, options);\n    this._promptAction = action;\n  }\n  static parse(registry, name, source) {\n    try {\n      const fmResult = (0, import_front_matter.default)(source.trimStart(), {\n        allowUnsafe: false\n      });\n      return new Dotprompt(\n        registry,\n        __spreadProps(__spreadValues({}, (0, import_metadata.toMetadata)(registry, fmResult.attributes)), {\n          name\n        }),\n        fmResult.body\n      );\n    } catch (e) {\n      throw new import_core.GenkitError({\n        source: \"Dotprompt\",\n        status: \"INVALID_ARGUMENT\",\n        message: `Error parsing YAML frontmatter of '${name}' prompt: ${e.stack}`\n      });\n    }\n  }\n  static fromAction(registry, action) {\n    var _b, _c, _d, _e;\n    const _a = action.__action.metadata.prompt, { template } = _a, options = __objRest(_a, [\"template\"]);\n    const pm = options;\n    if ((_b = pm.input) == null ? void 0 : _b.schema) {\n      pm.input.jsonSchema = (_c = options.input) == null ? void 0 : _c.schema;\n      delete pm.input.schema;\n    }\n    if ((_d = pm.output) == null ? void 0 : _d.schema) {\n      pm.output.jsonSchema = (_e = options.output) == null ? void 0 : _e.schema;\n    }\n    const prompt = new Dotprompt(\n      registry,\n      options,\n      template,\n      action\n    );\n    return prompt;\n  }\n  /**\n   * Renders all of the prompt's text parts into a raw string.\n   *\n   * @param input User input to the prompt template.\n   * @param options Optional context and/or history for the prompt template.\n   * @returns all of the text parts concatenated into a string.\n   */\n  renderText(input, options) {\n    const result = this.renderMessages(input, options);\n    if (result.length !== 1) {\n      throw new Error(\"Multi-message prompt can't be rendered as text.\");\n    }\n    let out = \"\";\n    for (const part of result[0].content) {\n      if (!part.text) {\n        throw new Error(\"Multimodal prompt can't be rendered as text.\");\n      }\n      out += part.text;\n    }\n    return out;\n  }\n  /**\n   * Renders the prompt template into an array of messages.\n   *\n   * @param input User input to the prompt template\n   * @param options optional context and/or history for the prompt template.\n   * @returns an array of messages representing an exchange between a user and a model.\n   */\n  renderMessages(input, options) {\n    var _a, _b, _c;\n    let sessionStateData = void 0;\n    if (input == null ? void 0 : input.hasOwnProperty(GENKIT_SESSION_STATE_INPUT_KEY)) {\n      sessionStateData = input[GENKIT_SESSION_STATE_INPUT_KEY];\n      input = __spreadValues({}, input);\n      delete input[GENKIT_SESSION_STATE_INPUT_KEY];\n    }\n    input = (0, import_schema.parseSchema)(input, {\n      schema: (_a = this.input) == null ? void 0 : _a.schema,\n      jsonSchema: (_b = this.input) == null ? void 0 : _b.jsonSchema\n    });\n    return this._render(\n      __spreadValues(__spreadValues({}, (_c = this.input) == null ? void 0 : _c.default), input),\n      options,\n      sessionStateData\n    );\n  }\n  toJSON() {\n    return __spreadProps(__spreadValues({}, (0, import_metadata.toFrontmatter)(this)), { template: this.template });\n  }\n  define(options) {\n    var _a, _b, _c;\n    this._promptAction = (0, import_ai.definePrompt)(\n      this.registry,\n      {\n        name: (0, import_registry2.registryDefinitionKey)(this.name, this.variant, options == null ? void 0 : options.ns),\n        description: (_a = options == null ? void 0 : options.description) != null ? _a : \"Defined by Dotprompt\",\n        inputSchema: (_b = this.input) == null ? void 0 : _b.schema,\n        inputJsonSchema: (_c = this.input) == null ? void 0 : _c.jsonSchema,\n        metadata: {\n          type: \"prompt\",\n          prompt: this.toJSON()\n        }\n      },\n      (input) => __async(this, null, function* () {\n        return (0, import_ai.toGenerateRequest)(this.registry, this.render({ input }));\n      })\n    );\n  }\n  get promptAction() {\n    return this._promptAction;\n  }\n  _generateOptions(options) {\n    var _a, _b, _c, _d, _e, _f;\n    const messages = this.renderMessages(options.input, {\n      messages: options.messages,\n      docs: options.docs\n    });\n    let renderedPrompt;\n    let renderedMessages;\n    if (messages.length > 0 && messages[messages.length - 1].role === \"user\") {\n      renderedPrompt = messages[messages.length - 1].content;\n      renderedMessages = messages.slice(0, messages.length - 1);\n    } else {\n      renderedPrompt = void 0;\n      renderedMessages = messages;\n    }\n    return {\n      model: options.model || this.model,\n      config: __spreadValues(__spreadValues({}, this.config), options.config),\n      messages: renderedMessages,\n      prompt: renderedPrompt,\n      docs: options.docs,\n      output: {\n        format: ((_a = options.output) == null ? void 0 : _a.format) || ((_b = this.output) == null ? void 0 : _b.format) || void 0,\n        schema: ((_c = options.output) == null ? void 0 : _c.schema) || ((_d = this.output) == null ? void 0 : _d.schema),\n        jsonSchema: ((_e = options.output) == null ? void 0 : _e.jsonSchema) || ((_f = this.output) == null ? void 0 : _f.jsonSchema)\n      },\n      tools: (options.tools || []).concat(this.tools || []),\n      streamingCallback: options.streamingCallback,\n      returnToolRequests: options.returnToolRequests,\n      use: options.use\n    };\n  }\n  /**\n   * Renders the prompt template based on user input.\n   *\n   * @param opt Options for the prompt template, including user input variables and custom model configuration options.\n   * @returns a `GenerateOptions` object to be used with the `generate()` function from @genkit-ai/ai.\n   */\n  render(opt) {\n    return this._generateOptions(opt);\n  }\n  renderInNewSpan(opt) {\n    return __async(this, null, function* () {\n      const spanName = this.variant ? `${this.name}.${this.variant}` : this.name;\n      return (0, import_tracing.runInNewSpan)(\n        {\n          metadata: {\n            name: spanName,\n            input: opt\n          },\n          labels: {\n            [import_tracing.SPAN_TYPE_ATTR]: \"dotprompt\"\n          }\n        },\n        (metadata) => __async(this, null, function* () {\n          (0, import_tracing.setCustomMetadataAttribute)(\"prompt_fingerprint\", this.hash);\n          const generateOptions = this._generateOptions(opt);\n          metadata.output = generateOptions;\n          return generateOptions;\n        })\n      );\n    });\n  }\n  /**\n   * Generates a response by rendering the prompt template with given user input and then calling the model.\n   *\n   * @param opt Options for the prompt template, including user input variables and custom model configuration options.\n   * @returns the model response as a promise of `GenerateResponse`.\n   */\n  generate(opt) {\n    return __async(this, null, function* () {\n      const renderedOpts = this.renderInNewSpan(opt);\n      return (0, import_ai.generate)(this.registry, renderedOpts);\n    });\n  }\n  /**\n   * Generates a streaming response by rendering the prompt template with given user input and then calling the model.\n   *\n   * @param opt Options for the prompt template, including user input variables and custom model configuration options.\n   * @returns the model response as a promise of `GenerateStreamResponse`.\n   */\n  generateStream(opt) {\n    return __async(this, null, function* () {\n      const renderedOpts = yield this.renderInNewSpan(opt);\n      return (0, import_ai.generateStream)(this.registry, renderedOpts);\n    });\n  }\n}\nclass DotpromptRef {\n  constructor(name, options) {\n    this.name = name;\n    this.variant = options == null ? void 0 : options.variant;\n    this.dir = options == null ? void 0 : options.dir;\n  }\n  /** Loads the prompt which is referenced. */\n  loadPrompt(registry) {\n    return __async(this, null, function* () {\n      if (this._prompt)\n        return this._prompt;\n      this._prompt = yield (0, import_registry2.lookupPrompt)(\n        registry,\n        this.name,\n        this.variant,\n        this.dir\n      );\n      return this._prompt;\n    });\n  }\n  /**\n   * Generates a response by rendering the prompt template with given user input and then calling the model.\n   *\n   * @param opt Options for the prompt template, including user input variables and custom model configuration options.\n   * @returns the model response as a promise of `GenerateResponse`.\n   */\n  generate(registry, opt) {\n    return __async(this, null, function* () {\n      const prompt = yield this.loadPrompt(registry);\n      return prompt.generate(opt);\n    });\n  }\n  /**\n   * Renders the prompt template based on user input.\n   *\n   * @param opt Options for the prompt template, including user input variables and custom model configuration options.\n   * @returns a `GenerateOptions` object to be used with the `generate()` function from @genkit-ai/ai.\n   */\n  render(registry, opt) {\n    return __async(this, null, function* () {\n      const prompt = yield this.loadPrompt(registry);\n      return prompt.render(opt);\n    });\n  }\n}\nfunction defineDotprompt(registry, options, template) {\n  const prompt = new Dotprompt(registry, options, template);\n  prompt.define({ description: options.description });\n  return prompt;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=prompt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/lib/prompt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/lib/registry.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/lib/registry.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve2, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve2(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar registry_exports = {};\n__export(registry_exports, {\n  loadPrompt: () => loadPrompt,\n  loadPromptFolder: () => loadPromptFolder,\n  lookupPrompt: () => lookupPrompt,\n  registryDefinitionKey: () => registryDefinitionKey,\n  registryLookupKey: () => registryLookupKey\n});\nmodule.exports = __toCommonJS(registry_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(rsc)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_fs = __webpack_require__(/*! fs */ \"fs\");\nvar import_path = __webpack_require__(/*! path */ \"path\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/prompt.js\");\nvar import_template = __webpack_require__(/*! ./template.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/template.js\");\nfunction registryDefinitionKey(name, variant, ns) {\n  return `${ns ? `${ns}/` : \"\"}${name}${variant ? `.${variant}` : \"\"}`;\n}\nfunction registryLookupKey(name, variant, ns) {\n  return `/prompt/${registryDefinitionKey(name, variant, ns)}`;\n}\nfunction lookupPrompt(registry, name, variant, dir = \"./prompts\") {\n  return __async(this, null, function* () {\n    let registryPrompt = (yield registry.lookupAction(registryLookupKey(name, variant))) || (yield registry.lookupAction(\n      registryLookupKey(name, variant, \"dotprompt\")\n    ));\n    if (registryPrompt) {\n      return import_prompt.Dotprompt.fromAction(registry, registryPrompt);\n    } else {\n      return maybeLoadPrompt(registry, dir, name, variant);\n    }\n  });\n}\nfunction maybeLoadPrompt(registry, dir, name, variant) {\n  return __async(this, null, function* () {\n    const expectedFileName = `${name}${variant ? `.${variant}` : \"\"}.prompt`;\n    const promptFolder = (0, import_path.resolve)(dir);\n    const promptExists = (0, import_fs.existsSync)((0, import_path.join)(promptFolder, expectedFileName));\n    if (promptExists) {\n      return loadPrompt(registry, promptFolder, expectedFileName);\n    } else {\n      throw new import_core.GenkitError({\n        source: \"dotprompt\",\n        status: \"NOT_FOUND\",\n        message: `Could not find '${expectedFileName}' in the prompts folder.`\n      });\n    }\n  });\n}\nfunction loadPromptFolder(registry, dir = \"./prompts\") {\n  return __async(this, null, function* () {\n    const promptsPath = (0, import_path.resolve)(dir);\n    return new Promise((resolve2, reject) => {\n      if ((0, import_fs.existsSync)(promptsPath)) {\n        (0, import_fs.readdir)(\n          promptsPath,\n          {\n            withFileTypes: true,\n            recursive: true\n          },\n          (err, dirEnts) => {\n            if (err) {\n              reject(err);\n            } else {\n              dirEnts.forEach((dirEnt) => __async(this, null, function* () {\n                if (dirEnt.isFile() && dirEnt.name.endsWith(\".prompt\")) {\n                  if (dirEnt.name.startsWith(\"_\")) {\n                    const partialName = dirEnt.name.substring(\n                      1,\n                      dirEnt.name.length - 7\n                    );\n                    (0, import_template.definePartial)(\n                      partialName,\n                      (0, import_fs.readFileSync)((0, import_path.join)(dirEnt.path, dirEnt.name), {\n                        encoding: \"utf8\"\n                      })\n                    );\n                    import_logging.logger.debug(\n                      `Registered Dotprompt partial \"${partialName}\" from \"${(0, import_path.join)(dirEnt.path, dirEnt.name)}\"`\n                    );\n                  } else {\n                    let prefix = \"\";\n                    if (promptsPath !== dirEnt.path) {\n                      prefix = dirEnt.path.replace(`${promptsPath}/`, \"\").replace(/\\//g, \"-\");\n                    }\n                    loadPrompt(registry, dirEnt.path, dirEnt.name, prefix);\n                  }\n                }\n              }));\n              resolve2();\n            }\n          }\n        );\n      } else {\n        resolve2();\n      }\n    });\n  });\n}\nfunction loadPrompt(registry, path, filename, prefix = \"\") {\n  let name = `${prefix ? `${prefix}-` : \"\"}${(0, import_path.basename)(filename, \".prompt\")}`;\n  let variant = null;\n  if (name.includes(\".\")) {\n    const parts = name.split(\".\");\n    name = parts[0];\n    variant = parts[1];\n  }\n  const source = (0, import_fs.readFileSync)((0, import_path.join)(path, filename), \"utf8\");\n  const prompt = import_prompt.Dotprompt.parse(registry, name, source);\n  if (variant) {\n    prompt.variant = variant;\n  }\n  prompt.define({ ns: `dotprompt` });\n  return prompt;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/lib/registry.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/lib/template.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/lib/template.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar template_exports = {};\n__export(template_exports, {\n  compile: () => compile,\n  defineHelper: () => defineHelper,\n  definePartial: () => definePartial\n});\nmodule.exports = __toCommonJS(template_exports);\nvar import_handlebars = __toESM(__webpack_require__(/*! handlebars */ \"(rsc)/./node_modules/handlebars/lib/index.js\"));\nconst Promptbars = global[\"dotprompt.handlebars\"] || import_handlebars.default.create();\nglobal[\"dotprompt.handlebars\"] = Promptbars;\nfunction jsonHelper(serializable, options) {\n  return new Promptbars.SafeString(\n    JSON.stringify(serializable, null, options.hash.indent || 0)\n  );\n}\nPromptbars.registerHelper(\"json\", jsonHelper);\nfunction roleHelper(role) {\n  return new Promptbars.SafeString(`<<<dotprompt:role:${role}>>>`);\n}\nPromptbars.registerHelper(\"role\", roleHelper);\nfunction historyHelper() {\n  return new Promptbars.SafeString(\"<<<dotprompt:history>>>\");\n}\nPromptbars.registerHelper(\"history\", historyHelper);\nfunction sectionHelper(name) {\n  return new Promptbars.SafeString(`<<<dotprompt:section ${name}>>>`);\n}\nPromptbars.registerHelper(\"section\", sectionHelper);\nfunction mediaHelper(options) {\n  return new Promptbars.SafeString(\n    `<<<dotprompt:media:url ${options.hash.url}${options.hash.contentType ? ` ${options.hash.contentType}` : \"\"}>>>`\n  );\n}\nPromptbars.registerHelper(\"media\", mediaHelper);\nconst ROLE_REGEX = /(<<<dotprompt:(?:role:[a-z]+|history))>>>/g;\nfunction toMessages(renderedString, options) {\n  var _a, _b;\n  let currentMessage = {\n    role: \"user\",\n    source: \"\"\n  };\n  const messageSources = [currentMessage];\n  for (const piece of renderedString.split(ROLE_REGEX).filter((s) => s.trim() !== \"\")) {\n    if (piece.startsWith(\"<<<dotprompt:role:\")) {\n      const role = piece.substring(18);\n      if (currentMessage.source.trim()) {\n        currentMessage = { role, source: \"\" };\n        messageSources.push(currentMessage);\n      } else {\n        currentMessage.role = role;\n      }\n    } else if (piece.startsWith(\"<<<dotprompt:history\")) {\n      messageSources.push(\n        ...((_a = options == null ? void 0 : options.messages) == null ? void 0 : _a.map((m) => {\n          return __spreadProps(__spreadValues({}, m), {\n            metadata: __spreadProps(__spreadValues({}, m.metadata || {}), { purpose: \"history\" })\n          });\n        })) || []\n      );\n      currentMessage = { role: \"model\", source: \"\" };\n      messageSources.push(currentMessage);\n    } else {\n      currentMessage.source += piece;\n    }\n  }\n  const messages = messageSources.filter((ms) => ms.content || ms.source).map((m) => {\n    const out = {\n      role: m.role,\n      content: m.content || toParts(m.source)\n    };\n    if (m.metadata)\n      out.metadata = m.metadata;\n    return out;\n  });\n  if (!(options == null ? void 0 : options.messages) || messages.find((m) => {\n    var _a2;\n    return ((_a2 = m.metadata) == null ? void 0 : _a2.purpose) === \"history\";\n  }))\n    return messages;\n  if (((_b = messages.at(-1)) == null ? void 0 : _b.role) === \"user\") {\n    return [\n      ...messages.slice(0, -1),\n      ...options.messages,\n      messages.at(-1)\n    ];\n  }\n  return [...messages, ...options.messages];\n}\nconst PART_REGEX = /(<<<dotprompt:(?:media:url|section).*?)>>>/g;\nfunction toParts(source) {\n  const parts = [];\n  const pieces = source.split(PART_REGEX).filter((s) => s.trim() !== \"\");\n  for (let i = 0; i < pieces.length; i++) {\n    const piece = pieces[i];\n    if (piece.startsWith(\"<<<dotprompt:media:\")) {\n      const [_, url, contentType] = piece.split(\" \");\n      const part = { media: { url } };\n      if (contentType)\n        part.media.contentType = contentType;\n      parts.push(part);\n    } else if (piece.startsWith(\"<<<dotprompt:section\")) {\n      const [_, sectionType] = piece.split(\" \");\n      parts.push({ metadata: { purpose: sectionType, pending: true } });\n    } else {\n      parts.push({ text: piece });\n    }\n  }\n  return parts;\n}\nfunction compile(source, metadata) {\n  const renderString = Promptbars.compile(source, {\n    knownHelpers: {\n      json: true,\n      section: true,\n      media: true,\n      role: true,\n      history: true\n    }\n  });\n  return (input, options, data) => {\n    const renderedString = renderString(input, {\n      data: __spreadValues({\n        metadata: { prompt: metadata, context: (options == null ? void 0 : options.context) || null }\n      }, data)\n    });\n    return toMessages(renderedString, options);\n  };\n}\nfunction defineHelper(name, fn) {\n  Promptbars.registerHelper(name, fn);\n}\nfunction definePartial(name, source) {\n  Promptbars.registerPartial(name, source);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=template.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/lib/template.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar document_exports = {};\n__export(document_exports, {\n  Document: () => Document,\n  DocumentDataSchema: () => DocumentDataSchema,\n  MediaPartSchema: () => MediaPartSchema,\n  PartSchema: () => PartSchema,\n  TextPartSchema: () => TextPartSchema\n});\nmodule.exports = __toCommonJS(document_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nconst EmptyPartSchema = import_core.z.object({\n  text: import_core.z.never().optional(),\n  media: import_core.z.never().optional()\n});\nconst TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the document. */\n  text: import_core.z.string()\n});\nconst MediaPartSchema = EmptyPartSchema.extend({\n  media: import_core.z.object({\n    /** The media content type. Inferred from data uri if not provided. */\n    contentType: import_core.z.string().optional(),\n    /** A `data:` or `https:` uri containing the media content.  */\n    url: import_core.z.string()\n  })\n});\nconst PartSchema = import_core.z.union([TextPartSchema, MediaPartSchema]);\nconst DocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.string(), import_core.z.any()).optional()\n});\nclass Document {\n  constructor(data) {\n    this.content = data.content;\n    this.metadata = data.metadata;\n  }\n  static fromText(text, metadata) {\n    return new Document({\n      content: [{ text }],\n      metadata\n    });\n  }\n  /**\n   * Concatenates all `text` parts present in the document with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the document. Useful for extracting\n   * (for example) an image.\n   * @returns The first detected `media` part in the document.\n   */\n  get media() {\n    var _a;\n    return ((_a = this.content.find((part) => part.media)) == null ? void 0 : _a.media) || null;\n  }\n  toJSON() {\n    return {\n      content: this.content,\n      metadata: this.metadata\n    };\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2RvY3VtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQywwRUFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE1BQU07QUFDeEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBTUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZG90cHJvbXB0L25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9kb2N1bWVudC5qcz80NWM5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBkb2N1bWVudF9leHBvcnRzID0ge307XG5fX2V4cG9ydChkb2N1bWVudF9leHBvcnRzLCB7XG4gIERvY3VtZW50OiAoKSA9PiBEb2N1bWVudCxcbiAgRG9jdW1lbnREYXRhU2NoZW1hOiAoKSA9PiBEb2N1bWVudERhdGFTY2hlbWEsXG4gIE1lZGlhUGFydFNjaGVtYTogKCkgPT4gTWVkaWFQYXJ0U2NoZW1hLFxuICBQYXJ0U2NoZW1hOiAoKSA9PiBQYXJ0U2NoZW1hLFxuICBUZXh0UGFydFNjaGVtYTogKCkgPT4gVGV4dFBhcnRTY2hlbWFcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZG9jdW1lbnRfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xuY29uc3QgRW1wdHlQYXJ0U2NoZW1hID0gaW1wb3J0X2NvcmUuei5vYmplY3Qoe1xuICB0ZXh0OiBpbXBvcnRfY29yZS56Lm5ldmVyKCkub3B0aW9uYWwoKSxcbiAgbWVkaWE6IGltcG9ydF9jb3JlLnoubmV2ZXIoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRleHRQYXJ0U2NoZW1hID0gRW1wdHlQYXJ0U2NoZW1hLmV4dGVuZCh7XG4gIC8qKiBUaGUgdGV4dCBvZiB0aGUgZG9jdW1lbnQuICovXG4gIHRleHQ6IGltcG9ydF9jb3JlLnouc3RyaW5nKClcbn0pO1xuY29uc3QgTWVkaWFQYXJ0U2NoZW1hID0gRW1wdHlQYXJ0U2NoZW1hLmV4dGVuZCh7XG4gIG1lZGlhOiBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gICAgLyoqIFRoZSBtZWRpYSBjb250ZW50IHR5cGUuIEluZmVycmVkIGZyb20gZGF0YSB1cmkgaWYgbm90IHByb3ZpZGVkLiAqL1xuICAgIGNvbnRlbnRUeXBlOiBpbXBvcnRfY29yZS56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgLyoqIEEgYGRhdGE6YCBvciBgaHR0cHM6YCB1cmkgY29udGFpbmluZyB0aGUgbWVkaWEgY29udGVudC4gICovXG4gICAgdXJsOiBpbXBvcnRfY29yZS56LnN0cmluZygpXG4gIH0pXG59KTtcbmNvbnN0IFBhcnRTY2hlbWEgPSBpbXBvcnRfY29yZS56LnVuaW9uKFtUZXh0UGFydFNjaGVtYSwgTWVkaWFQYXJ0U2NoZW1hXSk7XG5jb25zdCBEb2N1bWVudERhdGFTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIGNvbnRlbnQ6IGltcG9ydF9jb3JlLnouYXJyYXkoUGFydFNjaGVtYSksXG4gIG1ldGFkYXRhOiBpbXBvcnRfY29yZS56LnJlY29yZChpbXBvcnRfY29yZS56LnN0cmluZygpLCBpbXBvcnRfY29yZS56LmFueSgpKS5vcHRpb25hbCgpXG59KTtcbmNsYXNzIERvY3VtZW50IHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMuY29udGVudCA9IGRhdGEuY29udGVudDtcbiAgICB0aGlzLm1ldGFkYXRhID0gZGF0YS5tZXRhZGF0YTtcbiAgfVxuICBzdGF0aWMgZnJvbVRleHQodGV4dCwgbWV0YWRhdGEpIHtcbiAgICByZXR1cm4gbmV3IERvY3VtZW50KHtcbiAgICAgIGNvbnRlbnQ6IFt7IHRleHQgfV0sXG4gICAgICBtZXRhZGF0YVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGB0ZXh0YCBwYXJ0cyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCB3aXRoIG5vIGRlbGltaXRlci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCB0ZXh0IHBhcnRzLlxuICAgKi9cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5tYXAoKHBhcnQpID0+IHBhcnQudGV4dCB8fCBcIlwiKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBtZWRpYSBwYXJ0IGRldGVjdGVkIGluIHRoZSBkb2N1bWVudC4gVXNlZnVsIGZvciBleHRyYWN0aW5nXG4gICAqIChmb3IgZXhhbXBsZSkgYW4gaW1hZ2UuXG4gICAqIEByZXR1cm5zIFRoZSBmaXJzdCBkZXRlY3RlZCBgbWVkaWFgIHBhcnQgaW4gdGhlIGRvY3VtZW50LlxuICAgKi9cbiAgZ2V0IG1lZGlhKCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKChfYSA9IHRoaXMuY29udGVudC5maW5kKChwYXJ0KSA9PiBwYXJ0Lm1lZGlhKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm1lZGlhKSB8fCBudWxsO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudDogdGhpcy5jb250ZW50LFxuICAgICAgbWV0YWRhdGE6IHRoaXMubWV0YWRhdGFcbiAgICB9O1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgRG9jdW1lbnQsXG4gIERvY3VtZW50RGF0YVNjaGVtYSxcbiAgTWVkaWFQYXJ0U2NoZW1hLFxuICBQYXJ0U2NoZW1hLFxuICBUZXh0UGFydFNjaGVtYVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb2N1bWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/embedder.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/embedder.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar embedder_exports = {};\n__export(embedder_exports, {\n  EmbedderInfoSchema: () => EmbedderInfoSchema,\n  EmbeddingSchema: () => EmbeddingSchema,\n  defineEmbedder: () => defineEmbedder,\n  embed: () => embed,\n  embedMany: () => embedMany,\n  embedderRef: () => embedderRef\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js\");\nconst EmbeddingSchema = import_core.z.array(import_core.z.number());\nconst EmbedRequestSchema = import_core.z.object({\n  input: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst EmbedResponseSchema = import_core.z.object({\n  embeddings: import_core.z.array(import_core.z.object({ embedding: EmbeddingSchema }))\n  // TODO: stats, etc.\n});\nfunction withMetadata(embedder, configSchema) {\n  const withMeta = embedder;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineEmbedder(registry, options, runner) {\n  const embedder = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"embedder\",\n      name: options.name,\n      inputSchema: options.configSchema ? EmbedRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : EmbedRequestSchema,\n      outputSchema: EmbedResponseSchema,\n      metadata: {\n        type: \"embedder\",\n        info: options.info\n      }\n    },\n    (i) => runner(\n      i.input.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const ewm = withMetadata(\n    embedder,\n    options.configSchema\n  );\n  return ewm;\n}\nfunction embed(registry, params) {\n  return __async(this, null, function* () {\n    var _a, _b;\n    let embedder = yield resolveEmbedder(registry, params);\n    if (!embedder.embedderAction) {\n      let embedderId;\n      if (typeof params.embedder === \"string\") {\n        embedderId = params.embedder;\n      } else if ((_b = (_a = params.embedder) == null ? void 0 : _a.__action) == null ? void 0 : _b.name) {\n        embedderId = params.embedder.__action.name;\n      } else {\n        embedderId = params.embedder.name;\n      }\n      throw new Error(`Unable to resolve embedder ${embedderId}`);\n    }\n    const response = yield embedder.embedderAction({\n      input: typeof params.content === \"string\" ? [import_document.Document.fromText(params.content, params.metadata)] : [params.content],\n      options: __spreadValues(__spreadValues({\n        version: embedder.version\n      }, embedder.config), params.options)\n    });\n    return response.embeddings[0].embedding;\n  });\n}\nfunction resolveEmbedder(registry, params) {\n  return __async(this, null, function* () {\n    if (typeof params.embedder === \"string\") {\n      return {\n        embedderAction: yield registry.lookupAction(\n          `/embedder/${params.embedder}`\n        )\n      };\n    } else if (Object.hasOwnProperty.call(params.embedder, \"__action\")) {\n      return {\n        embedderAction: params.embedder\n      };\n    } else if (Object.hasOwnProperty.call(params.embedder, \"name\")) {\n      const ref = params.embedder;\n      return {\n        embedderAction: yield registry.lookupAction(\n          `/embedder/${params.embedder.name}`\n        ),\n        config: __spreadValues({}, ref.config),\n        version: ref.version\n      };\n    }\n    throw new Error(`failed to resolve embedder ${params.embedder}`);\n  });\n}\nfunction embedMany(registry, params) {\n  return __async(this, null, function* () {\n    let embedder;\n    if (typeof params.embedder === \"string\") {\n      embedder = yield registry.lookupAction(`/embedder/${params.embedder}`);\n    } else if (Object.hasOwnProperty.call(params.embedder, \"info\")) {\n      embedder = yield registry.lookupAction(\n        `/embedder/${params.embedder.name}`\n      );\n    } else {\n      embedder = params.embedder;\n    }\n    if (!embedder) {\n      throw new Error(\"Unable to utilize the provided embedder\");\n    }\n    const response = yield embedder({\n      input: params.content.map(\n        (i) => typeof i === \"string\" ? import_document.Document.fromText(i, params.metadata) : i\n      ),\n      options: params.options\n    });\n    return response.embeddings;\n  });\n}\nconst EmbedderInfoSchema = import_core.z.object({\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can input this type of data. */\n    input: import_core.z.array(import_core.z.enum([\"text\", \"image\"])).optional(),\n    /** Model can support multiple languages */\n    multilingual: import_core.z.boolean().optional()\n  }).optional(),\n  /** Embedding dimension */\n  dimensions: import_core.z.number().optional()\n});\nfunction embedderRef(options) {\n  return __spreadValues({}, options);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/embedder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/evaluator.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/evaluator.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar evaluator_exports = {};\n__export(evaluator_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  BaseDataPointSchema: () => BaseDataPointSchema,\n  BaseEvalDataPointSchema: () => BaseEvalDataPointSchema,\n  EVALUATOR_METADATA_KEY_DEFINITION: () => EVALUATOR_METADATA_KEY_DEFINITION,\n  EVALUATOR_METADATA_KEY_DISPLAY_NAME: () => EVALUATOR_METADATA_KEY_DISPLAY_NAME,\n  EVALUATOR_METADATA_KEY_IS_BILLED: () => EVALUATOR_METADATA_KEY_IS_BILLED,\n  EvalResponseSchema: () => EvalResponseSchema,\n  EvalResponsesSchema: () => EvalResponsesSchema,\n  EvaluatorInfoSchema: () => EvaluatorInfoSchema,\n  SPAN_STATE_ATTR: () => SPAN_STATE_ATTR,\n  ScoreSchema: () => ScoreSchema,\n  defineEvaluator: () => defineEvaluator,\n  evaluate: () => evaluate,\n  evaluatorRef: () => evaluatorRef\n});\nmodule.exports = __toCommonJS(evaluator_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(rsc)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_STATE_ATTR = ATTR_PREFIX + \":state\";\nconst BaseDataPointSchema = import_core.z.object({\n  input: import_core.z.unknown(),\n  output: import_core.z.unknown().optional(),\n  context: import_core.z.array(import_core.z.unknown()).optional(),\n  reference: import_core.z.unknown().optional(),\n  testCaseId: import_core.z.string().optional(),\n  traceIds: import_core.z.array(import_core.z.string()).optional()\n});\nconst BaseEvalDataPointSchema = BaseDataPointSchema.extend({\n  testCaseId: import_core.z.string()\n});\nconst ScoreSchema = import_core.z.object({\n  score: import_core.z.union([import_core.z.number(), import_core.z.string(), import_core.z.boolean()]).optional(),\n  // TODO: use StatusSchema\n  error: import_core.z.string().optional(),\n  details: import_core.z.object({\n    reasoning: import_core.z.string().optional()\n  }).passthrough().optional()\n});\nconst EVALUATOR_METADATA_KEY_DISPLAY_NAME = \"evaluatorDisplayName\";\nconst EVALUATOR_METADATA_KEY_DEFINITION = \"evaluatorDefinition\";\nconst EVALUATOR_METADATA_KEY_IS_BILLED = \"evaluatorIsBilled\";\nconst EvalResponseSchema = import_core.z.object({\n  sampleIndex: import_core.z.number().optional(),\n  testCaseId: import_core.z.string(),\n  traceId: import_core.z.string().optional(),\n  spanId: import_core.z.string().optional(),\n  evaluation: ScoreSchema\n});\nconst EvalResponsesSchema = import_core.z.array(EvalResponseSchema);\nfunction withMetadata(evaluator, dataPointType, configSchema) {\n  const withMeta = evaluator;\n  withMeta.__dataPointType = dataPointType;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nconst EvalRequestSchema = import_core.z.object({\n  dataset: import_core.z.array(BaseDataPointSchema),\n  options: import_core.z.unknown()\n});\nfunction defineEvaluator(registry, options, runner) {\n  var _a;\n  const metadata = {};\n  metadata[EVALUATOR_METADATA_KEY_IS_BILLED] = options.isBilled == void 0 ? true : options.isBilled;\n  metadata[EVALUATOR_METADATA_KEY_DISPLAY_NAME] = options.displayName;\n  metadata[EVALUATOR_METADATA_KEY_DEFINITION] = options.definition;\n  const evaluator = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"evaluator\",\n      name: options.name,\n      inputSchema: EvalRequestSchema.extend({\n        dataset: options.dataPointType ? import_core.z.array(options.dataPointType) : import_core.z.array(BaseDataPointSchema),\n        options: (_a = options.configSchema) != null ? _a : import_core.z.unknown(),\n        evalRunId: import_core.z.string()\n      }),\n      outputSchema: EvalResponsesSchema,\n      metadata\n    },\n    (i) => __async(this, null, function* () {\n      var _a2;\n      let evalResponses = [];\n      for (let index = 0; index < i.dataset.length; index++) {\n        const datapoint = __spreadProps(__spreadValues({}, i.dataset[index]), {\n          testCaseId: (_a2 = i.dataset[index].testCaseId) != null ? _a2 : (0, import_crypto.randomUUID)()\n        });\n        try {\n          yield (0, import_tracing.runInNewSpan)(\n            {\n              metadata: {\n                name: `Test Case ${datapoint.testCaseId}`,\n                metadata: { \"evaluator:evalRunId\": i.evalRunId }\n              },\n              labels: {\n                [import_tracing.SPAN_TYPE_ATTR]: \"evaluator\"\n              }\n            },\n            (metadata2, otSpan) => __async(this, null, function* () {\n              const spanId = otSpan.spanContext().spanId;\n              const traceId = otSpan.spanContext().traceId;\n              try {\n                metadata2.input = {\n                  input: datapoint.input,\n                  output: datapoint.output,\n                  context: datapoint.context\n                };\n                const testCaseOutput = yield runner(datapoint, i.options);\n                testCaseOutput.sampleIndex = index;\n                testCaseOutput.spanId = spanId;\n                testCaseOutput.traceId = traceId;\n                metadata2.output = testCaseOutput;\n                evalResponses.push(testCaseOutput);\n                return testCaseOutput;\n              } catch (e) {\n                evalResponses.push({\n                  sampleIndex: index,\n                  spanId,\n                  traceId,\n                  testCaseId: datapoint.testCaseId,\n                  evaluation: {\n                    error: `Evaluation of test case ${datapoint.testCaseId} failed: \n${e.stack}`\n                  }\n                });\n                throw e;\n              }\n            })\n          );\n        } catch (e) {\n          import_logging.logger.error(\n            `Evaluation of test case ${datapoint.testCaseId} failed: \n${e.stack}`\n          );\n          continue;\n        }\n      }\n      return evalResponses;\n    })\n  );\n  const ewm = withMetadata(\n    evaluator,\n    options.dataPointType,\n    options.configSchema\n  );\n  return ewm;\n}\nfunction evaluate(registry, params) {\n  return __async(this, null, function* () {\n    let evaluator;\n    if (typeof params.evaluator === \"string\") {\n      evaluator = yield registry.lookupAction(`/evaluator/${params.evaluator}`);\n    } else if (Object.hasOwnProperty.call(params.evaluator, \"info\")) {\n      evaluator = yield registry.lookupAction(\n        `/evaluator/${params.evaluator.name}`\n      );\n    } else {\n      evaluator = params.evaluator;\n    }\n    if (!evaluator) {\n      throw new Error(\"Unable to utilize the provided evaluator\");\n    }\n    return yield evaluator({\n      dataset: params.dataset,\n      options: params.options\n    });\n  });\n}\nconst EvaluatorInfoSchema = import_core.z.object({\n  /** Friendly label for this evaluator */\n  label: import_core.z.string().optional(),\n  metrics: import_core.z.array(import_core.z.string())\n});\nfunction evaluatorRef(options) {\n  return __spreadValues({}, options);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=evaluator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/evaluator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/extract.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/extract.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar extract_exports = {};\n__export(extract_exports, {\n  extractJson: () => extractJson,\n  parsePartialJson: () => parsePartialJson\n});\nmodule.exports = __toCommonJS(extract_exports);\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(rsc)/./node_modules/json5/dist/index.mjs\"));\nvar import_partial_json = __webpack_require__(/*! partial-json */ \"(rsc)/./node_modules/partial-json/dist/index.js\");\nfunction parsePartialJson(jsonString) {\n  return import_json5.default.parse(JSON.stringify((0, import_partial_json.parse)(jsonString, import_partial_json.Allow.ALL)));\n}\nfunction extractJson(text, throwOnBadJson) {\n  let openingChar;\n  let closingChar;\n  let startPos;\n  let nestingCount = 0;\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i].replace(/\\u00A0/g, \" \");\n    if (!openingChar && (char === \"{\" || char === \"[\")) {\n      openingChar = char;\n      closingChar = char === \"{\" ? \"}\" : \"]\";\n      startPos = i;\n      nestingCount++;\n    } else if (char === openingChar) {\n      nestingCount++;\n    } else if (char === closingChar) {\n      nestingCount--;\n      if (!nestingCount) {\n        return import_json5.default.parse(text.substring(startPos || 0, i + 1));\n      }\n    }\n  }\n  if (startPos !== void 0 && nestingCount > 0) {\n    try {\n      return parsePartialJson(text.substring(startPos));\n    } catch (e) {\n      if (throwOnBadJson) {\n        throw new Error(`Invalid JSON extracted from model output: ${text}`);\n      }\n      return null;\n    }\n  }\n  if (throwOnBadJson) {\n    throw new Error(`Invalid JSON extracted from model output: ${text}`);\n  }\n  return null;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=extract.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2V4dHJhY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyQkFBMkIsbUJBQU8sQ0FBQyx3REFBTztBQUMxQywwQkFBMEIsbUJBQU8sQ0FBQyxxRUFBYztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBLG9DQUFvQztBQUNwQztBQUNBLCtCQUErQixNQUFNO0FBQ3JDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EscUVBQXFFLEtBQUs7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxLQUFLO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2RvdHByb21wdC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZXh0cmFjdC5qcz83NzE5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBleHRyYWN0X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGV4dHJhY3RfZXhwb3J0cywge1xuICBleHRyYWN0SnNvbjogKCkgPT4gZXh0cmFjdEpzb24sXG4gIHBhcnNlUGFydGlhbEpzb246ICgpID0+IHBhcnNlUGFydGlhbEpzb25cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZXh0cmFjdF9leHBvcnRzKTtcbnZhciBpbXBvcnRfanNvbjUgPSBfX3RvRVNNKHJlcXVpcmUoXCJqc29uNVwiKSk7XG52YXIgaW1wb3J0X3BhcnRpYWxfanNvbiA9IHJlcXVpcmUoXCJwYXJ0aWFsLWpzb25cIik7XG5mdW5jdGlvbiBwYXJzZVBhcnRpYWxKc29uKGpzb25TdHJpbmcpIHtcbiAgcmV0dXJuIGltcG9ydF9qc29uNS5kZWZhdWx0LnBhcnNlKEpTT04uc3RyaW5naWZ5KCgwLCBpbXBvcnRfcGFydGlhbF9qc29uLnBhcnNlKShqc29uU3RyaW5nLCBpbXBvcnRfcGFydGlhbF9qc29uLkFsbG93LkFMTCkpKTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RKc29uKHRleHQsIHRocm93T25CYWRKc29uKSB7XG4gIGxldCBvcGVuaW5nQ2hhcjtcbiAgbGV0IGNsb3NpbmdDaGFyO1xuICBsZXQgc3RhcnRQb3M7XG4gIGxldCBuZXN0aW5nQ291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gdGV4dFtpXS5yZXBsYWNlKC9cXHUwMEEwL2csIFwiIFwiKTtcbiAgICBpZiAoIW9wZW5pbmdDaGFyICYmIChjaGFyID09PSBcIntcIiB8fCBjaGFyID09PSBcIltcIikpIHtcbiAgICAgIG9wZW5pbmdDaGFyID0gY2hhcjtcbiAgICAgIGNsb3NpbmdDaGFyID0gY2hhciA9PT0gXCJ7XCIgPyBcIn1cIiA6IFwiXVwiO1xuICAgICAgc3RhcnRQb3MgPSBpO1xuICAgICAgbmVzdGluZ0NvdW50Kys7XG4gICAgfSBlbHNlIGlmIChjaGFyID09PSBvcGVuaW5nQ2hhcikge1xuICAgICAgbmVzdGluZ0NvdW50Kys7XG4gICAgfSBlbHNlIGlmIChjaGFyID09PSBjbG9zaW5nQ2hhcikge1xuICAgICAgbmVzdGluZ0NvdW50LS07XG4gICAgICBpZiAoIW5lc3RpbmdDb3VudCkge1xuICAgICAgICByZXR1cm4gaW1wb3J0X2pzb241LmRlZmF1bHQucGFyc2UodGV4dC5zdWJzdHJpbmcoc3RhcnRQb3MgfHwgMCwgaSArIDEpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHN0YXJ0UG9zICE9PSB2b2lkIDAgJiYgbmVzdGluZ0NvdW50ID4gMCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gcGFyc2VQYXJ0aWFsSnNvbih0ZXh0LnN1YnN0cmluZyhzdGFydFBvcykpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICh0aHJvd09uQmFkSnNvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSlNPTiBleHRyYWN0ZWQgZnJvbSBtb2RlbCBvdXRwdXQ6ICR7dGV4dH1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAodGhyb3dPbkJhZEpzb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSlNPTiBleHRyYWN0ZWQgZnJvbSBtb2RlbCBvdXRwdXQ6ICR7dGV4dH1gKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBleHRyYWN0SnNvbixcbiAgcGFyc2VQYXJ0aWFsSnNvblxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/extract.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/generate.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/generate.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __await = function(promise, isYieldStar) {\n  this[0] = promise;\n  this[1] = isYieldStar;\n};\nvar __asyncGenerator = (__this, __arguments, generator) => {\n  var resume = (k, v, yes, no) => {\n    try {\n      var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;\n      Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === \"return\" ? k : \"next\", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume(\"throw\", e, yes, no));\n    } catch (e) {\n      no(e);\n    }\n  }, method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no)), it = {};\n  return generator = generator.apply(__this, __arguments), it[__knownSymbol(\"asyncIterator\")] = () => it, method(\"next\"), method(\"throw\"), method(\"return\"), it;\n};\nvar generate_exports = {};\n__export(generate_exports, {\n  GenerateResponse: () => GenerateResponse,\n  GenerateResponseChunk: () => GenerateResponseChunk,\n  GenerationBlockedError: () => GenerationBlockedError,\n  GenerationResponseError: () => GenerationResponseError,\n  Message: () => Message,\n  generate: () => generate,\n  generateStream: () => generateStream,\n  normalizePart: () => normalizePart,\n  tagAsPreamble: () => tagAsPreamble,\n  toGenerateRequest: () => toGenerateRequest\n});\nmodule.exports = __toCommonJS(generate_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_extract = __webpack_require__(/*! ./extract.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/extract.js\");\nvar import_generateAction = __webpack_require__(/*! ./generateAction.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/generateAction.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/tool.js\");\nclass Message {\n  constructor(message) {\n    this.role = message.role;\n    this.content = message.content;\n  }\n  /**\n   * If a message contains a `data` part, it is returned. Otherwise, the `output()`\n   * method extracts the first valid JSON object or array from the text contained in\n   * the message and returns it.\n   *\n   * @returns The structured output contained in the message.\n   */\n  get output() {\n    return this.data || (0, import_extract.extractJson)(this.text);\n  }\n  toolResponseParts() {\n    const res = this.content.filter((part) => !!part.toolResponse);\n    return res;\n  }\n  /**\n   * Concatenates all `text` parts present in the message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the message. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the message.\n   */\n  get media() {\n    var _a;\n    return ((_a = this.content.find((part) => part.media)) == null ? void 0 : _a.media) || null;\n  }\n  /**\n   * Returns the first detected `data` part of a message.\n   * @returns The first `data` part detected in the message (if any).\n   */\n  get data() {\n    var _a;\n    return (_a = this.content.find((part) => part.data)) == null ? void 0 : _a.data;\n  }\n  /**\n   * Returns all tool request found in this message.\n   * @returns Array of all tool request found in this message.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Converts the Message to a plain JS object.\n   * @returns Plain JS object representing the data contained in the message.\n   */\n  toJSON() {\n    return {\n      role: this.role,\n      content: [...this.content]\n    };\n  }\n}\nclass GenerateResponse {\n  constructor(response, request) {\n    var _a, _b, _c, _d, _e, _f;\n    const generatedMessage = response.message || ((_b = (_a = response.candidates) == null ? void 0 : _a[0]) == null ? void 0 : _b.message);\n    if (generatedMessage) {\n      this.message = new Message(generatedMessage);\n    }\n    this.finishReason = response.finishReason || ((_d = (_c = response.candidates) == null ? void 0 : _c[0]) == null ? void 0 : _d.finishReason);\n    this.finishMessage = response.finishMessage || ((_f = (_e = response.candidates) == null ? void 0 : _e[0]) == null ? void 0 : _f.finishMessage);\n    this.usage = response.usage || {};\n    this.custom = response.custom || {};\n    this.request = request;\n  }\n  get assertMessage() {\n    if (!this.message)\n      throw new Error(\n        \"Operation could not be completed because the response does not contain a generated message.\"\n      );\n    return this.message;\n  }\n  /**\n   * Throws an error if the response does not contain valid output.\n   */\n  assertValid(request) {\n    var _a, _b, _c, _d, _e, _f;\n    if (this.finishReason === \"blocked\") {\n      throw new GenerationBlockedError(\n        this,\n        `Generation blocked${this.finishMessage ? `: ${this.finishMessage}` : \".\"}`\n      );\n    }\n    if (!this.message) {\n      throw new GenerationResponseError(\n        this,\n        `Model did not generate a message. Finish reason: '${this.finishReason}': ${this.finishMessage}`\n      );\n    }\n    if (((_a = request == null ? void 0 : request.output) == null ? void 0 : _a.schema) || ((_c = (_b = this.request) == null ? void 0 : _b.output) == null ? void 0 : _c.schema)) {\n      const o = this.output;\n      (0, import_schema.parseSchema)(o, {\n        jsonSchema: ((_d = request == null ? void 0 : request.output) == null ? void 0 : _d.schema) || ((_f = (_e = this.request) == null ? void 0 : _e.output) == null ? void 0 : _f.schema)\n      });\n    }\n  }\n  isValid(request) {\n    try {\n      this.assertValid(request);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * If the selected candidate's message contains a `data` part, it is returned. Otherwise,\n   * the `output()` method extracts the first valid JSON object or array from the text\n   * contained in the selected candidate's message and returns it.\n   *\n   * @param index The candidate index from which to extract output. If not provided, finds first candidate that conforms to output schema.\n   * @returns The structured output contained in the selected candidate.\n   */\n  get output() {\n    var _a;\n    return ((_a = this.message) == null ? void 0 : _a.output) || null;\n  }\n  /**\n   * Concatenates all `text` parts present in the candidate's message with no delimiter.\n   * @param index The candidate index from which to extract text, defaults to first candidate.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    var _a;\n    return ((_a = this.message) == null ? void 0 : _a.text) || \"\";\n  }\n  /**\n   * Returns the first detected media part in the selected candidate's message. Useful for\n   * extracting (for example) an image from a generation expected to create one.\n   * @param index The candidate index from which to extract media, defaults to first candidate.\n   * @returns The first detected `media` part in the candidate.\n   */\n  get media() {\n    var _a;\n    return ((_a = this.message) == null ? void 0 : _a.media) || null;\n  }\n  /**\n   * Returns the first detected `data` part of the selected candidate's message.\n   * @param index The candidate index from which to extract data, defaults to first candidate.\n   * @returns The first `data` part detected in the candidate (if any).\n   */\n  get data() {\n    var _a;\n    return ((_a = this.message) == null ? void 0 : _a.data) || null;\n  }\n  /**\n   * Returns all tool request found in the candidate.\n   * @param index The candidate index from which to extract tool requests, defaults to first candidate.\n   * @returns Array of all tool request found in the candidate.\n   */\n  get toolRequests() {\n    var _a;\n    return ((_a = this.message) == null ? void 0 : _a.toolRequests) || [];\n  }\n  /**\n   * Appends the message generated by the selected candidate to the messages already\n   * present in the generation request. The result of this method can be safely\n   * serialized to JSON for persistence in a database.\n   * @param index The candidate index to utilize during conversion, defaults to first candidate.\n   * @returns A serializable list of messages compatible with `generate({history})`.\n   */\n  get messages() {\n    var _a;\n    if (!this.request)\n      throw new Error(\n        \"Can't construct history for response without request reference.\"\n      );\n    if (!this.message)\n      throw new Error(\n        \"Can't construct history for response without generated message.\"\n      );\n    return [...(_a = this.request) == null ? void 0 : _a.messages, this.message.toJSON()];\n  }\n  get raw() {\n    var _a;\n    return (_a = this.raw) != null ? _a : this.custom;\n  }\n  toJSON() {\n    var _a, _b, _c;\n    const out = {\n      message: (_a = this.message) == null ? void 0 : _a.toJSON(),\n      finishReason: this.finishReason,\n      finishMessage: this.finishMessage,\n      usage: this.usage,\n      custom: ((_c = (_b = this.custom).toJSON) == null ? void 0 : _c.call(_b)) || this.custom,\n      request: this.request\n    };\n    if (!out.finishMessage) delete out.finishMessage;\n    if (!out.request) delete out.request;\n    return out;\n  }\n}\nclass GenerateResponseChunk {\n  constructor(data, accumulatedChunks) {\n    this.index = data.index;\n    this.content = data.content || [];\n    this.custom = data.custom;\n    this.accumulatedChunks = accumulatedChunks;\n  }\n  /**\n   * Concatenates all `text` parts present in the chunk with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the chunk. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the chunk.\n   */\n  get media() {\n    var _a;\n    return ((_a = this.content.find((part) => part.media)) == null ? void 0 : _a.media) || null;\n  }\n  /**\n   * Returns the first detected `data` part of a chunk.\n   * @returns The first `data` part detected in the chunk (if any).\n   */\n  get data() {\n    var _a;\n    return (_a = this.content.find((part) => part.data)) == null ? void 0 : _a.data;\n  }\n  /**\n   * Returns all tool request found in this chunk.\n   * @returns Array of all tool request found in this chunk.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Attempts to extract the longest valid JSON substring from the accumulated chunks.\n   * @returns The longest valid JSON substring found in the accumulated chunks.\n   */\n  get output() {\n    if (!this.accumulatedChunks) return null;\n    const accumulatedText = this.accumulatedChunks.map((chunk) => chunk.content.map((part) => part.text || \"\").join(\"\")).join(\"\");\n    return (0, import_extract.extractJson)(accumulatedText, false);\n  }\n  toJSON() {\n    return { index: this.index, content: this.content, custom: this.custom };\n  }\n}\nfunction normalizePart(input) {\n  if (typeof input === \"string\") {\n    return [{ text: input }];\n  } else if (Array.isArray(input)) {\n    return input;\n  } else {\n    return [input];\n  }\n}\nfunction toGenerateRequest(registry, options) {\n  return __async(this, null, function* () {\n    var _a, _b, _c, _d, _e;\n    const messages = [];\n    if (options.system) {\n      messages.push({ role: \"system\", content: normalizePart(options.system) });\n    }\n    if (options.messages) {\n      messages.push(...options.messages);\n    }\n    if (options.prompt) {\n      messages.push({ role: \"user\", content: normalizePart(options.prompt) });\n    }\n    if (messages.length === 0) {\n      throw new Error(\"at least one message is required in generate request\");\n    }\n    let tools;\n    if (options.tools) {\n      tools = yield (0, import_tool.resolveTools)(registry, options.tools);\n    }\n    const out = {\n      messages,\n      config: options.config,\n      docs: options.docs,\n      tools: (tools == null ? void 0 : tools.map((tool) => (0, import_tool.toToolDefinition)(tool))) || [],\n      output: {\n        format: ((_a = options.output) == null ? void 0 : _a.format) || (((_b = options.output) == null ? void 0 : _b.schema) || ((_c = options.output) == null ? void 0 : _c.jsonSchema) ? \"json\" : \"text\"),\n        schema: (0, import_schema.toJsonSchema)({\n          schema: (_d = options.output) == null ? void 0 : _d.schema,\n          jsonSchema: (_e = options.output) == null ? void 0 : _e.jsonSchema\n        })\n      }\n    };\n    if (!out.output.schema) delete out.output.schema;\n    return out;\n  });\n}\nfunction resolveModel(registry, options) {\n  return __async(this, null, function* () {\n    let model = options.model;\n    if (!model) {\n      throw new Error(\"Model is required.\");\n    }\n    if (typeof model === \"string\") {\n      return {\n        modelAction: yield registry.lookupAction(\n          `/model/${model}`\n        )\n      };\n    } else if (model.hasOwnProperty(\"__action\")) {\n      return { modelAction: model };\n    } else {\n      const ref = model;\n      return {\n        modelAction: yield registry.lookupAction(\n          `/model/${ref.name}`\n        ),\n        config: __spreadValues({}, ref.config),\n        version: ref.version\n      };\n    }\n  });\n}\nclass GenerationResponseError extends import_core.GenkitError {\n  constructor(response, message, status, detail) {\n    super({\n      status: status || \"FAILED_PRECONDITION\",\n      message\n    });\n    this.detail = __spreadValues({ response }, detail);\n  }\n}\nclass GenerationBlockedError extends GenerationResponseError {\n}\nfunction generate(registry, options) {\n  return __async(this, null, function* () {\n    var _a, _b, _c;\n    const resolvedOptions = yield Promise.resolve(options);\n    const resolvedModel = yield resolveModel(registry, resolvedOptions);\n    const model = resolvedModel.modelAction;\n    if (!model) {\n      let modelId;\n      if (typeof resolvedOptions.model === \"string\") {\n        modelId = resolvedOptions.model;\n      } else if ((_b = (_a = resolvedOptions.model) == null ? void 0 : _a.__action) == null ? void 0 : _b.name) {\n        modelId = resolvedOptions.model.__action.name;\n      } else {\n        modelId = resolvedOptions.model.name;\n      }\n      throw new Error(`Model ${modelId} not found`);\n    }\n    let tools;\n    if (resolvedOptions.tools) {\n      tools = [];\n      for (const t of resolvedOptions.tools) {\n        if (typeof t === \"string\") {\n          tools.push(yield resolveFullToolName(registry, t));\n        } else if (t.__action) {\n          tools.push(\n            `/${(_c = t.__action.metadata) == null ? void 0 : _c.type}/${t.__action.name}`\n          );\n        } else if (typeof t.asTool === \"function\") {\n          const promptToolAction = t.asTool();\n          tools.push(`/prompt/${promptToolAction.__action.name}`);\n        } else if (t.name) {\n          tools.push(yield resolveFullToolName(registry, t.name));\n        } else {\n          throw new Error(\n            `Unable to determine type of of tool: ${JSON.stringify(t)}`\n          );\n        }\n      }\n    }\n    const messages = [];\n    if (resolvedOptions.system) {\n      messages.push({\n        role: \"system\",\n        content: normalizePart(resolvedOptions.system)\n      });\n    }\n    if (resolvedOptions.messages) {\n      messages.push(...resolvedOptions.messages);\n    }\n    if (resolvedOptions.prompt) {\n      messages.push({\n        role: \"user\",\n        content: normalizePart(resolvedOptions.prompt)\n      });\n    }\n    if (messages.length === 0) {\n      throw new Error(\"at least one message is required in generate request\");\n    }\n    const params = {\n      model: model.__action.name,\n      docs: resolvedOptions.docs,\n      messages,\n      tools,\n      config: __spreadValues(__spreadValues({\n        version: resolvedModel.version\n      }, stripUndefinedOptions(resolvedModel.config)), stripUndefinedOptions(resolvedOptions.config)),\n      output: resolvedOptions.output && {\n        format: resolvedOptions.output.format,\n        jsonSchema: resolvedOptions.output.schema ? (0, import_schema.toJsonSchema)({\n          schema: resolvedOptions.output.schema,\n          jsonSchema: resolvedOptions.output.jsonSchema\n        }) : resolvedOptions.output.jsonSchema\n      },\n      returnToolRequests: resolvedOptions.returnToolRequests\n    };\n    return yield (0, import_core.runWithStreamingCallback)(\n      resolvedOptions.streamingCallback,\n      () => __async(this, null, function* () {\n        var _a2;\n        const response = yield (0, import_generateAction.generateHelper)(\n          registry,\n          params,\n          resolvedOptions.use\n        );\n        return new GenerateResponse(\n          response,\n          (_a2 = response.request) != null ? _a2 : yield toGenerateRequest(registry, __spreadProps(__spreadValues({}, resolvedOptions), { tools }))\n        );\n      })\n    );\n  });\n}\nfunction stripUndefinedOptions(input) {\n  if (!input) return input;\n  const copy = __spreadValues({}, input);\n  Object.keys(input).forEach((key) => {\n    if (copy[key] === void 0) {\n      delete copy[key];\n    }\n  });\n  return copy;\n}\nfunction resolveFullToolName(registry, name) {\n  return __async(this, null, function* () {\n    if (yield registry.lookupAction(`/tool/${name}`)) {\n      return `/tool/${name}`;\n    } else if (yield registry.lookupAction(`/prompt/${name}`)) {\n      return `/prompt/${name}`;\n    } else {\n      throw new Error(`Unable to determine type of of tool: ${name}`);\n    }\n  });\n}\nfunction createPromise() {\n  let resolve, reject;\n  let promise = new Promise((res, rej) => [resolve, reject] = [res, rej]);\n  return { resolve, reject, promise };\n}\nfunction generateStream(registry, options) {\n  return __async(this, null, function* () {\n    let firstChunkSent = false;\n    return new Promise(\n      (initialResolve, initialReject) => {\n        const {\n          resolve: finalResolve,\n          reject: finalReject,\n          promise: finalPromise\n        } = createPromise();\n        let provideNextChunk, nextChunk;\n        ({ resolve: provideNextChunk, promise: nextChunk } = createPromise());\n        function chunkStream() {\n          return __asyncGenerator(this, null, function* () {\n            while (true) {\n              const next = yield new __await(nextChunk);\n              if (!next) break;\n              yield next;\n            }\n          });\n        }\n        try {\n          generate(registry, __spreadProps(__spreadValues({}, options), {\n            streamingCallback: (chunk) => {\n              firstChunkSent = true;\n              provideNextChunk(chunk);\n              ({ resolve: provideNextChunk, promise: nextChunk } = createPromise());\n            }\n          })).then((result) => {\n            provideNextChunk(null);\n            finalResolve(result);\n          });\n        } catch (e) {\n          if (!firstChunkSent) {\n            initialReject(e);\n            return;\n          }\n          provideNextChunk(null);\n          finalReject(e);\n        }\n        initialResolve({\n          get response() {\n            return finalPromise;\n          },\n          get stream() {\n            return chunkStream();\n          }\n        });\n      }\n    );\n  });\n}\nfunction tagAsPreamble(msgs) {\n  if (!msgs) {\n    return void 0;\n  }\n  return msgs.map((m) => __spreadProps(__spreadValues({}, m), {\n    metadata: __spreadProps(__spreadValues({}, m.metadata), {\n      preamble: true\n    })\n  }));\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=generate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/generate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/generateAction.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/generateAction.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar generateAction_exports = {};\n__export(generateAction_exports, {\n  GenerateUtilParamSchema: () => GenerateUtilParamSchema,\n  generateHelper: () => generateHelper,\n  inferRoleFromParts: () => inferRoleFromParts\n});\nmodule.exports = __toCommonJS(generateAction_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar clc = __toESM(__webpack_require__(/*! colorette */ \"(rsc)/./node_modules/colorette/index.cjs\"));\nvar import_document = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/tool.js\");\nconst GenerateUtilParamSchema = import_core.z.object({\n  /** A model name (e.g. `vertexai/gemini-1.0-pro`). */\n  model: import_core.z.string(),\n  /** Retrieved documents to be used as context for this generation. */\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional(),\n  /** Conversation history for multi-turn prompting when supported by the underlying model. */\n  messages: import_core.z.array(import_model.MessageSchema),\n  /** List of registered tool names for this generation if supported by the underlying model. */\n  tools: import_core.z.array(import_core.z.union([import_core.z.string(), import_model.ToolDefinitionSchema])).optional(),\n  /** Configuration for the generation request. */\n  config: import_core.z.any().optional(),\n  /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */\n  output: import_core.z.object({\n    format: import_core.z.union([import_core.z.literal(\"text\"), import_core.z.literal(\"json\"), import_core.z.literal(\"media\")]).optional(),\n    jsonSchema: import_core.z.any().optional()\n  }).optional(),\n  /** When true, return tool calls for manual processing instead of automatically resolving them. */\n  returnToolRequests: import_core.z.boolean().optional()\n});\nfunction generateHelper(registry, input, middleware) {\n  return __async(this, null, function* () {\n    return yield (0, import_tracing.runInNewSpan)(\n      {\n        metadata: {\n          name: \"generate\"\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"helper\"\n        }\n      },\n      (metadata) => __async(this, null, function* () {\n        metadata.name = \"generate\";\n        metadata.input = input;\n        const output = yield generate(registry, input, middleware);\n        metadata.output = JSON.stringify(output);\n        return output;\n      })\n    );\n  });\n}\nfunction generate(registry, rawRequest, middleware) {\n  return __async(this, null, function* () {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const model = yield registry.lookupAction(\n      `/model/${rawRequest.model}`\n    );\n    if (!model) {\n      throw new Error(`Model ${rawRequest.model} not found`);\n    }\n    if (((_a = model.__action.metadata) == null ? void 0 : _a.model.stage) === \"deprecated\") {\n      console.warn(\n        `${clc.bold(clc.yellow(\"Warning:\"))} Model '${model.__action.name}' is deprecated and may be removed in a future release.`\n      );\n    }\n    let tools;\n    if ((_b = rawRequest.tools) == null ? void 0 : _b.length) {\n      if (!((_d = (_c = model.__action.metadata) == null ? void 0 : _c.model.supports) == null ? void 0 : _d.tools)) {\n        throw new Error(\n          `Model ${rawRequest.model} does not support tools, but some tools were supplied to generate(). Please call generate() without tools if you would like to use this model.`\n        );\n      }\n      tools = yield Promise.all(\n        rawRequest.tools.map((toolRef) => __async(this, null, function* () {\n          if (typeof toolRef === \"string\") {\n            return (0, import_tool.lookupToolByName)(registry, toolRef);\n          } else if (toolRef.name) {\n            return (0, import_tool.lookupToolByName)(registry, toolRef.name);\n          }\n          throw `Unable to resolve tool ${JSON.stringify(toolRef)}`;\n        }))\n      );\n    }\n    const request = yield actionToGenerateRequest(rawRequest, tools);\n    const accumulatedChunks = [];\n    const streamingCallback = (0, import_core.getStreamingCallback)();\n    const response = yield (0, import_core.runWithStreamingCallback)(\n      streamingCallback ? (chunk) => {\n        accumulatedChunks.push(chunk);\n        if (streamingCallback) {\n          streamingCallback(\n            new import_generate.GenerateResponseChunk(chunk, accumulatedChunks)\n          );\n        }\n      } : void 0,\n      () => __async(this, null, function* () {\n        const dispatch = (index, req) => __async(this, null, function* () {\n          if (!middleware || index === middleware.length) {\n            return yield model(req);\n          }\n          const currentMiddleware = middleware[index];\n          return currentMiddleware(\n            req,\n            (modifiedReq) => __async(this, null, function* () {\n              return dispatch(index + 1, modifiedReq || req);\n            })\n          );\n        });\n        return new import_generate.GenerateResponse(yield dispatch(0, request), request);\n      })\n    );\n    response.assertValid(request);\n    const message = response.message;\n    const toolCalls = message.content.filter((part) => !!part.toolRequest);\n    if (rawRequest.returnToolRequests || toolCalls.length === 0) {\n      return response.toJSON();\n    }\n    const toolResponses = [];\n    let messages = [...request.messages, message];\n    let newTools = rawRequest.tools;\n    for (const part of toolCalls) {\n      if (!part.toolRequest) {\n        throw Error(\n          \"Tool request expected but not provided in tool request part\"\n        );\n      }\n      const tool = tools == null ? void 0 : tools.find(\n        (tool2) => {\n          var _a2;\n          return tool2.__action.name === ((_a2 = part.toolRequest) == null ? void 0 : _a2.name);\n        }\n      );\n      if (!tool) {\n        throw Error(`Tool ${(_e = part.toolRequest) == null ? void 0 : _e.name} not found`);\n      }\n      if (tool.__action.metadata.type === \"prompt\") {\n        const newPreamble = yield tool((_f = part.toolRequest) == null ? void 0 : _f.input);\n        toolResponses.push({\n          toolResponse: {\n            name: part.toolRequest.name,\n            ref: part.toolRequest.ref,\n            output: `transferred to ${part.toolRequest.name}`\n          }\n        });\n        messages = [\n          ...(0, import_generate.tagAsPreamble)(newPreamble.messages),\n          ...messages.filter((m) => {\n            var _a2;\n            return !((_a2 = m == null ? void 0 : m.metadata) == null ? void 0 : _a2.preamble);\n          })\n        ];\n        newTools = newPreamble.tools;\n      } else {\n        toolResponses.push({\n          toolResponse: {\n            name: part.toolRequest.name,\n            ref: part.toolRequest.ref,\n            output: yield tool((_g = part.toolRequest) == null ? void 0 : _g.input)\n          }\n        });\n      }\n    }\n    const nextRequest = __spreadProps(__spreadValues({}, rawRequest), {\n      messages: [\n        ...messages,\n        {\n          role: \"tool\",\n          content: toolResponses\n        }\n      ],\n      tools: newTools\n    });\n    return yield generateHelper(registry, nextRequest, middleware);\n  });\n}\nfunction actionToGenerateRequest(options, resolvedTools) {\n  return __async(this, null, function* () {\n    var _a, _b, _c;\n    const out = {\n      messages: options.messages,\n      config: options.config,\n      docs: options.docs,\n      tools: (resolvedTools == null ? void 0 : resolvedTools.map((tool) => (0, import_tool.toToolDefinition)(tool))) || [],\n      output: {\n        format: ((_a = options.output) == null ? void 0 : _a.format) || (((_b = options.output) == null ? void 0 : _b.jsonSchema) ? \"json\" : \"text\"),\n        schema: (0, import_schema.toJsonSchema)({\n          jsonSchema: (_c = options.output) == null ? void 0 : _c.jsonSchema\n        })\n      }\n    };\n    if (!out.output.schema) delete out.output.schema;\n    return out;\n  });\n}\nfunction inferRoleFromParts(parts) {\n  const uniqueRoles = /* @__PURE__ */ new Set();\n  for (const part of parts) {\n    const role = getRoleFromPart(part);\n    uniqueRoles.add(role);\n    if (uniqueRoles.size > 1) {\n      throw new Error(\"Contents contain mixed roles\");\n    }\n  }\n  return Array.from(uniqueRoles)[0];\n}\nfunction getRoleFromPart(part) {\n  if (part.toolRequest !== void 0) return \"model\";\n  if (part.toolResponse !== void 0) return \"tool\";\n  if (part.text !== void 0) return \"user\";\n  if (part.media !== void 0) return \"user\";\n  if (part.data !== void 0) return \"user\";\n  throw new Error(\"No recognized fields in content\");\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=generateAction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/generateAction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/index.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar src_exports = {};\n__export(src_exports, {\n  BaseDataPointSchema: () => import_evaluator.BaseDataPointSchema,\n  Document: () => import_document.Document,\n  DocumentDataSchema: () => import_document.DocumentDataSchema,\n  GenerateResponse: () => import_generate.GenerateResponse,\n  GenerationBlockedError: () => import_generate.GenerationBlockedError,\n  GenerationCommonConfigSchema: () => import_model.GenerationCommonConfigSchema,\n  GenerationResponseError: () => import_generate.GenerationResponseError,\n  Message: () => import_generate.Message,\n  MessageSchema: () => import_model.MessageSchema,\n  ModelRequestSchema: () => import_model.ModelRequestSchema,\n  ModelResponseSchema: () => import_model.ModelResponseSchema,\n  PartSchema: () => import_model.PartSchema,\n  RoleSchema: () => import_model.RoleSchema,\n  asTool: () => import_tool.asTool,\n  definePrompt: () => import_prompt.definePrompt,\n  defineTool: () => import_tool.defineTool,\n  embed: () => import_embedder.embed,\n  embedderRef: () => import_embedder.embedderRef,\n  evaluate: () => import_evaluator.evaluate,\n  evaluatorRef: () => import_evaluator.evaluatorRef,\n  generate: () => import_generate.generate,\n  generateStream: () => import_generate.generateStream,\n  index: () => import_retriever.index,\n  indexerRef: () => import_retriever.indexerRef,\n  normalizePart: () => import_generate.normalizePart,\n  renderPrompt: () => import_prompt.renderPrompt,\n  rerank: () => import_reranker.rerank,\n  rerankerRef: () => import_reranker.rerankerRef,\n  retrieve: () => import_retriever.retrieve,\n  retrieverRef: () => import_retriever.retrieverRef,\n  tagAsPreamble: () => import_generate.tagAsPreamble,\n  toGenerateRequest: () => import_generate.toGenerateRequest\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_document = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_embedder = __webpack_require__(/*! ./embedder.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/embedder.js\");\nvar import_evaluator = __webpack_require__(/*! ./evaluator.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/evaluator.js\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_reranker = __webpack_require__(/*! ./reranker.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/reranker.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/retriever.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/tool.js\");\n__reExport(src_exports, __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/types.js\"), module.exports);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLDJHQUFlO0FBQzdDLHNCQUFzQixtQkFBTyxDQUFDLDJHQUFlO0FBQzdDLHVCQUF1QixtQkFBTyxDQUFDLDZHQUFnQjtBQUMvQyxzQkFBc0IsbUJBQU8sQ0FBQywyR0FBZTtBQUM3QyxtQkFBbUIsbUJBQU8sQ0FBQyxxR0FBWTtBQUN2QyxvQkFBb0IsbUJBQU8sQ0FBQyx1R0FBYTtBQUN6QyxzQkFBc0IsbUJBQU8sQ0FBQywyR0FBZTtBQUM3Qyx1QkFBdUIsbUJBQU8sQ0FBQyw2R0FBZ0I7QUFDL0Msa0JBQWtCLG1CQUFPLENBQUMsbUdBQVc7QUFDckMsd0JBQXdCLG1CQUFPLENBQUMscUdBQVk7QUFDNUM7QUFDQSxNQUFNLENBa0NMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2RvdHByb21wdC9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvaW5kZXguanM/MjBiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fcmVFeHBvcnQgPSAodGFyZ2V0LCBtb2QsIHNlY29uZFRhcmdldCkgPT4gKF9fY29weVByb3BzKHRhcmdldCwgbW9kLCBcImRlZmF1bHRcIiksIHNlY29uZFRhcmdldCAmJiBfX2NvcHlQcm9wcyhzZWNvbmRUYXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBCYXNlRGF0YVBvaW50U2NoZW1hOiAoKSA9PiBpbXBvcnRfZXZhbHVhdG9yLkJhc2VEYXRhUG9pbnRTY2hlbWEsXG4gIERvY3VtZW50OiAoKSA9PiBpbXBvcnRfZG9jdW1lbnQuRG9jdW1lbnQsXG4gIERvY3VtZW50RGF0YVNjaGVtYTogKCkgPT4gaW1wb3J0X2RvY3VtZW50LkRvY3VtZW50RGF0YVNjaGVtYSxcbiAgR2VuZXJhdGVSZXNwb25zZTogKCkgPT4gaW1wb3J0X2dlbmVyYXRlLkdlbmVyYXRlUmVzcG9uc2UsXG4gIEdlbmVyYXRpb25CbG9ja2VkRXJyb3I6ICgpID0+IGltcG9ydF9nZW5lcmF0ZS5HZW5lcmF0aW9uQmxvY2tlZEVycm9yLFxuICBHZW5lcmF0aW9uQ29tbW9uQ29uZmlnU2NoZW1hOiAoKSA9PiBpbXBvcnRfbW9kZWwuR2VuZXJhdGlvbkNvbW1vbkNvbmZpZ1NjaGVtYSxcbiAgR2VuZXJhdGlvblJlc3BvbnNlRXJyb3I6ICgpID0+IGltcG9ydF9nZW5lcmF0ZS5HZW5lcmF0aW9uUmVzcG9uc2VFcnJvcixcbiAgTWVzc2FnZTogKCkgPT4gaW1wb3J0X2dlbmVyYXRlLk1lc3NhZ2UsXG4gIE1lc3NhZ2VTY2hlbWE6ICgpID0+IGltcG9ydF9tb2RlbC5NZXNzYWdlU2NoZW1hLFxuICBNb2RlbFJlcXVlc3RTY2hlbWE6ICgpID0+IGltcG9ydF9tb2RlbC5Nb2RlbFJlcXVlc3RTY2hlbWEsXG4gIE1vZGVsUmVzcG9uc2VTY2hlbWE6ICgpID0+IGltcG9ydF9tb2RlbC5Nb2RlbFJlc3BvbnNlU2NoZW1hLFxuICBQYXJ0U2NoZW1hOiAoKSA9PiBpbXBvcnRfbW9kZWwuUGFydFNjaGVtYSxcbiAgUm9sZVNjaGVtYTogKCkgPT4gaW1wb3J0X21vZGVsLlJvbGVTY2hlbWEsXG4gIGFzVG9vbDogKCkgPT4gaW1wb3J0X3Rvb2wuYXNUb29sLFxuICBkZWZpbmVQcm9tcHQ6ICgpID0+IGltcG9ydF9wcm9tcHQuZGVmaW5lUHJvbXB0LFxuICBkZWZpbmVUb29sOiAoKSA9PiBpbXBvcnRfdG9vbC5kZWZpbmVUb29sLFxuICBlbWJlZDogKCkgPT4gaW1wb3J0X2VtYmVkZGVyLmVtYmVkLFxuICBlbWJlZGRlclJlZjogKCkgPT4gaW1wb3J0X2VtYmVkZGVyLmVtYmVkZGVyUmVmLFxuICBldmFsdWF0ZTogKCkgPT4gaW1wb3J0X2V2YWx1YXRvci5ldmFsdWF0ZSxcbiAgZXZhbHVhdG9yUmVmOiAoKSA9PiBpbXBvcnRfZXZhbHVhdG9yLmV2YWx1YXRvclJlZixcbiAgZ2VuZXJhdGU6ICgpID0+IGltcG9ydF9nZW5lcmF0ZS5nZW5lcmF0ZSxcbiAgZ2VuZXJhdGVTdHJlYW06ICgpID0+IGltcG9ydF9nZW5lcmF0ZS5nZW5lcmF0ZVN0cmVhbSxcbiAgaW5kZXg6ICgpID0+IGltcG9ydF9yZXRyaWV2ZXIuaW5kZXgsXG4gIGluZGV4ZXJSZWY6ICgpID0+IGltcG9ydF9yZXRyaWV2ZXIuaW5kZXhlclJlZixcbiAgbm9ybWFsaXplUGFydDogKCkgPT4gaW1wb3J0X2dlbmVyYXRlLm5vcm1hbGl6ZVBhcnQsXG4gIHJlbmRlclByb21wdDogKCkgPT4gaW1wb3J0X3Byb21wdC5yZW5kZXJQcm9tcHQsXG4gIHJlcmFuazogKCkgPT4gaW1wb3J0X3JlcmFua2VyLnJlcmFuayxcbiAgcmVyYW5rZXJSZWY6ICgpID0+IGltcG9ydF9yZXJhbmtlci5yZXJhbmtlclJlZixcbiAgcmV0cmlldmU6ICgpID0+IGltcG9ydF9yZXRyaWV2ZXIucmV0cmlldmUsXG4gIHJldHJpZXZlclJlZjogKCkgPT4gaW1wb3J0X3JldHJpZXZlci5yZXRyaWV2ZXJSZWYsXG4gIHRhZ0FzUHJlYW1ibGU6ICgpID0+IGltcG9ydF9nZW5lcmF0ZS50YWdBc1ByZWFtYmxlLFxuICB0b0dlbmVyYXRlUmVxdWVzdDogKCkgPT4gaW1wb3J0X2dlbmVyYXRlLnRvR2VuZXJhdGVSZXF1ZXN0XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpbXBvcnRfZG9jdW1lbnQgPSByZXF1aXJlKFwiLi9kb2N1bWVudC5qc1wiKTtcbnZhciBpbXBvcnRfZW1iZWRkZXIgPSByZXF1aXJlKFwiLi9lbWJlZGRlci5qc1wiKTtcbnZhciBpbXBvcnRfZXZhbHVhdG9yID0gcmVxdWlyZShcIi4vZXZhbHVhdG9yLmpzXCIpO1xudmFyIGltcG9ydF9nZW5lcmF0ZSA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlLmpzXCIpO1xudmFyIGltcG9ydF9tb2RlbCA9IHJlcXVpcmUoXCIuL21vZGVsLmpzXCIpO1xudmFyIGltcG9ydF9wcm9tcHQgPSByZXF1aXJlKFwiLi9wcm9tcHQuanNcIik7XG52YXIgaW1wb3J0X3JlcmFua2VyID0gcmVxdWlyZShcIi4vcmVyYW5rZXIuanNcIik7XG52YXIgaW1wb3J0X3JldHJpZXZlciA9IHJlcXVpcmUoXCIuL3JldHJpZXZlci5qc1wiKTtcbnZhciBpbXBvcnRfdG9vbCA9IHJlcXVpcmUoXCIuL3Rvb2wuanNcIik7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi90eXBlcy5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJhc2VEYXRhUG9pbnRTY2hlbWEsXG4gIERvY3VtZW50LFxuICBEb2N1bWVudERhdGFTY2hlbWEsXG4gIEdlbmVyYXRlUmVzcG9uc2UsXG4gIEdlbmVyYXRpb25CbG9ja2VkRXJyb3IsXG4gIEdlbmVyYXRpb25Db21tb25Db25maWdTY2hlbWEsXG4gIEdlbmVyYXRpb25SZXNwb25zZUVycm9yLFxuICBNZXNzYWdlLFxuICBNZXNzYWdlU2NoZW1hLFxuICBNb2RlbFJlcXVlc3RTY2hlbWEsXG4gIE1vZGVsUmVzcG9uc2VTY2hlbWEsXG4gIFBhcnRTY2hlbWEsXG4gIFJvbGVTY2hlbWEsXG4gIGFzVG9vbCxcbiAgZGVmaW5lUHJvbXB0LFxuICBkZWZpbmVUb29sLFxuICBlbWJlZCxcbiAgZW1iZWRkZXJSZWYsXG4gIGV2YWx1YXRlLFxuICBldmFsdWF0b3JSZWYsXG4gIGdlbmVyYXRlLFxuICBnZW5lcmF0ZVN0cmVhbSxcbiAgaW5kZXgsXG4gIGluZGV4ZXJSZWYsXG4gIG5vcm1hbGl6ZVBhcnQsXG4gIHJlbmRlclByb21wdCxcbiAgcmVyYW5rLFxuICByZXJhbmtlclJlZixcbiAgcmV0cmlldmUsXG4gIHJldHJpZXZlclJlZixcbiAgdGFnQXNQcmVhbWJsZSxcbiAgdG9HZW5lcmF0ZVJlcXVlc3QsXG4gIC4uLnJlcXVpcmUoXCIuL3R5cGVzLmpzXCIpXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar model_exports = {};\n__export(model_exports, {\n  CandidateErrorSchema: () => CandidateErrorSchema,\n  CandidateSchema: () => CandidateSchema,\n  CustomPartSchema: () => CustomPartSchema,\n  DataPartSchema: () => DataPartSchema,\n  GenerateRequestSchema: () => GenerateRequestSchema,\n  GenerateResponseChunkSchema: () => GenerateResponseChunkSchema,\n  GenerateResponseSchema: () => GenerateResponseSchema,\n  GenerationCommonConfigSchema: () => GenerationCommonConfigSchema,\n  GenerationUsageSchema: () => GenerationUsageSchema,\n  MediaPartSchema: () => MediaPartSchema,\n  MessageSchema: () => MessageSchema,\n  ModelInfoSchema: () => ModelInfoSchema,\n  ModelRequestSchema: () => ModelRequestSchema,\n  ModelResponseChunkSchema: () => ModelResponseChunkSchema,\n  ModelResponseSchema: () => ModelResponseSchema,\n  PartSchema: () => PartSchema,\n  RoleSchema: () => RoleSchema,\n  TextPartSchema: () => TextPartSchema,\n  ToolDefinitionSchema: () => ToolDefinitionSchema,\n  ToolRequestPartSchema: () => ToolRequestPartSchema,\n  ToolResponsePartSchema: () => ToolResponsePartSchema,\n  defineModel: () => defineModel,\n  getBasicUsageStats: () => getBasicUsageStats,\n  modelRef: () => modelRef\n});\nmodule.exports = __toCommonJS(model_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_middleware = __webpack_require__(/*! ./model/middleware.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model/middleware.js\");\nconst EmptyPartSchema = import_core.z.object({\n  text: import_core.z.never().optional(),\n  media: import_core.z.never().optional(),\n  toolRequest: import_core.z.never().optional(),\n  toolResponse: import_core.z.never().optional(),\n  data: import_core.z.unknown().optional(),\n  metadata: import_core.z.record(import_core.z.unknown()).optional(),\n  custom: import_core.z.record(import_core.z.unknown()).optional()\n});\nconst TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the message. */\n  text: import_core.z.string()\n});\nconst MediaPartSchema = EmptyPartSchema.extend({\n  media: import_core.z.object({\n    /** The media content type. Inferred from data uri if not provided. */\n    contentType: import_core.z.string().optional(),\n    /** A `data:` or `https:` uri containing the media content.  */\n    url: import_core.z.string()\n  })\n});\nconst ToolRequestPartSchema = EmptyPartSchema.extend({\n  /** A request for a tool to be executed, usually provided by a model. */\n  toolRequest: import_core.z.object({\n    /** The call id or reference for a specific request. */\n    ref: import_core.z.string().optional(),\n    /** The name of the tool to call. */\n    name: import_core.z.string(),\n    /** The input parameters for the tool, usually a JSON object. */\n    input: import_core.z.unknown().optional()\n  })\n});\nconst ToolResponsePartSchema = EmptyPartSchema.extend({\n  /** A provided response to a tool call. */\n  toolResponse: import_core.z.object({\n    /** The call id or reference for a specific request. */\n    ref: import_core.z.string().optional(),\n    /** The name of the tool. */\n    name: import_core.z.string(),\n    /** The output data returned from the tool, usually a JSON object. */\n    output: import_core.z.unknown().optional()\n  })\n});\nconst DataPartSchema = EmptyPartSchema.extend({\n  data: import_core.z.unknown()\n});\nconst CustomPartSchema = EmptyPartSchema.extend({\n  custom: import_core.z.record(import_core.z.any())\n});\nconst PartSchema = import_core.z.union([\n  TextPartSchema,\n  MediaPartSchema,\n  ToolRequestPartSchema,\n  ToolResponsePartSchema,\n  DataPartSchema,\n  CustomPartSchema\n]);\nconst RoleSchema = import_core.z.enum([\"system\", \"user\", \"model\", \"tool\"]);\nconst MessageSchema = import_core.z.object({\n  role: RoleSchema,\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.unknown()).optional()\n});\nconst OutputFormatSchema = import_core.z.enum([\"json\", \"text\", \"media\"]);\nconst ModelInfoSchema = import_core.z.object({\n  /** Acceptable names for this model (e.g. different versions). */\n  versions: import_core.z.array(import_core.z.string()).optional(),\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process historical messages passed with a prompt. */\n    multiturn: import_core.z.boolean().optional(),\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional(),\n    /** Model can perform tool calls. */\n    tools: import_core.z.boolean().optional(),\n    /** Model can accept messages with role \"system\". */\n    systemRole: import_core.z.boolean().optional(),\n    /** Model can output this type of data. */\n    output: import_core.z.array(OutputFormatSchema).optional(),\n    /** Model can natively support document-based context grounding. */\n    context: import_core.z.boolean().optional()\n  }).optional(),\n  /** At which stage of development this model is.\n   * - `featured` models are recommended for general use.\n   * - `stable` models are well-tested and reliable.\n   * - `unstable` models are experimental and may change.\n   * - `legacy` models are no longer recommended for new projects.\n   * - `deprecated` models are deprecated by the provider and may be removed in future versions.\n   */\n  stage: import_core.z.enum([\"featured\", \"stable\", \"unstable\", \"legacy\", \"deprecated\"]).optional()\n});\nconst ToolDefinitionSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string(),\n  inputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema representing the input of the tool.\").nullish(),\n  outputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema describing the output of the tool.\").nullish()\n});\nconst GenerationCommonConfigSchema = import_core.z.object({\n  /** A specific version of a model family, e.g. `gemini-1.0-pro-001` for the `gemini-1.0-pro` family. */\n  version: import_core.z.string().optional(),\n  temperature: import_core.z.number().optional(),\n  maxOutputTokens: import_core.z.number().optional(),\n  topK: import_core.z.number().optional(),\n  topP: import_core.z.number().optional(),\n  stopSequences: import_core.z.array(import_core.z.string()).optional()\n});\nconst OutputConfigSchema = import_core.z.object({\n  format: OutputFormatSchema.optional(),\n  schema: import_core.z.record(import_core.z.any()).optional()\n});\nconst ModelRequestSchema = import_core.z.object({\n  messages: import_core.z.array(MessageSchema),\n  config: import_core.z.any().optional(),\n  tools: import_core.z.array(ToolDefinitionSchema).optional(),\n  output: OutputConfigSchema.optional(),\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional()\n});\nconst GenerateRequestSchema = ModelRequestSchema.extend({\n  /** @deprecated All responses now return a single candidate. This will always be `undefined`. */\n  candidates: import_core.z.number().optional()\n});\nconst GenerationUsageSchema = import_core.z.object({\n  inputTokens: import_core.z.number().optional(),\n  outputTokens: import_core.z.number().optional(),\n  totalTokens: import_core.z.number().optional(),\n  inputCharacters: import_core.z.number().optional(),\n  outputCharacters: import_core.z.number().optional(),\n  inputImages: import_core.z.number().optional(),\n  outputImages: import_core.z.number().optional(),\n  inputVideos: import_core.z.number().optional(),\n  outputVideos: import_core.z.number().optional(),\n  inputAudioFiles: import_core.z.number().optional(),\n  outputAudioFiles: import_core.z.number().optional(),\n  custom: import_core.z.record(import_core.z.number()).optional()\n});\nconst CandidateSchema = import_core.z.object({\n  index: import_core.z.number(),\n  message: MessageSchema,\n  usage: GenerationUsageSchema.optional(),\n  finishReason: import_core.z.enum([\"stop\", \"length\", \"blocked\", \"other\", \"unknown\"]),\n  finishMessage: import_core.z.string().optional(),\n  custom: import_core.z.unknown()\n});\nconst CandidateErrorSchema = import_core.z.object({\n  index: import_core.z.number(),\n  code: import_core.z.enum([\"blocked\", \"other\", \"unknown\"]),\n  message: import_core.z.string().optional()\n});\nconst ModelResponseSchema = import_core.z.object({\n  message: MessageSchema.optional(),\n  finishReason: import_core.z.enum([\"stop\", \"length\", \"blocked\", \"other\", \"unknown\"]),\n  finishMessage: import_core.z.string().optional(),\n  latencyMs: import_core.z.number().optional(),\n  usage: GenerationUsageSchema.optional(),\n  /** @deprecated use `raw` instead */\n  custom: import_core.z.unknown(),\n  raw: import_core.z.unknown(),\n  request: GenerateRequestSchema.optional()\n});\nconst GenerateResponseSchema = ModelResponseSchema.extend({\n  /** @deprecated All responses now return a single candidate. Only the first candidate will be used if supplied. Return `message`, `finishReason`, and `finishMessage` instead. */\n  candidates: import_core.z.array(CandidateSchema).optional(),\n  finishReason: import_core.z.enum([\"stop\", \"length\", \"blocked\", \"other\", \"unknown\"]).optional()\n});\nconst ModelResponseChunkSchema = import_core.z.object({\n  /** The chunk of content to stream right now. */\n  content: import_core.z.array(PartSchema),\n  /** Model-specific extra information attached to this chunk. */\n  custom: import_core.z.unknown().optional(),\n  /** If true, the chunk includes all data from previous chunks. Otherwise, considered to be incremental. */\n  aggregated: import_core.z.boolean().optional()\n});\nconst GenerateResponseChunkSchema = ModelResponseChunkSchema.extend({\n  /** @deprecated The index of the candidate this chunk belongs to. Always 0. */\n  index: import_core.z.number().optional()\n});\nfunction defineModel(registry, options, runner) {\n  var _a;\n  const label = options.label || options.name;\n  const middleware = [\n    ...options.use || [],\n    (0, import_middleware.validateSupport)(options)\n  ];\n  if (!((_a = options == null ? void 0 : options.supports) == null ? void 0 : _a.context)) middleware.push((0, import_middleware.augmentWithContext)());\n  middleware.push((0, import_middleware.conformOutput)());\n  const act = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"model\",\n      name: options.name,\n      description: label,\n      inputSchema: GenerateRequestSchema,\n      outputSchema: GenerateResponseSchema,\n      metadata: {\n        model: {\n          label,\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0,\n          versions: options.versions,\n          supports: options.supports\n        }\n      },\n      use: middleware\n    },\n    (input) => {\n      const startTimeMs = import_node_perf_hooks.performance.now();\n      return runner(input, (0, import_core.getStreamingCallback)()).then((response) => {\n        const timedResponse = __spreadProps(__spreadValues({}, response), {\n          latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n        });\n        return timedResponse;\n      });\n    }\n  );\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction modelRef(options) {\n  const ref = __spreadValues({}, options);\n  ref.withConfig = (cfg) => {\n    return modelRef(__spreadProps(__spreadValues({}, options), {\n      config: cfg\n    }));\n  };\n  ref.withVersion = (version) => {\n    return modelRef(__spreadProps(__spreadValues({}, options), {\n      version\n    }));\n  };\n  return ref;\n}\nfunction getBasicUsageStats(input, response) {\n  const inputCounts = getPartCounts(input.flatMap((md) => md.content));\n  const outputCounts = getPartCounts(\n    Array.isArray(response) ? response.flatMap((c) => c.message.content) : response.content\n  );\n  return {\n    inputCharacters: inputCounts.characters,\n    inputImages: inputCounts.images,\n    inputVideos: inputCounts.videos,\n    inputAudioFiles: inputCounts.audio,\n    outputCharacters: outputCounts.characters,\n    outputImages: outputCounts.images,\n    outputVideos: outputCounts.videos,\n    outputAudioFiles: outputCounts.audio\n  };\n}\nfunction getPartCounts(parts) {\n  return parts.reduce(\n    (counts, part) => {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;\n      const isImage = ((_b = (_a = part.media) == null ? void 0 : _a.contentType) == null ? void 0 : _b.startsWith(\"image\")) || ((_d = (_c = part.media) == null ? void 0 : _c.url) == null ? void 0 : _d.startsWith(\"data:image\"));\n      const isVideo = ((_f = (_e = part.media) == null ? void 0 : _e.contentType) == null ? void 0 : _f.startsWith(\"video\")) || ((_h = (_g = part.media) == null ? void 0 : _g.url) == null ? void 0 : _h.startsWith(\"data:video\"));\n      const isAudio = ((_j = (_i = part.media) == null ? void 0 : _i.contentType) == null ? void 0 : _j.startsWith(\"audio\")) || ((_l = (_k = part.media) == null ? void 0 : _k.url) == null ? void 0 : _l.startsWith(\"data:audio\"));\n      return {\n        characters: counts.characters + (((_m = part.text) == null ? void 0 : _m.length) || 0),\n        images: counts.images + (isImage ? 1 : 0),\n        videos: counts.videos + (isVideo ? 1 : 0),\n        audio: counts.audio + (isAudio ? 1 : 0)\n      };\n    },\n    { characters: 0, images: 0, videos: 0, audio: 0 }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model/middleware.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model/middleware.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar middleware_exports = {};\n__export(middleware_exports, {\n  CONTEXT_PREFACE: () => CONTEXT_PREFACE,\n  augmentWithContext: () => augmentWithContext,\n  conformOutput: () => conformOutput,\n  downloadRequestMedia: () => downloadRequestMedia,\n  simulateSystemPrompt: () => simulateSystemPrompt,\n  validateSupport: () => validateSupport\n});\nmodule.exports = __toCommonJS(middleware_exports);\nvar import_document = __webpack_require__(/*! ../document.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js\");\nfunction downloadRequestMedia(options) {\n  return (req, next) => __async(this, null, function* () {\n    const { default: fetch } = yield Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@genkit-ai\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/index.js\"));\n    const newReq = __spreadProps(__spreadValues({}, req), {\n      messages: yield Promise.all(\n        req.messages.map((message) => __async(this, null, function* () {\n          const content = yield Promise.all(\n            message.content.map((part) => __async(this, null, function* () {\n              if (!part.media || !part.media.url.startsWith(\"http\") || (options == null ? void 0 : options.filter) && !(options == null ? void 0 : options.filter(part))) {\n                return part;\n              }\n              const response = yield fetch(part.media.url, {\n                size: options == null ? void 0 : options.maxBytes\n              });\n              if (response.status !== 200)\n                throw new Error(\n                  `HTTP error downloading media '${part.media.url}': ${yield response.text()}`\n                );\n              const contentType = part.media.contentType || response.headers.get(\"content-type\") || \"\";\n              return {\n                media: {\n                  contentType,\n                  url: `data:${contentType};base64,${Buffer.from(\n                    yield response.arrayBuffer()\n                  ).toString(\"base64\")}`\n                }\n              };\n            }))\n          );\n          return __spreadProps(__spreadValues({}, message), {\n            content\n          });\n        }))\n      )\n    });\n    return next(newReq);\n  });\n}\nfunction validateSupport(options) {\n  const supports = options.supports || {};\n  return (req, next) => __async(this, null, function* () {\n    var _a, _b, _c, _d;\n    function invalid(message) {\n      throw new Error(\n        `Model '${options.name}' does not support ${message}. Request: ${JSON.stringify(\n          req,\n          null,\n          2\n        )}`\n      );\n    }\n    if (supports.media === false && req.messages.some((message) => message.content.some((part) => part.media)))\n      invalid(\"media, but media was provided\");\n    if (supports.tools === false && ((_a = req.tools) == null ? void 0 : _a.length))\n      invalid(\"tool use, but tools were provided\");\n    if (supports.multiturn === false && req.messages.length > 1)\n      invalid(`multiple messages, but ${req.messages.length} were provided`);\n    if (typeof supports.output !== \"undefined\" && ((_b = req.output) == null ? void 0 : _b.format) && !supports.output.includes((_c = req.output) == null ? void 0 : _c.format))\n      invalid(`requested output format '${(_d = req.output) == null ? void 0 : _d.format}'`);\n    return next();\n  });\n}\nfunction lastUserMessage(messages) {\n  for (let i = messages.length - 1; i >= 0; i--) {\n    if (messages[i].role === \"user\") {\n      return messages[i];\n    }\n  }\n}\nfunction conformOutput() {\n  return (req, next) => __async(this, null, function* () {\n    var _a, _b;\n    const lastMessage = lastUserMessage(req.messages);\n    if (!lastMessage) return next(req);\n    const outputPartIndex = lastMessage.content.findIndex(\n      (p) => {\n        var _a2;\n        return ((_a2 = p.metadata) == null ? void 0 : _a2.purpose) === \"output\";\n      }\n    );\n    const outputPart = outputPartIndex >= 0 ? lastMessage.content[outputPartIndex] : void 0;\n    if (!((_a = req.output) == null ? void 0 : _a.schema) || outputPart && !((_b = outputPart == null ? void 0 : outputPart.metadata) == null ? void 0 : _b.pending)) {\n      return next(req);\n    }\n    const instructions = `\n\nOutput should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(req.output.schema)}\n\\`\\`\\`\n`;\n    if (outputPart) {\n      lastMessage.content[outputPartIndex] = __spreadProps(__spreadValues({}, outputPart), {\n        metadata: {\n          purpose: \"output\",\n          source: \"default\"\n        },\n        text: instructions\n      });\n    } else {\n      lastMessage == null ? void 0 : lastMessage.content.push({\n        text: instructions,\n        metadata: { purpose: \"output\", source: \"default\" }\n      });\n    }\n    return next(req);\n  });\n}\nfunction simulateSystemPrompt(options) {\n  const preface = (options == null ? void 0 : options.preface) || \"SYSTEM INSTRUCTIONS:\\n\";\n  const acknowledgement = (options == null ? void 0 : options.acknowledgement) || \"Understood.\";\n  return (req, next) => {\n    const messages = [...req.messages];\n    for (let i = 0; i < messages.length; i++) {\n      if (req.messages[i].role === \"system\") {\n        const systemPrompt = messages[i].content;\n        messages.splice(\n          i,\n          1,\n          { role: \"user\", content: [{ text: preface }, ...systemPrompt] },\n          { role: \"model\", content: [{ text: acknowledgement }] }\n        );\n        break;\n      }\n    }\n    return next(__spreadProps(__spreadValues({}, req), { messages }));\n  };\n}\nconst CONTEXT_PREFACE = \"\\n\\nUse the following information to complete your task:\\n\\n\";\nconst CONTEXT_ITEM_TEMPLATE = (d, index, options) => {\n  var _a, _b;\n  let out = \"- \";\n  if (options == null ? void 0 : options.citationKey) {\n    out += `[${d.metadata[options.citationKey]}]: `;\n  } else if ((options == null ? void 0 : options.citationKey) === void 0) {\n    out += `[${((_a = d.metadata) == null ? void 0 : _a[\"ref\"]) || ((_b = d.metadata) == null ? void 0 : _b[\"id\"]) || index}]: `;\n  }\n  out += d.text + \"\\n\";\n  return out;\n};\nfunction augmentWithContext(options) {\n  const preface = typeof (options == null ? void 0 : options.preface) === \"undefined\" ? CONTEXT_PREFACE : options.preface;\n  const itemTemplate = (options == null ? void 0 : options.itemTemplate) || CONTEXT_ITEM_TEMPLATE;\n  return (req, next) => {\n    var _a, _b, _c;\n    if (!((_a = req.docs) == null ? void 0 : _a.length)) return next(req);\n    const userMessage = lastUserMessage(req.messages);\n    if (!userMessage) return next(req);\n    const contextPartIndex = userMessage == null ? void 0 : userMessage.content.findIndex(\n      (p) => {\n        var _a2;\n        return ((_a2 = p.metadata) == null ? void 0 : _a2.purpose) === \"context\";\n      }\n    );\n    const contextPart = contextPartIndex >= 0 && userMessage.content[contextPartIndex];\n    if (contextPart && !((_b = contextPart.metadata) == null ? void 0 : _b.pending)) {\n      return next(req);\n    }\n    let out = `${preface || \"\"}`;\n    (_c = req.docs) == null ? void 0 : _c.forEach((d, i) => {\n      out += itemTemplate(new import_document.Document(d), i, options);\n    });\n    out += \"\\n\";\n    if (contextPartIndex >= 0) {\n      userMessage.content[contextPartIndex] = __spreadProps(__spreadValues({}, contextPart), {\n        text: out,\n        metadata: { purpose: \"context\" }\n      });\n    } else {\n      userMessage.content.push({ text: out, metadata: { purpose: \"context\" } });\n    }\n    return next(req);\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=middleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/model/middleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/prompt.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/prompt.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar prompt_exports = {};\n__export(prompt_exports, {\n  definePrompt: () => definePrompt,\n  isPrompt: () => isPrompt,\n  renderPrompt: () => renderPrompt\n});\nmodule.exports = __toCommonJS(prompt_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nfunction isPrompt(arg) {\n  var _a, _b;\n  return typeof arg === \"function\" && ((_b = (_a = arg.__action) == null ? void 0 : _a.metadata) == null ? void 0 : _b.type) === \"prompt\";\n}\nfunction definePrompt(registry, config, fn) {\n  const a = (0, import_core.defineAction)(\n    registry,\n    __spreadProps(__spreadValues({}, config), {\n      actionType: \"prompt\",\n      metadata: __spreadProps(__spreadValues({}, config.metadata || { prompt: {} }), { type: \"prompt\" })\n    }),\n    fn\n  );\n  return a;\n}\nfunction renderPrompt(registry, params) {\n  return __async(this, null, function* () {\n    var _a, _b;\n    let prompt;\n    if (typeof params.prompt === \"string\") {\n      prompt = yield registry.lookupAction(`/prompt/${params.prompt}`);\n    } else {\n      prompt = params.prompt;\n    }\n    const rendered = yield prompt(\n      params.input\n    );\n    return {\n      model: params.model,\n      config: __spreadValues(__spreadValues({}, rendered.config || {}), params.config),\n      messages: rendered.messages.slice(0, rendered.messages.length - 1),\n      prompt: rendered.messages[rendered.messages.length - 1].content,\n      docs: params.docs,\n      output: {\n        format: (_a = rendered.output) == null ? void 0 : _a.format,\n        schema: (_b = rendered.output) == null ? void 0 : _b.schema\n      },\n      tools: rendered.tools || []\n    };\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=prompt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL3Byb21wdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsNkRBQTZEO0FBQzNJO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsMEVBQWlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0EsK0NBQStDLHVCQUF1QixZQUFZLEtBQUssZ0JBQWdCO0FBQ3ZHLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsY0FBYztBQUNwRSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUJBQXVCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZG90cHJvbXB0L25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9wcm9tcHQuanM/MjkxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19zcHJlYWRWYWx1ZXMgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcbiAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIGE7XG59O1xudmFyIF9fc3ByZWFkUHJvcHMgPSAoYSwgYikgPT4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG52YXIgcHJvbXB0X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHByb21wdF9leHBvcnRzLCB7XG4gIGRlZmluZVByb21wdDogKCkgPT4gZGVmaW5lUHJvbXB0LFxuICBpc1Byb21wdDogKCkgPT4gaXNQcm9tcHQsXG4gIHJlbmRlclByb21wdDogKCkgPT4gcmVuZGVyUHJvbXB0XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHByb21wdF9leHBvcnRzKTtcbnZhciBpbXBvcnRfY29yZSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmVcIik7XG5mdW5jdGlvbiBpc1Byb21wdChhcmcpIHtcbiAgdmFyIF9hLCBfYjtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09IFwiZnVuY3Rpb25cIiAmJiAoKF9iID0gKF9hID0gYXJnLl9fYWN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2EubWV0YWRhdGEpID09IG51bGwgPyB2b2lkIDAgOiBfYi50eXBlKSA9PT0gXCJwcm9tcHRcIjtcbn1cbmZ1bmN0aW9uIGRlZmluZVByb21wdChyZWdpc3RyeSwgY29uZmlnLCBmbikge1xuICBjb25zdCBhID0gKDAsIGltcG9ydF9jb3JlLmRlZmluZUFjdGlvbikoXG4gICAgcmVnaXN0cnksXG4gICAgX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgY29uZmlnKSwge1xuICAgICAgYWN0aW9uVHlwZTogXCJwcm9tcHRcIixcbiAgICAgIG1ldGFkYXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBjb25maWcubWV0YWRhdGEgfHwgeyBwcm9tcHQ6IHt9IH0pLCB7IHR5cGU6IFwicHJvbXB0XCIgfSlcbiAgICB9KSxcbiAgICBmblxuICApO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIHJlbmRlclByb21wdChyZWdpc3RyeSwgcGFyYW1zKSB7XG4gIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBsZXQgcHJvbXB0O1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLnByb21wdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcHJvbXB0ID0geWllbGQgcmVnaXN0cnkubG9va3VwQWN0aW9uKGAvcHJvbXB0LyR7cGFyYW1zLnByb21wdH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbXB0ID0gcGFyYW1zLnByb21wdDtcbiAgICB9XG4gICAgY29uc3QgcmVuZGVyZWQgPSB5aWVsZCBwcm9tcHQoXG4gICAgICBwYXJhbXMuaW5wdXRcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBtb2RlbDogcGFyYW1zLm1vZGVsLFxuICAgICAgY29uZmlnOiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgcmVuZGVyZWQuY29uZmlnIHx8IHt9KSwgcGFyYW1zLmNvbmZpZyksXG4gICAgICBtZXNzYWdlczogcmVuZGVyZWQubWVzc2FnZXMuc2xpY2UoMCwgcmVuZGVyZWQubWVzc2FnZXMubGVuZ3RoIC0gMSksXG4gICAgICBwcm9tcHQ6IHJlbmRlcmVkLm1lc3NhZ2VzW3JlbmRlcmVkLm1lc3NhZ2VzLmxlbmd0aCAtIDFdLmNvbnRlbnQsXG4gICAgICBkb2NzOiBwYXJhbXMuZG9jcyxcbiAgICAgIG91dHB1dDoge1xuICAgICAgICBmb3JtYXQ6IChfYSA9IHJlbmRlcmVkLm91dHB1dCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZvcm1hdCxcbiAgICAgICAgc2NoZW1hOiAoX2IgPSByZW5kZXJlZC5vdXRwdXQpID09IG51bGwgPyB2b2lkIDAgOiBfYi5zY2hlbWFcbiAgICAgIH0sXG4gICAgICB0b29sczogcmVuZGVyZWQudG9vbHMgfHwgW11cbiAgICB9O1xuICB9KTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBkZWZpbmVQcm9tcHQsXG4gIGlzUHJvbXB0LFxuICByZW5kZXJQcm9tcHRcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbXB0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/prompt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/reranker.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/reranker.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar reranker_exports = {};\n__export(reranker_exports, {\n  CommonRerankerOptionsSchema: () => CommonRerankerOptionsSchema,\n  RankedDocument: () => RankedDocument,\n  RankedDocumentDataSchema: () => RankedDocumentDataSchema,\n  RerankerInfoSchema: () => RerankerInfoSchema,\n  defineReranker: () => defineReranker,\n  rerank: () => rerank,\n  rerankerRef: () => rerankerRef\n});\nmodule.exports = __toCommonJS(reranker_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/retriever.js\");\nconst RankedDocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(import_document.PartSchema),\n  metadata: import_core.z.object({\n    score: import_core.z.number()\n    // Enforces that 'score' must be a number\n  }).passthrough()\n  // Allows other properties in 'metadata' with any type\n});\nclass RankedDocument extends import_retriever.Document {\n  constructor(data) {\n    super(data);\n    this.content = data.content;\n    this.metadata = data.metadata;\n  }\n  /**\n   * Returns the score of the document.\n   * @returns The score of the document.\n   */\n  score() {\n    return this.metadata.score;\n  }\n}\nconst RerankerRequestSchema = import_core.z.object({\n  query: import_retriever.DocumentDataSchema,\n  documents: import_core.z.array(import_retriever.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RerankerResponseSchema = import_core.z.object({\n  documents: import_core.z.array(RankedDocumentDataSchema)\n});\nconst RerankerInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction rerankerWithMetadata(reranker, configSchema) {\n  const withMeta = reranker;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineReranker(registry, options, runner) {\n  const reranker = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"reranker\",\n      name: options.name,\n      inputSchema: options.configSchema ? RerankerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RerankerRequestSchema,\n      outputSchema: RerankerResponseSchema,\n      metadata: {\n        type: \"reranker\",\n        info: options.info\n      }\n    },\n    (i) => runner(\n      new import_retriever.Document(i.query),\n      i.documents.map((d) => new import_retriever.Document(d)),\n      i.options\n    )\n  );\n  const rwm = rerankerWithMetadata(\n    reranker,\n    options.configSchema\n  );\n  return rwm;\n}\nfunction rerank(registry, params) {\n  return __async(this, null, function* () {\n    let reranker;\n    if (typeof params.reranker === \"string\") {\n      reranker = yield registry.lookupAction(`/reranker/${params.reranker}`);\n    } else if (Object.hasOwnProperty.call(params.reranker, \"info\")) {\n      reranker = yield registry.lookupAction(`/reranker/${params.reranker.name}`);\n    } else {\n      reranker = params.reranker;\n    }\n    if (!reranker) {\n      throw new Error(\"Unable to resolve the reranker\");\n    }\n    const response = yield reranker({\n      query: typeof params.query === \"string\" ? import_retriever.Document.fromText(params.query) : params.query,\n      documents: params.documents,\n      options: params.options\n    });\n    return response.documents.map((d) => new RankedDocument(d));\n  });\n}\nconst CommonRerankerOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to rerank\").optional()\n});\nfunction rerankerRef(options) {\n  return __spreadValues({}, options);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reranker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/reranker.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/retriever.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/retriever.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar retriever_exports = {};\n__export(retriever_exports, {\n  CommonRetrieverOptionsSchema: () => CommonRetrieverOptionsSchema,\n  Document: () => import_document2.Document,\n  DocumentDataSchema: () => import_document2.DocumentDataSchema,\n  IndexerInfoSchema: () => IndexerInfoSchema,\n  RetrieverInfoSchema: () => RetrieverInfoSchema,\n  defineIndexer: () => defineIndexer,\n  defineRetriever: () => defineRetriever,\n  defineSimpleRetriever: () => defineSimpleRetriever,\n  index: () => index,\n  indexerRef: () => indexerRef,\n  retrieve: () => retrieve,\n  retrieverRef: () => retrieverRef\n});\nmodule.exports = __toCommonJS(retriever_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_document2 = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/document.js\");\nconst RetrieverRequestSchema = import_core.z.object({\n  query: import_document.DocumentDataSchema,\n  options: import_core.z.any().optional()\n});\nconst RetrieverResponseSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema)\n  // TODO: stats, etc.\n});\nconst IndexerRequestSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RetrieverInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction retrieverWithMetadata(retriever, configSchema) {\n  const withMeta = retriever;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction indexerWithMetadata(indexer, configSchema) {\n  const withMeta = indexer;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineRetriever(registry, options, runner) {\n  const retriever = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"retriever\",\n      name: options.name,\n      inputSchema: options.configSchema ? RetrieverRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RetrieverRequestSchema,\n      outputSchema: RetrieverResponseSchema,\n      metadata: {\n        type: \"retriever\",\n        info: options.info\n      }\n    },\n    (i) => runner(new import_document.Document(i.query), i.options)\n  );\n  const rwm = retrieverWithMetadata(\n    retriever,\n    options.configSchema\n  );\n  return rwm;\n}\nfunction defineIndexer(registry, options, runner) {\n  const indexer = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"indexer\",\n      name: options.name,\n      inputSchema: options.configSchema ? IndexerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : IndexerRequestSchema,\n      outputSchema: import_core.z.void(),\n      metadata: {\n        type: \"indexer\",\n        embedderInfo: options.embedderInfo\n      }\n    },\n    (i) => runner(\n      i.documents.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const iwm = indexerWithMetadata(\n    indexer,\n    options.configSchema\n  );\n  return iwm;\n}\nfunction retrieve(registry, params) {\n  return __async(this, null, function* () {\n    let retriever;\n    if (typeof params.retriever === \"string\") {\n      retriever = yield registry.lookupAction(`/retriever/${params.retriever}`);\n    } else if (Object.hasOwnProperty.call(params.retriever, \"info\")) {\n      retriever = yield registry.lookupAction(\n        `/retriever/${params.retriever.name}`\n      );\n    } else {\n      retriever = params.retriever;\n    }\n    if (!retriever) {\n      throw new Error(\"Unable to resolve the retriever\");\n    }\n    const response = yield retriever({\n      query: typeof params.query === \"string\" ? import_document.Document.fromText(params.query) : params.query,\n      options: params.options\n    });\n    return response.documents.map((d) => new import_document.Document(d));\n  });\n}\nfunction index(registry, params) {\n  return __async(this, null, function* () {\n    let indexer;\n    if (typeof params.indexer === \"string\") {\n      indexer = yield registry.lookupAction(`/indexer/${params.indexer}`);\n    } else if (Object.hasOwnProperty.call(params.indexer, \"info\")) {\n      indexer = yield registry.lookupAction(`/indexer/${params.indexer.name}`);\n    } else {\n      indexer = params.indexer;\n    }\n    if (!indexer) {\n      throw new Error(\"Unable to utilize the provided indexer\");\n    }\n    return yield indexer({\n      documents: params.documents,\n      options: params.options\n    });\n  });\n}\nconst CommonRetrieverOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to retrieve\").optional()\n});\nfunction retrieverRef(options) {\n  return __spreadValues({}, options);\n}\nconst IndexerInfoSchema = RetrieverInfoSchema;\nfunction indexerRef(options) {\n  return __spreadValues({}, options);\n}\nfunction itemToDocument(item, options) {\n  if (!item)\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Items returned from simple retriever must be non-null.`\n    });\n  if (typeof item === \"string\") return import_document.Document.fromText(item);\n  if (typeof options.content === \"function\") {\n    const transformed = options.content(item);\n    return typeof transformed === \"string\" ? import_document.Document.fromText(transformed) : new import_document.Document({ content: transformed });\n  }\n  if (typeof options.content === \"string\" && typeof item === \"object\")\n    return import_document.Document.fromText(item[options.content]);\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Cannot convert item to document without content option. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction itemToMetadata(item, options) {\n  if (typeof item === \"string\") return void 0;\n  if (Array.isArray(options.metadata) && typeof item === \"object\") {\n    const out = {};\n    options.metadata.forEach((key) => out[key] = item[key]);\n  }\n  if (typeof options.metadata === \"function\") return options.metadata(item);\n  if (!options.metadata && typeof item === \"object\") {\n    const out = __spreadValues({}, item);\n    if (typeof options.content === \"string\") delete out[options.content];\n    return out;\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unable to extract metadata from item with supplied options. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction defineSimpleRetriever(registry, options, handler) {\n  return defineRetriever(\n    registry,\n    {\n      name: options.name,\n      configSchema: options.configSchema\n    },\n    (query, config) => __async(this, null, function* () {\n      const result = yield handler(query, config);\n      return {\n        documents: result.map((item) => {\n          const doc = itemToDocument(item, options);\n          if (typeof item !== \"string\")\n            doc.metadata = itemToMetadata(item, options);\n          return doc;\n        })\n      };\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=retriever.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/retriever.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/tool.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/tool.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar tool_exports = {};\n__export(tool_exports, {\n  asTool: () => asTool,\n  defineTool: () => defineTool,\n  lookupToolByName: () => lookupToolByName,\n  resolveTools: () => resolveTools,\n  toToolDefinition: () => toToolDefinition\n});\nmodule.exports = __toCommonJS(tool_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(rsc)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nfunction asTool(action) {\n  var _a, _b;\n  if (((_b = (_a = action.__action) == null ? void 0 : _a.metadata) == null ? void 0 : _b.type) === \"tool\") {\n    return action;\n  }\n  const fn = (input) => {\n    (0, import_tracing.setCustomMetadataAttributes)({ subtype: \"tool\" });\n    return action(input);\n  };\n  fn.__action = __spreadProps(__spreadValues({}, action.__action), {\n    metadata: __spreadProps(__spreadValues({}, action.__action.metadata), { type: \"tool\" })\n  });\n  return fn;\n}\nfunction resolveTools(_0) {\n  return __async(this, arguments, function* (registry, tools = []) {\n    return yield Promise.all(\n      tools.map((ref) => __async(this, null, function* () {\n        if (typeof ref === \"string\") {\n          return yield lookupToolByName(registry, ref);\n        } else if (ref.__action) {\n          return asTool(ref);\n        } else if (typeof ref.asTool === \"function\") {\n          return ref.asTool();\n        } else if (ref.name) {\n          return yield lookupToolByName(registry, ref.name);\n        }\n        throw new Error(\"Tools must be strings, tool definitions, or actions.\");\n      }))\n    );\n  });\n}\nfunction lookupToolByName(registry, name) {\n  return __async(this, null, function* () {\n    let tool = (yield registry.lookupAction(name)) || (yield registry.lookupAction(`/tool/${name}`)) || (yield registry.lookupAction(`/prompt/${name}`));\n    if (!tool) {\n      throw new Error(`Tool ${name} not found`);\n    }\n    return tool;\n  });\n}\nfunction toToolDefinition(tool) {\n  var _a, _b;\n  return {\n    name: tool.__action.name,\n    description: tool.__action.description || \"\",\n    outputSchema: (0, import_schema.toJsonSchema)({\n      schema: (_a = tool.__action.outputSchema) != null ? _a : import_core.z.void(),\n      jsonSchema: tool.__action.outputJsonSchema\n    }),\n    inputSchema: (0, import_schema.toJsonSchema)({\n      schema: (_b = tool.__action.inputSchema) != null ? _b : import_core.z.void(),\n      jsonSchema: tool.__action.inputJsonSchema\n    })\n  };\n}\nfunction defineTool(registry, config, fn) {\n  const a = (0, import_core.defineAction)(\n    registry,\n    __spreadProps(__spreadValues({}, config), {\n      actionType: \"tool\",\n      metadata: __spreadProps(__spreadValues({}, config.metadata || {}), { type: \"tool\" })\n    }),\n    (i) => fn(i)\n  );\n  return a;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/tool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/types.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/types.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  CommonLlmOptions: () => CommonLlmOptions,\n  LlmResponseSchema: () => LlmResponseSchema,\n  LlmStatsSchema: () => LlmStatsSchema,\n  ModelIdSchema: () => ModelIdSchema,\n  ToolCallSchema: () => ToolCallSchema,\n  ToolSchema: () => ToolSchema,\n  toToolWireFormat: () => toToolWireFormat\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(rsc)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\nconst ModelIdSchema = import_core.z.object({\n  modelProvider: import_core.z.string().readonly(),\n  modelName: import_core.z.string().readonly()\n});\nconst LlmStatsSchema = import_core.z.object({\n  latencyMs: import_core.z.number().optional(),\n  inputTokenCount: import_core.z.number().optional(),\n  outputTokenCount: import_core.z.number().optional()\n});\nconst ToolSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string().optional(),\n  schema: import_core.z.any()\n});\nconst ToolCallSchema = import_core.z.object({\n  toolName: import_core.z.string(),\n  arguments: import_core.z.any()\n});\nconst LlmResponseSchema = import_core.z.object({\n  completion: import_core.z.string(),\n  toolCalls: import_core.z.array(ToolCallSchema).optional(),\n  stats: LlmStatsSchema\n});\nfunction toToolWireFormat(actions) {\n  if (!actions) return void 0;\n  return actions.map((a) => {\n    return {\n      name: a.__action.name,\n      description: a.__action.description,\n      schema: {\n        input: (0, import_schema.toJsonSchema)({\n          schema: a.__action.inputSchema,\n          jsonSchema: a.__action.inputJsonSchema\n        }),\n        output: (0, import_schema.toJsonSchema)({\n          schema: a.__action.outputSchema,\n          jsonSchema: a.__action.outputJsonSchema\n        })\n      }\n    };\n  });\n}\nconst CommonLlmOptions = import_core.z.object({\n  temperature: import_core.z.number().optional(),\n  topK: import_core.z.number().optional(),\n  topP: import_core.z.number().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsMEVBQWlCO0FBQzNDLG9CQUFvQixtQkFBTyxDQUFDLGtGQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxNQUFNLENBUUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZG90cHJvbXB0L25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi90eXBlcy5qcz9mMzEzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0eXBlc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh0eXBlc19leHBvcnRzLCB7XG4gIENvbW1vbkxsbU9wdGlvbnM6ICgpID0+IENvbW1vbkxsbU9wdGlvbnMsXG4gIExsbVJlc3BvbnNlU2NoZW1hOiAoKSA9PiBMbG1SZXNwb25zZVNjaGVtYSxcbiAgTGxtU3RhdHNTY2hlbWE6ICgpID0+IExsbVN0YXRzU2NoZW1hLFxuICBNb2RlbElkU2NoZW1hOiAoKSA9PiBNb2RlbElkU2NoZW1hLFxuICBUb29sQ2FsbFNjaGVtYTogKCkgPT4gVG9vbENhbGxTY2hlbWEsXG4gIFRvb2xTY2hlbWE6ICgpID0+IFRvb2xTY2hlbWEsXG4gIHRvVG9vbFdpcmVGb3JtYXQ6ICgpID0+IHRvVG9vbFdpcmVGb3JtYXRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModHlwZXNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xudmFyIGltcG9ydF9zY2hlbWEgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlL3NjaGVtYVwiKTtcbmNvbnN0IE1vZGVsSWRTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIG1vZGVsUHJvdmlkZXI6IGltcG9ydF9jb3JlLnouc3RyaW5nKCkucmVhZG9ubHkoKSxcbiAgbW9kZWxOYW1lOiBpbXBvcnRfY29yZS56LnN0cmluZygpLnJlYWRvbmx5KClcbn0pO1xuY29uc3QgTGxtU3RhdHNTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIGxhdGVuY3lNczogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICBpbnB1dFRva2VuQ291bnQ6IGltcG9ydF9jb3JlLnoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgb3V0cHV0VG9rZW5Db3VudDogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRvb2xTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIG5hbWU6IGltcG9ydF9jb3JlLnouc3RyaW5nKCksXG4gIGRlc2NyaXB0aW9uOiBpbXBvcnRfY29yZS56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHNjaGVtYTogaW1wb3J0X2NvcmUuei5hbnkoKVxufSk7XG5jb25zdCBUb29sQ2FsbFNjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgdG9vbE5hbWU6IGltcG9ydF9jb3JlLnouc3RyaW5nKCksXG4gIGFyZ3VtZW50czogaW1wb3J0X2NvcmUuei5hbnkoKVxufSk7XG5jb25zdCBMbG1SZXNwb25zZVNjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgY29tcGxldGlvbjogaW1wb3J0X2NvcmUuei5zdHJpbmcoKSxcbiAgdG9vbENhbGxzOiBpbXBvcnRfY29yZS56LmFycmF5KFRvb2xDYWxsU2NoZW1hKS5vcHRpb25hbCgpLFxuICBzdGF0czogTGxtU3RhdHNTY2hlbWFcbn0pO1xuZnVuY3Rpb24gdG9Ub29sV2lyZUZvcm1hdChhY3Rpb25zKSB7XG4gIGlmICghYWN0aW9ucykgcmV0dXJuIHZvaWQgMDtcbiAgcmV0dXJuIGFjdGlvbnMubWFwKChhKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGEuX19hY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBhLl9fYWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgc2NoZW1hOiB7XG4gICAgICAgIGlucHV0OiAoMCwgaW1wb3J0X3NjaGVtYS50b0pzb25TY2hlbWEpKHtcbiAgICAgICAgICBzY2hlbWE6IGEuX19hY3Rpb24uaW5wdXRTY2hlbWEsXG4gICAgICAgICAganNvblNjaGVtYTogYS5fX2FjdGlvbi5pbnB1dEpzb25TY2hlbWFcbiAgICAgICAgfSksXG4gICAgICAgIG91dHB1dDogKDAsIGltcG9ydF9zY2hlbWEudG9Kc29uU2NoZW1hKSh7XG4gICAgICAgICAgc2NoZW1hOiBhLl9fYWN0aW9uLm91dHB1dFNjaGVtYSxcbiAgICAgICAgICBqc29uU2NoZW1hOiBhLl9fYWN0aW9uLm91dHB1dEpzb25TY2hlbWFcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cbmNvbnN0IENvbW1vbkxsbU9wdGlvbnMgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIHRlbXBlcmF0dXJlOiBpbXBvcnRfY29yZS56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIHRvcEs6IGltcG9ydF9jb3JlLnoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgdG9wUDogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBDb21tb25MbG1PcHRpb25zLFxuICBMbG1SZXNwb25zZVNjaGVtYSxcbiAgTGxtU3RhdHNTY2hlbWEsXG4gIE1vZGVsSWRTY2hlbWEsXG4gIFRvb2xDYWxsU2NoZW1hLFxuICBUb29sU2NoZW1hLFxuICB0b1Rvb2xXaXJlRm9ybWF0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/@genkit-ai/ai/lib/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/googleai/lib/embedder.js":
/*!**********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/embedder.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar embedder_exports = {};\n__export(embedder_exports, {\n  GeminiEmbeddingConfigSchema: () => GeminiEmbeddingConfigSchema,\n  SUPPORTED_MODELS: () => SUPPORTED_MODELS,\n  TaskTypeSchema: () => TaskTypeSchema,\n  defineGoogleAIEmbedder: () => defineGoogleAIEmbedder,\n  textEmbeddingGecko001: () => textEmbeddingGecko001\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(rsc)/./node_modules/genkit/lib/index.js\");\nvar import_embedder = __webpack_require__(/*! genkit/embedder */ \"(rsc)/./node_modules/genkit/lib/embedder.js\");\nconst TaskTypeSchema = import_genkit.z.enum([\n  \"RETRIEVAL_DOCUMENT\",\n  \"RETRIEVAL_QUERY\",\n  \"SEMANTIC_SIMILARITY\",\n  \"CLASSIFICATION\",\n  \"CLUSTERING\"\n]);\nconst GeminiEmbeddingConfigSchema = import_genkit.z.object({\n  /**\n   * The `task_type` parameter is defined as the intended downstream application to help the model\n   * produce better quality embeddings.\n   **/\n  taskType: TaskTypeSchema.optional(),\n  title: import_genkit.z.string().optional(),\n  version: import_genkit.z.string().optional()\n});\nconst textEmbeddingGecko001 = (0, import_embedder.embedderRef)({\n  name: \"googleai/embedding-001\",\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: \"Google Gen AI - Text Embedding Gecko (Legacy)\",\n    supports: {\n      input: [\"text\"]\n    }\n  }\n});\nconst SUPPORTED_MODELS = {\n  \"embedding-001\": textEmbeddingGecko001\n};\nfunction defineGoogleAIEmbedder(ai, name, options) {\n  var _a;\n  let apiKey = (options == null ? void 0 : options.apiKey) || process.env.GOOGLE_GENAI_API_KEY || process.env.GOOGLE_API_KEY;\n  if (!apiKey)\n    throw new Error(\n      \"Please pass in the API key or set either GOOGLE_GENAI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://firebase.google.com/docs/genkit/plugins/google-genai\"\n    );\n  const embedder = (_a = SUPPORTED_MODELS[name]) != null ? _a : (0, import_embedder.embedderRef)({\n    name,\n    configSchema: GeminiEmbeddingConfigSchema,\n    info: {\n      dimensions: 768,\n      label: `Google AI - ${name}`,\n      supports: {\n        input: [\"text\"]\n      }\n    }\n  });\n  const apiModelName = embedder.name.startsWith(\"googleai/\") ? embedder.name.substring(\"googleai/\".length) : embedder.name;\n  return ai.defineEmbedder(\n    {\n      name: embedder.name,\n      configSchema: GeminiEmbeddingConfigSchema,\n      info: embedder.info\n    },\n    (input, options2) => __async(this, null, function* () {\n      var _a2;\n      const client = new import_generative_ai.GoogleGenerativeAI(apiKey).getGenerativeModel({\n        model: (options2 == null ? void 0 : options2.version) || ((_a2 = embedder.config) == null ? void 0 : _a2.version) || embedder.version || apiModelName\n      });\n      const embeddings = yield Promise.all(\n        input.map((doc) => __async(this, null, function* () {\n          const response = yield client.embedContent({\n            taskType: options2 == null ? void 0 : options2.taskType,\n            title: options2 == null ? void 0 : options2.title,\n            content: {\n              role: \"\",\n              parts: [{ text: doc.text }]\n            }\n          });\n          const values = response.embedding.values;\n          return { embedding: values };\n        }))\n      );\n      return { embeddings };\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/googleai/lib/embedder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/googleai/lib/gemini.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/gemini.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => {\n  return (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __forAwait = (obj, it, method) => (it = obj[__knownSymbol(\"asyncIterator\")]) ? it.call(obj) : (obj = obj[__knownSymbol(\"iterator\")](), it = {}, method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method(\"next\"), method(\"return\"), it);\nvar gemini_exports = {};\n__export(gemini_exports, {\n  GeminiConfigSchema: () => GeminiConfigSchema,\n  SUPPORTED_GEMINI_MODELS: () => SUPPORTED_GEMINI_MODELS,\n  SUPPORTED_V15_MODELS: () => SUPPORTED_V15_MODELS,\n  SUPPORTED_V1_MODELS: () => SUPPORTED_V1_MODELS,\n  defineGoogleAIModel: () => defineGoogleAIModel,\n  fromGeminiCandidate: () => fromGeminiCandidate,\n  gemini10Pro: () => gemini10Pro,\n  gemini15Flash: () => gemini15Flash,\n  gemini15Flash8b: () => gemini15Flash8b,\n  gemini15Pro: () => gemini15Pro,\n  toGeminiMessage: () => toGeminiMessage,\n  toGeminiSystemInstruction: () => toGeminiSystemInstruction\n});\nmodule.exports = __toCommonJS(gemini_exports);\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(rsc)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(rsc)/./node_modules/genkit/lib/model.js\");\nvar import_middleware = __webpack_require__(/*! genkit/model/middleware */ \"(rsc)/./node_modules/genkit/lib/middleware.js\");\nvar import_process = __toESM(__webpack_require__(/*! process */ \"process\"));\nconst SafetySettingsSchema = import_genkit.z.object({\n  category: import_genkit.z.enum([\n    \"HARM_CATEGORY_UNSPECIFIED\",\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    \"HARM_CATEGORY_HARASSMENT\",\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\"\n  ]),\n  threshold: import_genkit.z.enum([\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\"\n  ])\n});\nconst GeminiConfigSchema = import_model.GenerationCommonConfigSchema.extend({\n  safetySettings: import_genkit.z.array(SafetySettingsSchema).optional(),\n  codeExecution: import_genkit.z.union([import_genkit.z.boolean(), import_genkit.z.object({}).strict()]).optional()\n});\nconst gemini10Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.0-pro\",\n  info: {\n    label: \"Google AI - Gemini Pro\",\n    versions: [\"gemini-pro\", \"gemini-1.0-pro-latest\", \"gemini-1.0-pro-001\"],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      systemRole: true\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-pro\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Pro\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n      output: [\"text\", \"json\"]\n    },\n    versions: [\n      \"gemini-1.5-pro-latest\",\n      \"gemini-1.5-pro-001\",\n      \"gemini-1.5-pro-002\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n      output: [\"text\", \"json\"]\n    },\n    versions: [\n      \"gemini-1.5-flash-latest\",\n      \"gemini-1.5-flash-001\",\n      \"gemini-1.5-flash-002\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash8b = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash-8b\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n      output: [\"text\", \"json\"]\n    },\n    versions: [\"gemini-1.5-flash-8b-latest\", \"gemini-1.5-flash-8b-001\"]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst SUPPORTED_V1_MODELS = {\n  \"gemini-1.0-pro\": gemini10Pro\n};\nconst SUPPORTED_V15_MODELS = {\n  \"gemini-1.5-pro\": gemini15Pro,\n  \"gemini-1.5-flash\": gemini15Flash,\n  \"gemini-1.5-flash-8b\": gemini15Flash8b\n};\nconst SUPPORTED_GEMINI_MODELS = __spreadValues(__spreadValues({}, SUPPORTED_V1_MODELS), SUPPORTED_V15_MODELS);\nfunction toGeminiRole(role, model) {\n  switch (role) {\n    case \"user\":\n      return \"user\";\n    case \"model\":\n      return \"model\";\n    case \"system\":\n      if (model && SUPPORTED_V15_MODELS[model.name]) {\n        throw new Error(\n          \"system role is only supported for a single message in the first position\"\n        );\n      } else {\n        throw new Error(\"system role is not supported\");\n      }\n    case \"tool\":\n      return \"function\";\n    default:\n      return \"user\";\n  }\n}\nfunction convertSchemaProperty(property) {\n  if (!property || !property.type) {\n    return null;\n  }\n  if (property.type === \"object\") {\n    const nestedProperties = {};\n    Object.keys(property.properties).forEach((key) => {\n      nestedProperties[key] = convertSchemaProperty(property.properties[key]);\n    });\n    return {\n      type: import_generative_ai.FunctionDeclarationSchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required\n    };\n  } else if (property.type === \"array\") {\n    return {\n      type: import_generative_ai.FunctionDeclarationSchemaType.ARRAY,\n      items: convertSchemaProperty(property.items)\n    };\n  } else {\n    return {\n      type: import_generative_ai.FunctionDeclarationSchemaType[property.type.toUpperCase()]\n    };\n  }\n}\nfunction toGeminiTool(tool) {\n  const declaration = {\n    name: tool.name.replace(/\\//g, \"__\"),\n    // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: convertSchemaProperty(tool.inputSchema)\n  };\n  return declaration;\n}\nfunction toInlineData(part) {\n  const dataUrl = part.media.url;\n  const b64Data = dataUrl.substring(dataUrl.indexOf(\",\") + 1);\n  const contentType = part.media.contentType || dataUrl.substring(dataUrl.indexOf(\":\") + 1, dataUrl.indexOf(\";\"));\n  return { inlineData: { mimeType: contentType, data: b64Data } };\n}\nfunction toFileData(part) {\n  if (!part.media.contentType)\n    throw new Error(\n      \"Must supply a `contentType` when sending File URIs to Gemini.\"\n    );\n  return {\n    fileData: { mimeType: part.media.contentType, fileUri: part.media.url }\n  };\n}\nfunction fromInlineData(inlinePart) {\n  if (!inlinePart.inlineData || !inlinePart.inlineData.hasOwnProperty(\"mimeType\") || !inlinePart.inlineData.hasOwnProperty(\"data\")) {\n    throw new Error(\"Invalid InlineDataPart: missing required properties\");\n  }\n  const { mimeType, data } = inlinePart.inlineData;\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType\n    }\n  };\n}\nfunction toFunctionCall(part) {\n  var _a;\n  if (!((_a = part == null ? void 0 : part.toolRequest) == null ? void 0 : _a.input)) {\n    throw Error(\"Invalid ToolRequestPart: input was missing.\");\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input\n    }\n  };\n}\nfunction fromFunctionCall(part) {\n  if (!part.functionCall) {\n    throw Error(\"Invalid FunctionCallPart\");\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args\n    }\n  };\n}\nfunction toFunctionResponse(part) {\n  var _a;\n  if (!((_a = part == null ? void 0 : part.toolResponse) == null ? void 0 : _a.output)) {\n    throw Error(\"Invalid ToolResponsePart: output was missing.\");\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output\n      }\n    }\n  };\n}\nfunction fromFunctionResponse(part) {\n  if (!part.functionResponse) {\n    throw new Error(\"Invalid FunctionResponsePart.\");\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, \"/\"),\n      // restore slashes\n      output: part.functionResponse.response\n    }\n  };\n}\nfunction fromExecutableCode(part) {\n  if (!part.executableCode) {\n    throw new Error(\"Invalid GeminiPart: missing executableCode\");\n  }\n  return {\n    custom: {\n      executableCode: {\n        language: part.executableCode.language,\n        code: part.executableCode.code\n      }\n    }\n  };\n}\nfunction fromCodeExecutionResult(part) {\n  if (!part.codeExecutionResult) {\n    throw new Error(\"Invalid GeminiPart: missing codeExecutionResult\");\n  }\n  return {\n    custom: {\n      codeExecutionResult: {\n        outcome: part.codeExecutionResult.outcome,\n        output: part.codeExecutionResult.output\n      }\n    }\n  };\n}\nfunction toCustomPart(part) {\n  if (!part.custom) {\n    throw new Error(\"Invalid GeminiPart: missing custom\");\n  }\n  if (part.custom.codeExecutionResult) {\n    return { codeExecutionResult: part.custom.codeExecutionResult };\n  }\n  if (part.custom.executableCode) {\n    return { executableCode: part.custom.executableCode };\n  }\n  throw new Error(\"Unsupported Custom Part type\");\n}\nfunction toGeminiPart(part) {\n  if (part.text !== void 0)\n    return { text: part.text };\n  if (part.media) {\n    if (part.media.url.startsWith(\"data:\"))\n      return toInlineData(part);\n    return toFileData(part);\n  }\n  if (part.toolRequest)\n    return toFunctionCall(part);\n  if (part.toolResponse)\n    return toFunctionResponse(part);\n  if (part.custom)\n    return toCustomPart(part);\n  throw new Error(\"Unsupported Part type\" + JSON.stringify(part));\n}\nfunction fromGeminiPart(part, jsonMode) {\n  if (jsonMode && part.text !== void 0) {\n    return { data: JSON.parse(part.text) };\n  }\n  if (part.text !== void 0)\n    return { text: part.text };\n  if (part.inlineData)\n    return fromInlineData(part);\n  if (part.functionCall)\n    return fromFunctionCall(part);\n  if (part.functionResponse)\n    return fromFunctionResponse(part);\n  if (part.executableCode)\n    return fromExecutableCode(part);\n  if (part.codeExecutionResult)\n    return fromCodeExecutionResult(part);\n  throw new Error(\"Unsupported GeminiPart type\");\n}\nfunction toGeminiMessage(message, model) {\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: message.content.map(toGeminiPart)\n  };\n}\nfunction toGeminiSystemInstruction(message) {\n  return {\n    role: \"user\",\n    parts: message.content.map(toGeminiPart)\n  };\n}\nfunction fromGeminiFinishReason(reason) {\n  if (!reason)\n    return \"unknown\";\n  switch (reason) {\n    case \"STOP\":\n      return \"stop\";\n    case \"MAX_TOKENS\":\n      return \"length\";\n    case \"SAFETY\":\n    case \"RECITATION\":\n      return \"blocked\";\n    default:\n      return \"unknown\";\n  }\n}\nfunction fromGeminiCandidate(candidate, jsonMode = false) {\n  var _a;\n  return {\n    index: candidate.index || 0,\n    // reasonable default?\n    message: {\n      role: \"model\",\n      content: (((_a = candidate.content) == null ? void 0 : _a.parts) || []).map(\n        (part) => fromGeminiPart(part, jsonMode)\n      )\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata\n    }\n  };\n}\nfunction defineGoogleAIModel(ai, name, apiKey, apiVersion, baseUrl, info, defaultConfig) {\n  var _a, _b, _c;\n  if (!apiKey) {\n    apiKey = import_process.default.env.GOOGLE_GENAI_API_KEY || import_process.default.env.GOOGLE_API_KEY;\n  }\n  if (!apiKey) {\n    throw new Error(\n      \"Please pass in the API key or set the GOOGLE_GENAI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://firebase.google.com/docs/genkit/plugins/google-genai\"\n    );\n  }\n  const apiModelName = name.startsWith(\"googleai/\") ? name.substring(\"googleai/\".length) : name;\n  const model = (_a = SUPPORTED_GEMINI_MODELS[name]) != null ? _a : (0, import_model.modelRef)({\n    name,\n    info: __spreadValues({\n      label: `Google AI - ${apiModelName}`,\n      supports: {\n        multiturn: true,\n        media: true,\n        tools: true,\n        systemRole: true,\n        output: [\"text\", \"json\"]\n      }\n    }, info),\n    configSchema: GeminiConfigSchema\n  });\n  const middleware = [];\n  if (SUPPORTED_V1_MODELS[name]) {\n    middleware.push((0, import_middleware.simulateSystemPrompt)());\n  }\n  if ((_c = (_b = model.info) == null ? void 0 : _b.supports) == null ? void 0 : _c.media) {\n    middleware.push(\n      (0, import_middleware.downloadRequestMedia)({\n        maxBytes: 1024 * 1024 * 10,\n        // don't downlaod files that have been uploaded using the Files API\n        filter: (part) => !part.media.url.startsWith(\n          \"https://generativelanguage.googleapis.com/\"\n        )\n      })\n    );\n  }\n  return ai.defineModel(\n    __spreadProps(__spreadValues({\n      name: model.name\n    }, model.info), {\n      configSchema: model.configSchema,\n      use: middleware\n    }),\n    (request, streamingCallback) => __async(this, null, function* () {\n      var _a2, _b2, _c2, _d, _e, _f, _g, _h, _i, _j, _k, _l;\n      const options = { apiClient: import_genkit.GENKIT_CLIENT_HEADER };\n      if (apiVersion) {\n        options.apiVersion = apiVersion;\n      }\n      if (apiVersion) {\n        options.baseUrl = baseUrl;\n      }\n      const requestConfig = __spreadValues(__spreadValues({}, defaultConfig), request.config);\n      const client = new import_generative_ai.GoogleGenerativeAI(apiKey).getGenerativeModel(\n        {\n          model: requestConfig.version || ((_a2 = model.config) == null ? void 0 : _a2.version) || model.version || apiModelName\n        },\n        options\n      );\n      const messages = [...request.messages];\n      if (messages.length === 0)\n        throw new Error(\"No messages provided.\");\n      let systemInstruction = void 0;\n      if (SUPPORTED_V15_MODELS[name]) {\n        const systemMessage = messages.find((m) => m.role === \"system\");\n        if (systemMessage) {\n          messages.splice(messages.indexOf(systemMessage), 1);\n          systemInstruction = toGeminiSystemInstruction(systemMessage);\n        }\n      }\n      const tools = [];\n      if ((_b2 = request.tools) == null ? void 0 : _b2.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(toGeminiTool)\n        });\n      }\n      if (requestConfig.codeExecution) {\n        tools.push({\n          codeExecution: request.config.codeExecution === true ? {} : request.config.codeExecution\n        });\n      }\n      const jsonMode = (((_c2 = request.output) == null ? void 0 : _c2.format) === \"json\" || !!((_d = request.output) == null ? void 0 : _d.schema)) && tools.length === 0;\n      const generationConfig = {\n        candidateCount: request.candidates || void 0,\n        temperature: requestConfig.temperature,\n        maxOutputTokens: requestConfig.maxOutputTokens,\n        topK: requestConfig.topK,\n        topP: requestConfig.topP,\n        stopSequences: requestConfig.stopSequences,\n        responseMimeType: jsonMode ? \"application/json\" : void 0\n      };\n      const chatRequest = {\n        systemInstruction,\n        generationConfig,\n        tools,\n        history: messages.slice(0, -1).map((message) => toGeminiMessage(message, model)),\n        safetySettings: requestConfig.safetySettings\n      };\n      const msg = toGeminiMessage(messages[messages.length - 1], model);\n      const fromJSONModeScopedGeminiCandidate = (candidate) => {\n        return fromGeminiCandidate(candidate, jsonMode);\n      };\n      if (streamingCallback) {\n        const result = yield client.startChat(chatRequest).sendMessageStream(msg.parts, options);\n        try {\n          for (var iter = __forAwait(result.stream), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {\n            const item = temp.value;\n            (_e = item.candidates) == null ? void 0 : _e.forEach((candidate) => {\n              const c = fromJSONModeScopedGeminiCandidate(candidate);\n              streamingCallback({\n                index: c.index,\n                content: c.message.content\n              });\n            });\n          }\n        } catch (temp) {\n          error = [temp];\n        } finally {\n          try {\n            more && (temp = iter.return) && (yield temp.call(iter));\n          } finally {\n            if (error)\n              throw error[0];\n          }\n        }\n        const response = yield result.response;\n        if (!((_f = response.candidates) == null ? void 0 : _f.length)) {\n          throw new Error(\"No valid candidates returned.\");\n        }\n        return {\n          candidates: ((_g = response.candidates) == null ? void 0 : _g.map(fromJSONModeScopedGeminiCandidate)) || [],\n          custom: response\n        };\n      } else {\n        const result = yield client.startChat(chatRequest).sendMessage(msg.parts, options);\n        if (!((_h = result.response.candidates) == null ? void 0 : _h.length))\n          throw new Error(\"No valid candidates returned.\");\n        const responseCandidates = ((_i = result.response.candidates) == null ? void 0 : _i.map(fromJSONModeScopedGeminiCandidate)) || [];\n        return {\n          candidates: responseCandidates,\n          custom: result.response,\n          usage: __spreadProps(__spreadValues({}, (0, import_model.getBasicUsageStats)(request.messages, responseCandidates)), {\n            inputTokens: (_j = result.response.usageMetadata) == null ? void 0 : _j.promptTokenCount,\n            outputTokens: (_k = result.response.usageMetadata) == null ? void 0 : _k.candidatesTokenCount,\n            totalTokens: (_l = result.response.usageMetadata) == null ? void 0 : _l.totalTokenCount\n          })\n        };\n      }\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=gemini.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/googleai/lib/gemini.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/chunk-WHKVXUH6.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/chunk-WHKVXUH6.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __async: () => (/* binding */ __async),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => {\n  return (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __await = function(promise, isYieldStar) {\n  this[0] = promise;\n  this[1] = isYieldStar;\n};\nvar __asyncGenerator = (__this, __arguments, generator) => {\n  var resume = (k, v, yes, no) => {\n    try {\n      var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;\n      Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === \"return\" ? k : \"next\", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume(\"throw\", e, yes, no));\n    } catch (e) {\n      no(e);\n    }\n  };\n  var method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no));\n  var it = {};\n  return generator = generator.apply(__this, __arguments), it[__knownSymbol(\"asyncIterator\")] = () => it, method(\"next\"), method(\"throw\"), method(\"return\"), it;\n};\n\n\n//# sourceMappingURL=chunk-WHKVXUH6.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9jaHVuay1XSEtWWFVINi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZEQUE2RDtBQUMzSTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZHQUE2RywrQkFBK0Isc0JBQXNCLGdCQUFnQjtBQUNsTCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBT0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvY2h1bmstV0hLVlhVSDYubWpzPzAyMTciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgX19rbm93blN5bWJvbCA9IChuYW1lLCBzeW1ib2wpID0+IHtcbiAgcmV0dXJuIChzeW1ib2wgPSBTeW1ib2xbbmFtZV0pID8gc3ltYm9sIDogU3ltYm9sLmZvcihcIlN5bWJvbC5cIiArIG5hbWUpO1xufTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xudmFyIF9fYXdhaXQgPSBmdW5jdGlvbihwcm9taXNlLCBpc1lpZWxkU3Rhcikge1xuICB0aGlzWzBdID0gcHJvbWlzZTtcbiAgdGhpc1sxXSA9IGlzWWllbGRTdGFyO1xufTtcbnZhciBfX2FzeW5jR2VuZXJhdG9yID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICB2YXIgcmVzdW1lID0gKGssIHYsIHllcywgbm8pID0+IHtcbiAgICB0cnkge1xuICAgICAgdmFyIHggPSBnZW5lcmF0b3Jba10odiksIGlzQXdhaXQgPSAodiA9IHgudmFsdWUpIGluc3RhbmNlb2YgX19hd2FpdCwgZG9uZSA9IHguZG9uZTtcbiAgICAgIFByb21pc2UucmVzb2x2ZShpc0F3YWl0ID8gdlswXSA6IHYpLnRoZW4oKHkpID0+IGlzQXdhaXQgPyByZXN1bWUoayA9PT0gXCJyZXR1cm5cIiA/IGsgOiBcIm5leHRcIiwgdlsxXSA/IHsgZG9uZTogeS5kb25lLCB2YWx1ZTogeS52YWx1ZSB9IDogeSwgeWVzLCBubykgOiB5ZXMoeyB2YWx1ZTogeSwgZG9uZSB9KSkuY2F0Y2goKGUpID0+IHJlc3VtZShcInRocm93XCIsIGUsIHllcywgbm8pKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBubyhlKTtcbiAgICB9XG4gIH07XG4gIHZhciBtZXRob2QgPSAoaykgPT4gaXRba10gPSAoeCkgPT4gbmV3IFByb21pc2UoKHllcywgbm8pID0+IHJlc3VtZShrLCB4LCB5ZXMsIG5vKSk7XG4gIHZhciBpdCA9IHt9O1xuICByZXR1cm4gZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpLCBpdFtfX2tub3duU3ltYm9sKFwiYXN5bmNJdGVyYXRvclwiKV0gPSAoKSA9PiBpdCwgbWV0aG9kKFwibmV4dFwiKSwgbWV0aG9kKFwidGhyb3dcIiksIG1ldGhvZChcInJldHVyblwiKSwgaXQ7XG59O1xuXG5leHBvcnQge1xuICBfX3NwcmVhZFZhbHVlcyxcbiAgX19hc3luYyxcbiAgX19hd2FpdCxcbiAgX19hc3luY0dlbmVyYXRvclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVdIS1ZYVUg2Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/chunk-WHKVXUH6.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/core/lib/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Flow: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_5__.Flow),\n/* harmony export */   FlowServer: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_5__.FlowServer),\n/* harmony export */   GENKIT_CLIENT_HEADER: () => (/* binding */ GENKIT_CLIENT_HEADER),\n/* harmony export */   GENKIT_VERSION: () => (/* binding */ GENKIT_VERSION),\n/* harmony export */   GenkitError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_4__.GenkitError),\n/* harmony export */   defineFlow: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_5__.defineFlow),\n/* harmony export */   defineJsonSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_9__.defineJsonSchema),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_9__.defineSchema),\n/* harmony export */   defineStreamingFlow: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_5__.defineStreamingFlow),\n/* harmony export */   getFlowAuth: () => (/* reexport safe */ _auth_js__WEBPACK_IMPORTED_MODULE_3__.getFlowAuth),\n/* harmony export */   run: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_5__.run),\n/* harmony export */   z: () => (/* reexport safe */ zod__WEBPACK_IMPORTED_MODULE_12__.z)\n/* harmony export */ });\n/* harmony import */ var _chunk_WHKVXUH6_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-WHKVXUH6.mjs */ \"(rsc)/./node_modules/@genkit-ai/core/lib/chunk-WHKVXUH6.mjs\");\n/* harmony import */ var _codegen_version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__codegen/version.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _action_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/action.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _action_js__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"Flow\",\"FlowServer\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"defineStreamingFlow\",\"getFlowAuth\",\"run\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _action_js__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _auth_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./auth.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/auth.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./error.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/error.js\");\n/* harmony import */ var _flow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./flow.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/flow.js\");\n/* harmony import */ var _flowTypes_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./flowTypes.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/flowTypes.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _flowTypes_js__WEBPACK_IMPORTED_MODULE_6__) if([\"default\",\"Flow\",\"FlowServer\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"defineStreamingFlow\",\"getFlowAuth\",\"run\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _flowTypes_js__WEBPACK_IMPORTED_MODULE_6__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _plugin_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/plugin.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _plugin_js__WEBPACK_IMPORTED_MODULE_7__) if([\"default\",\"Flow\",\"FlowServer\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"defineStreamingFlow\",\"getFlowAuth\",\"run\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _plugin_js__WEBPACK_IMPORTED_MODULE_7__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _reflection_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./reflection.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/reflection.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _reflection_js__WEBPACK_IMPORTED_MODULE_8__) if([\"default\",\"Flow\",\"FlowServer\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"defineStreamingFlow\",\"getFlowAuth\",\"run\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _reflection_js__WEBPACK_IMPORTED_MODULE_8__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./schema.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/schema.js\");\n/* harmony import */ var _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./telemetryTypes.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_10__) if([\"default\",\"Flow\",\"FlowServer\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"defineStreamingFlow\",\"getFlowAuth\",\"run\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_10__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@genkit-ai/core/lib/utils.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _utils_js__WEBPACK_IMPORTED_MODULE_11__) if([\"default\",\"Flow\",\"FlowServer\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"defineStreamingFlow\",\"getFlowAuth\",\"run\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _utils_js__WEBPACK_IMPORTED_MODULE_11__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\nconst GENKIT_VERSION = _codegen_version_js__WEBPACK_IMPORTED_MODULE_1__.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QjtBQUNtQjtBQUNqRCx1QkFBdUIsd0RBQU87QUFDOUIsNENBQTRDLGdCQUFnQixVQUFVLHNCQUFzQjtBQUNwRTtBQUNJO0FBQ1k7QUFDQztBQU90QjtBQUNZO0FBQ0g7QUFDSTtBQUM2QjtBQUN6QjtBQUNUO0FBY3pCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4Lm1qcz82MjQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4vY2h1bmstV0hLVlhVSDYubWpzXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX19jb2RlZ2VuL3ZlcnNpb24uanNcIjtcbmNvbnN0IEdFTktJVF9WRVJTSU9OID0gdmVyc2lvbjtcbmNvbnN0IEdFTktJVF9DTElFTlRfSEVBREVSID0gYGdlbmtpdC1ub2RlLyR7R0VOS0lUX1ZFUlNJT059IGdsLW5vZGUvJHtwcm9jZXNzLnZlcnNpb25zLm5vZGV9YDtcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hY3Rpb24uanNcIjtcbmltcG9ydCB7IGdldEZsb3dBdXRoIH0gZnJvbSBcIi4vYXV0aC5qc1wiO1xuaW1wb3J0IHsgR2Vua2l0RXJyb3IgfSBmcm9tIFwiLi9lcnJvci5qc1wiO1xuaW1wb3J0IHtcbiAgRmxvdyxcbiAgRmxvd1NlcnZlcixcbiAgZGVmaW5lRmxvdyxcbiAgZGVmaW5lU3RyZWFtaW5nRmxvdyxcbiAgcnVuXG59IGZyb20gXCIuL2Zsb3cuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Zsb3dUeXBlcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGx1Z2luLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZWZsZWN0aW9uLmpzXCI7XG5pbXBvcnQgeyBkZWZpbmVKc29uU2NoZW1hLCBkZWZpbmVTY2hlbWEgfSBmcm9tIFwiLi9zY2hlbWEuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RlbGVtZXRyeVR5cGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy5qc1wiO1xuZXhwb3J0IHtcbiAgRmxvdyxcbiAgRmxvd1NlcnZlcixcbiAgR0VOS0lUX0NMSUVOVF9IRUFERVIsXG4gIEdFTktJVF9WRVJTSU9OLFxuICBHZW5raXRFcnJvcixcbiAgZGVmaW5lRmxvdyxcbiAgZGVmaW5lSnNvblNjaGVtYSxcbiAgZGVmaW5lU2NoZW1hLFxuICBkZWZpbmVTdHJlYW1pbmdGbG93LFxuICBnZXRGbG93QXV0aCxcbiAgcnVuLFxuICB6XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/core/lib/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/lib/chunk-DFMI36TU.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/lib/chunk-DFMI36TU.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __async: () => (/* binding */ __async),\n/* harmony export */   __objRest: () => (/* binding */ __objRest),\n/* harmony export */   __spreadProps: () => (/* binding */ __spreadProps),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n\n//# sourceMappingURL=chunk-DFMI36TU.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbGliL2NodW5rLURGTUkzNlRVLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZEQUE2RDtBQUMzSTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBT0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZG90cHJvbXB0L2xpYi9jaHVuay1ERk1JMzZUVS5tanM/OTg5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX29ialJlc3QgPSAoc291cmNlLCBleGNsdWRlKSA9PiB7XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKHNvdXJjZSkpIHtcbiAgICAgIGlmIChleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwICYmIF9fcHJvcElzRW51bS5jYWxsKHNvdXJjZSwgcHJvcCkpXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xudmFyIF9fYXN5bmMgPSAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIGZ1bGZpbGxlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcmVqZWN0ZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzdGVwID0gKHgpID0+IHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IHtcbiAgX19zcHJlYWRWYWx1ZXMsXG4gIF9fc3ByZWFkUHJvcHMsXG4gIF9fb2JqUmVzdCxcbiAgX19hc3luY1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLURGTUkzNlRVLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/lib/chunk-DFMI36TU.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/lib/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/lib/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dotprompt: () => (/* reexport safe */ _prompt_js__WEBPACK_IMPORTED_MODULE_3__.Dotprompt),\n/* harmony export */   defineDotprompt: () => (/* reexport safe */ _prompt_js__WEBPACK_IMPORTED_MODULE_3__.defineDotprompt),\n/* harmony export */   defineHelper: () => (/* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_5__.defineHelper),\n/* harmony export */   definePartial: () => (/* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_5__.definePartial),\n/* harmony export */   loadPromptFile: () => (/* binding */ loadPromptFile),\n/* harmony export */   loadPromptFolder: () => (/* reexport safe */ _registry_js__WEBPACK_IMPORTED_MODULE_4__.loadPromptFolder),\n/* harmony export */   loadPromptUrl: () => (/* binding */ loadPromptUrl),\n/* harmony export */   prompt: () => (/* binding */ prompt),\n/* harmony export */   promptRef: () => (/* binding */ promptRef)\n/* harmony export */ });\n/* harmony import */ var _chunk_DFMI36TU_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-DFMI36TU.mjs */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/chunk-DFMI36TU.mjs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var _prompt_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/prompt.js\");\n/* harmony import */ var _registry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./registry.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/registry.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./template.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/lib/template.js\");\n\n\n\n\n\n\nfunction prompt(registry, name, options) {\n  return (0,_chunk_DFMI36TU_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function* () {\n    return yield (0,_registry_js__WEBPACK_IMPORTED_MODULE_4__.lookupPrompt)(\n      registry,\n      name,\n      options == null ? void 0 : options.variant\n    );\n  });\n}\nfunction promptRef(name, options) {\n  return new _prompt_js__WEBPACK_IMPORTED_MODULE_3__.DotpromptRef(name, options);\n}\nfunction loadPromptFile(registry, path) {\n  return _prompt_js__WEBPACK_IMPORTED_MODULE_3__.Dotprompt.parse(\n    registry,\n    (0,path__WEBPACK_IMPORTED_MODULE_2__.basename)(path).split(\".\")[0],\n    (0,fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync)(path, \"utf-8\")\n  );\n}\nfunction loadPromptUrl(registry, name, url) {\n  return (0,_chunk_DFMI36TU_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function* () {\n    const fetch = (yield Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@genkit-ai\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/index.js\"))).default;\n    const response = yield fetch(url);\n    const text = yield response.text();\n    return _prompt_js__WEBPACK_IMPORTED_MODULE_3__.Dotprompt.parse(registry, name, text);\n  });\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbGliL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFOEI7QUFDSTtBQUNGO0FBS1g7QUFDMEM7QUFDSDtBQUM1RDtBQUNBLFNBQVMsNERBQU87QUFDaEIsaUJBQWlCLDBEQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxhQUFhLG9EQUFZO0FBQ3pCO0FBQ0E7QUFDQSxTQUFTLGlEQUFTO0FBQ2xCO0FBQ0EsSUFBSSw4Q0FBUTtBQUNaLElBQUksZ0RBQVk7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsU0FBUyw0REFBTztBQUNoQix5QkFBeUIsc2dCQUFvQjtBQUM3QztBQUNBO0FBQ0EsV0FBVyxpREFBUztBQUNwQixHQUFHO0FBQ0g7QUFXRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbGliL2luZGV4Lm1qcz9mZDExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIF9fYXN5bmNcbn0gZnJvbSBcIi4vY2h1bmstREZNSTM2VFUubWpzXCI7XG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IGJhc2VuYW1lIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7XG4gIGRlZmluZURvdHByb21wdCxcbiAgRG90cHJvbXB0LFxuICBEb3Rwcm9tcHRSZWZcbn0gZnJvbSBcIi4vcHJvbXB0LmpzXCI7XG5pbXBvcnQgeyBsb2FkUHJvbXB0Rm9sZGVyLCBsb29rdXBQcm9tcHQgfSBmcm9tIFwiLi9yZWdpc3RyeS5qc1wiO1xuaW1wb3J0IHsgZGVmaW5lSGVscGVyLCBkZWZpbmVQYXJ0aWFsIH0gZnJvbSBcIi4vdGVtcGxhdGUuanNcIjtcbmZ1bmN0aW9uIHByb21wdChyZWdpc3RyeSwgbmFtZSwgb3B0aW9ucykge1xuICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIHJldHVybiB5aWVsZCBsb29rdXBQcm9tcHQoXG4gICAgICByZWdpc3RyeSxcbiAgICAgIG5hbWUsXG4gICAgICBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnZhcmlhbnRcbiAgICApO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByb21wdFJlZihuYW1lLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgRG90cHJvbXB0UmVmKG5hbWUsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gbG9hZFByb21wdEZpbGUocmVnaXN0cnksIHBhdGgpIHtcbiAgcmV0dXJuIERvdHByb21wdC5wYXJzZShcbiAgICByZWdpc3RyeSxcbiAgICBiYXNlbmFtZShwYXRoKS5zcGxpdChcIi5cIilbMF0sXG4gICAgcmVhZEZpbGVTeW5jKHBhdGgsIFwidXRmLThcIilcbiAgKTtcbn1cbmZ1bmN0aW9uIGxvYWRQcm9tcHRVcmwocmVnaXN0cnksIG5hbWUsIHVybCkge1xuICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IGZldGNoID0gKHlpZWxkIGltcG9ydChcIm5vZGUtZmV0Y2hcIikpLmRlZmF1bHQ7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaCh1cmwpO1xuICAgIGNvbnN0IHRleHQgPSB5aWVsZCByZXNwb25zZS50ZXh0KCk7XG4gICAgcmV0dXJuIERvdHByb21wdC5wYXJzZShyZWdpc3RyeSwgbmFtZSwgdGV4dCk7XG4gIH0pO1xufVxuZXhwb3J0IHtcbiAgRG90cHJvbXB0LFxuICBkZWZpbmVEb3Rwcm9tcHQsXG4gIGRlZmluZUhlbHBlcixcbiAgZGVmaW5lUGFydGlhbCxcbiAgbG9hZFByb21wdEZpbGUsXG4gIGxvYWRQcm9tcHRGb2xkZXIsXG4gIGxvYWRQcm9tcHRVcmwsXG4gIHByb21wdCxcbiAgcHJvbXB0UmVmXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/lib/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/body.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/body.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   \"default\": () => (/* binding */ Body),\n/* harmony export */   extractContentType: () => (/* binding */ extractContentType),\n/* harmony export */   getTotalBytes: () => (/* binding */ getTotalBytes),\n/* harmony export */   writeToStream: () => (/* binding */ writeToStream)\n/* harmony export */ });\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var fetch_blob__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fetch-blob */ \"(rsc)/./node_modules/fetch-blob/index.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"(rsc)/./node_modules/formdata-polyfill/esm.min.js\");\n/* harmony import */ var _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errors/fetch-error.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/fetch-error.js\");\n/* harmony import */ var _errors_base_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors/base.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/base.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/is.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is.js\");\n\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\n\n\n\n\n\n\n\n\n\n\n\nconst pipeline = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(node_stream__WEBPACK_IMPORTED_MODULE_0__.pipeline);\nconst INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Body {\n\tconstructor(body, {\n\t\tsize = 0\n\t} = {}) {\n\t\tlet boundary = null;\n\n\t\tif (body === null) {\n\t\t\t// Body is undefined or null\n\t\t\tbody = null;\n\t\t} else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isURLSearchParameters)(body)) {\n\t\t\t// Body is a URLSearchParams\n\t\t\tbody = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body.toString());\n\t\t} else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n\t\t\t// Body is blob\n\t\t} else if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\n\t\t\t// Body is Buffer\n\t\t} else if (node_util__WEBPACK_IMPORTED_MODULE_1__.types.isAnyArrayBuffer(body)) {\n\t\t\t// Body is ArrayBuffer\n\t\t\tbody = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body);\n\t\t} else if (ArrayBuffer.isView(body)) {\n\t\t\t// Body is ArrayBufferView\n\t\t\tbody = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t\t} else if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\n\t\t\t// Body is stream\n\t\t} else if (body instanceof formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData) {\n\t\t\t// Body is FormData\n\t\t\tbody = (0,formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.formDataToBlob)(body);\n\t\t\tboundary = body.type.split('=')[1];\n\t\t} else {\n\t\t\t// None of the above\n\t\t\t// coerce to string then buffer\n\t\t\tbody = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(String(body));\n\t\t}\n\n\t\tlet stream = body;\n\n\t\tif (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\n\t\t\tstream = node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(body);\n\t\t} else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n\t\t\tstream = node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(body.stream());\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tbody,\n\t\t\tstream,\n\t\t\tboundary,\n\t\t\tdisturbed: false,\n\t\t\terror: null\n\t\t};\n\t\tthis.size = size;\n\n\t\tif (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\n\t\t\tbody.on('error', error_ => {\n\t\t\t\tconst error = error_ instanceof _errors_base_js__WEBPACK_IMPORTED_MODULE_6__.FetchBaseError ?\n\t\t\t\t\terror_ :\n\t\t\t\t\tnew _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n\t\t\t\tthis[INTERNALS].error = error;\n\t\t\t});\n\t\t}\n\t}\n\n\tget body() {\n\t\treturn this[INTERNALS].stream;\n\t}\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t}\n\n\t/**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */\n\tasync arrayBuffer() {\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\n\t}\n\n\tasync formData() {\n\t\tconst ct = this.headers.get('content-type');\n\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\n\t\t\tconst formData = new formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData();\n\t\t\tconst parameters = new URLSearchParams(await this.text());\n\n\t\t\tfor (const [name, value] of parameters) {\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\tconst {toFormData} = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@genkit-ai\").then(__webpack_require__.bind(__webpack_require__, /*! ./utils/multipart-parser.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/multipart-parser.js\"));\n\t\treturn toFormData(this.body, ct);\n\t}\n\n\t/**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */\n\tasync blob() {\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';\n\t\tconst buf = await this.arrayBuffer();\n\n\t\treturn new fetch_blob__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([buf], {\n\t\t\ttype: ct\n\t\t});\n\t}\n\n\t/**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */\n\tasync json() {\n\t\tconst text = await this.text();\n\t\treturn JSON.parse(text);\n\t}\n\n\t/**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */\n\tasync text() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\n\t/**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */\n\tbuffer() {\n\t\treturn consumeBody(this);\n\t}\n}\n\nBody.prototype.buffer = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: {enumerable: true},\n\tbodyUsed: {enumerable: true},\n\tarrayBuffer: {enumerable: true},\n\tblob: {enumerable: true},\n\tjson: {enumerable: true},\n\ttext: {enumerable: true},\n\tdata: {get: (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(() => {},\n\t\t'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead',\n\t\t'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nasync function consumeBody(data) {\n\tif (data[INTERNALS].disturbed) {\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\n\t}\n\n\tdata[INTERNALS].disturbed = true;\n\n\tif (data[INTERNALS].error) {\n\t\tthrow data[INTERNALS].error;\n\t}\n\n\tconst {body} = data;\n\n\t// Body is null\n\tif (body === null) {\n\t\treturn node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\n\t}\n\n\t/* c8 ignore next 3 */\n\tif (!(body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__)) {\n\t\treturn node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\n\t}\n\n\t// Body is stream\n\t// get ready to actually consume the body\n\tconst accum = [];\n\tlet accumBytes = 0;\n\n\ttry {\n\t\tfor await (const chunk of body) {\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\n\t\t\t\tconst error = new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n\t\t\t\tbody.destroy(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t}\n\t} catch (error) {\n\t\tconst error_ = error instanceof _errors_base_js__WEBPACK_IMPORTED_MODULE_6__.FetchBaseError ? error : new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n\t\tthrow error_;\n\t}\n\n\tif (body.readableEnded === true || body._readableState.ended === true) {\n\t\ttry {\n\t\t\tif (accum.every(c => typeof c === 'string')) {\n\t\t\t\treturn node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(accum.join(''));\n\t\t\t}\n\n\t\t\treturn node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.concat(accum, accumBytes);\n\t\t} catch (error) {\n\t\t\tthrow new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n\t\t}\n\t} else {\n\t\tthrow new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n\t}\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nconst clone = (instance, highWaterMark) => {\n\tlet p1;\n\tlet p2;\n\tlet {body} = instance[INTERNALS];\n\n\t// Don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// Check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif ((body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) && (typeof body.getBoundary !== 'function')) {\n\t\t// Tee instance body\n\t\tp1 = new node_stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough({highWaterMark});\n\t\tp2 = new node_stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough({highWaterMark});\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// Set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].stream = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n};\n\nconst getNonSpecFormDataBoundary = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(\n\tbody => body.getBoundary(),\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\n);\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nconst extractContentType = (body, request) => {\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn null;\n\t}\n\n\t// Body is string\n\tif (typeof body === 'string') {\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n\n\t// Body is a URLSearchParams\n\tif ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isURLSearchParameters)(body)) {\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t}\n\n\t// Body is blob\n\tif ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n\t\treturn body.type || null;\n\t}\n\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\tif (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body) || node_util__WEBPACK_IMPORTED_MODULE_1__.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n\t\treturn null;\n\t}\n\n\tif (body instanceof formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData) {\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getBoundary === 'function') {\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n\t}\n\n\t// Body is stream - can't really do much about this\n\tif (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\n\t\treturn null;\n\t}\n\n\t// Body constructor defaults other things to string\n\treturn 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nconst getTotalBytes = request => {\n\tconst {body} = request[INTERNALS];\n\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn 0;\n\t}\n\n\t// Body is Blob\n\tif ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n\t\treturn body.size;\n\t}\n\n\t// Body is Buffer\n\tif (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\n\t\treturn body.length;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getLengthSync === 'function') {\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n\t}\n\n\t// Body is stream\n\treturn null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nconst writeToStream = async (dest, {body}) => {\n\tif (body === null) {\n\t\t// Body is null\n\t\tdest.end();\n\t} else {\n\t\t// Body is stream\n\t\tawait pipeline(body, dest);\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2JvZHkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnRDtBQUNNO0FBQ25COztBQUVMO0FBQ3dDOztBQUVuQjtBQUNIO0FBQ1k7O0FBRTVELGlCQUFpQixvREFBUyxDQUFDLGlEQUFlO0FBQzFDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBLEdBQUcsSUFBSTtBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUksU0FBUyxtRUFBcUI7QUFDbEM7QUFDQSxVQUFVLCtDQUFNO0FBQ2hCLElBQUksU0FBUyxvREFBTTtBQUNuQjtBQUNBLElBQUksU0FBUywrQ0FBTTtBQUNuQjtBQUNBLElBQUksU0FBUyw0Q0FBSztBQUNsQjtBQUNBLFVBQVUsK0NBQU07QUFDaEIsSUFBSTtBQUNKO0FBQ0EsVUFBVSwrQ0FBTTtBQUNoQixJQUFJLHlCQUF5Qix3Q0FBTTtBQUNuQztBQUNBLElBQUkseUJBQXlCLGtFQUFRO0FBQ3JDO0FBQ0EsVUFBVSw0RUFBYztBQUN4QjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsVUFBVSwrQ0FBTTtBQUNoQjs7QUFFQTs7QUFFQSxNQUFNLCtDQUFNO0FBQ1osWUFBWSxpREFBZTtBQUMzQixJQUFJLFNBQVMsb0RBQU07QUFDbkIsWUFBWSxpREFBZTtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQix3Q0FBTTtBQUM1QjtBQUNBLG9DQUFvQywyREFBYztBQUNsRDtBQUNBLFNBQVMsOERBQVUsZ0RBQWdELFNBQVMsSUFBSSxlQUFlO0FBQy9GO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdDQUFnQztBQUN6QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0Isa0VBQVE7QUFDaEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsU0FBUyxZQUFZLFFBQVEsMlBBQXFDO0FBQ2xFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLGtEQUFJO0FBQ2pCO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixvREFBUzs7QUFFakM7QUFDQTtBQUNBLFFBQVEsaUJBQWlCO0FBQ3pCLFlBQVksaUJBQWlCO0FBQzdCLGVBQWUsaUJBQWlCO0FBQ2hDLFFBQVEsaUJBQWlCO0FBQ3pCLFFBQVEsaUJBQWlCO0FBQ3pCLFFBQVEsaUJBQWlCO0FBQ3pCLFFBQVEsS0FBSyxvREFBUyxTQUFTO0FBQy9CO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxTQUFTO0FBQ3pEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLE1BQU07O0FBRWQ7QUFDQTtBQUNBLFNBQVMsK0NBQU07QUFDZjs7QUFFQTtBQUNBLHVCQUF1Qix3Q0FBTTtBQUM3QixTQUFTLCtDQUFNO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDhEQUFVLG9CQUFvQixVQUFVLGNBQWMsVUFBVTtBQUN0RjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGtDQUFrQywyREFBYyxlQUFlLDhEQUFVLGdEQUFnRCxTQUFTLElBQUksY0FBYztBQUNwSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsK0NBQU07QUFDakI7O0FBRUEsVUFBVSwrQ0FBTTtBQUNoQixJQUFJO0FBQ0osYUFBYSw4REFBVSxtREFBbUQsU0FBUyxJQUFJLGNBQWM7QUFDckc7QUFDQSxHQUFHO0FBQ0gsWUFBWSw4REFBVSw2REFBNkQsU0FBUztBQUM1RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsTUFBTSxNQUFNOztBQUVaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0Isd0NBQU07QUFDNUI7QUFDQSxXQUFXLG9EQUFXLEVBQUUsY0FBYztBQUN0QyxXQUFXLG9EQUFXLEVBQUUsY0FBYztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQ0FBbUMsb0RBQVM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0EsS0FBSyxtRUFBcUI7QUFDMUIsNENBQTRDO0FBQzVDOztBQUVBO0FBQ0EsS0FBSyxvREFBTTtBQUNYO0FBQ0E7O0FBRUE7QUFDQSxLQUFLLCtDQUFNLG1CQUFtQiw0Q0FBSztBQUNuQztBQUNBOztBQUVBLHFCQUFxQixrRUFBUTtBQUM3QiwrQkFBK0IsV0FBVyw0QkFBNEI7QUFDdEU7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QixXQUFXLGlDQUFpQztBQUMxRTs7QUFFQTtBQUNBLHFCQUFxQix3Q0FBTTtBQUMzQjtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhO0FBQ2I7QUFDTztBQUNQLFFBQVEsTUFBTTs7QUFFZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUssb0RBQU07QUFDWDtBQUNBOztBQUVBO0FBQ0EsS0FBSywrQ0FBTTtBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCO0FBQ0EsYUFBYTtBQUNiO0FBQ08sb0NBQW9DLEtBQUs7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2JvZHkuanM/YTMzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQm9keS5qc1xuICpcbiAqIEJvZHkgaW50ZXJmYWNlIHByb3ZpZGVzIGNvbW1vbiBtZXRob2RzIGZvciBSZXF1ZXN0IGFuZCBSZXNwb25zZVxuICovXG5cbmltcG9ydCBTdHJlYW0sIHtQYXNzVGhyb3VnaH0gZnJvbSAnbm9kZTpzdHJlYW0nO1xuaW1wb3J0IHt0eXBlcywgZGVwcmVjYXRlLCBwcm9taXNpZnl9IGZyb20gJ25vZGU6dXRpbCc7XG5pbXBvcnQge0J1ZmZlcn0gZnJvbSAnbm9kZTpidWZmZXInO1xuXG5pbXBvcnQgQmxvYiBmcm9tICdmZXRjaC1ibG9iJztcbmltcG9ydCB7Rm9ybURhdGEsIGZvcm1EYXRhVG9CbG9ifSBmcm9tICdmb3JtZGF0YS1wb2x5ZmlsbC9lc20ubWluLmpzJztcblxuaW1wb3J0IHtGZXRjaEVycm9yfSBmcm9tICcuL2Vycm9ycy9mZXRjaC1lcnJvci5qcyc7XG5pbXBvcnQge0ZldGNoQmFzZUVycm9yfSBmcm9tICcuL2Vycm9ycy9iYXNlLmpzJztcbmltcG9ydCB7aXNCbG9iLCBpc1VSTFNlYXJjaFBhcmFtZXRlcnN9IGZyb20gJy4vdXRpbHMvaXMuanMnO1xuXG5jb25zdCBwaXBlbGluZSA9IHByb21pc2lmeShTdHJlYW0ucGlwZWxpbmUpO1xuY29uc3QgSU5URVJOQUxTID0gU3ltYm9sKCdCb2R5IGludGVybmFscycpO1xuXG4vKipcbiAqIEJvZHkgbWl4aW5cbiAqXG4gKiBSZWY6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNib2R5XG4gKlxuICogQHBhcmFtICAgU3RyZWFtICBib2R5ICBSZWFkYWJsZSBzdHJlYW1cbiAqIEBwYXJhbSAgIE9iamVjdCAgb3B0cyAgUmVzcG9uc2Ugb3B0aW9uc1xuICogQHJldHVybiAgVm9pZFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb2R5IHtcblx0Y29uc3RydWN0b3IoYm9keSwge1xuXHRcdHNpemUgPSAwXG5cdH0gPSB7fSkge1xuXHRcdGxldCBib3VuZGFyeSA9IG51bGw7XG5cblx0XHRpZiAoYm9keSA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gQm9keSBpcyB1bmRlZmluZWQgb3IgbnVsbFxuXHRcdFx0Ym9keSA9IG51bGw7XG5cdFx0fSBlbHNlIGlmIChpc1VSTFNlYXJjaFBhcmFtZXRlcnMoYm9keSkpIHtcblx0XHRcdC8vIEJvZHkgaXMgYSBVUkxTZWFyY2hQYXJhbXNcblx0XHRcdGJvZHkgPSBCdWZmZXIuZnJvbShib2R5LnRvU3RyaW5nKCkpO1xuXHRcdH0gZWxzZSBpZiAoaXNCbG9iKGJvZHkpKSB7XG5cdFx0XHQvLyBCb2R5IGlzIGJsb2Jcblx0XHR9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihib2R5KSkge1xuXHRcdFx0Ly8gQm9keSBpcyBCdWZmZXJcblx0XHR9IGVsc2UgaWYgKHR5cGVzLmlzQW55QXJyYXlCdWZmZXIoYm9keSkpIHtcblx0XHRcdC8vIEJvZHkgaXMgQXJyYXlCdWZmZXJcblx0XHRcdGJvZHkgPSBCdWZmZXIuZnJvbShib2R5KTtcblx0XHR9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhib2R5KSkge1xuXHRcdFx0Ly8gQm9keSBpcyBBcnJheUJ1ZmZlclZpZXdcblx0XHRcdGJvZHkgPSBCdWZmZXIuZnJvbShib2R5LmJ1ZmZlciwgYm9keS5ieXRlT2Zmc2V0LCBib2R5LmJ5dGVMZW5ndGgpO1xuXHRcdH0gZWxzZSBpZiAoYm9keSBpbnN0YW5jZW9mIFN0cmVhbSkge1xuXHRcdFx0Ly8gQm9keSBpcyBzdHJlYW1cblx0XHR9IGVsc2UgaWYgKGJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuXHRcdFx0Ly8gQm9keSBpcyBGb3JtRGF0YVxuXHRcdFx0Ym9keSA9IGZvcm1EYXRhVG9CbG9iKGJvZHkpO1xuXHRcdFx0Ym91bmRhcnkgPSBib2R5LnR5cGUuc3BsaXQoJz0nKVsxXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gTm9uZSBvZiB0aGUgYWJvdmVcblx0XHRcdC8vIGNvZXJjZSB0byBzdHJpbmcgdGhlbiBidWZmZXJcblx0XHRcdGJvZHkgPSBCdWZmZXIuZnJvbShTdHJpbmcoYm9keSkpO1xuXHRcdH1cblxuXHRcdGxldCBzdHJlYW0gPSBib2R5O1xuXG5cdFx0aWYgKEJ1ZmZlci5pc0J1ZmZlcihib2R5KSkge1xuXHRcdFx0c3RyZWFtID0gU3RyZWFtLlJlYWRhYmxlLmZyb20oYm9keSk7XG5cdFx0fSBlbHNlIGlmIChpc0Jsb2IoYm9keSkpIHtcblx0XHRcdHN0cmVhbSA9IFN0cmVhbS5SZWFkYWJsZS5mcm9tKGJvZHkuc3RyZWFtKCkpO1xuXHRcdH1cblxuXHRcdHRoaXNbSU5URVJOQUxTXSA9IHtcblx0XHRcdGJvZHksXG5cdFx0XHRzdHJlYW0sXG5cdFx0XHRib3VuZGFyeSxcblx0XHRcdGRpc3R1cmJlZDogZmFsc2UsXG5cdFx0XHRlcnJvcjogbnVsbFxuXHRcdH07XG5cdFx0dGhpcy5zaXplID0gc2l6ZTtcblxuXHRcdGlmIChib2R5IGluc3RhbmNlb2YgU3RyZWFtKSB7XG5cdFx0XHRib2R5Lm9uKCdlcnJvcicsIGVycm9yXyA9PiB7XG5cdFx0XHRcdGNvbnN0IGVycm9yID0gZXJyb3JfIGluc3RhbmNlb2YgRmV0Y2hCYXNlRXJyb3IgP1xuXHRcdFx0XHRcdGVycm9yXyA6XG5cdFx0XHRcdFx0bmV3IEZldGNoRXJyb3IoYEludmFsaWQgcmVzcG9uc2UgYm9keSB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggJHt0aGlzLnVybH06ICR7ZXJyb3JfLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycm9yXyk7XG5cdFx0XHRcdHRoaXNbSU5URVJOQUxTXS5lcnJvciA9IGVycm9yO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0IGJvZHkoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5zdHJlYW07XG5cdH1cblxuXHRnZXQgYm9keVVzZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5kaXN0dXJiZWQ7XG5cdH1cblxuXHQvKipcblx0ICogRGVjb2RlIHJlc3BvbnNlIGFzIEFycmF5QnVmZmVyXG5cdCAqXG5cdCAqIEByZXR1cm4gIFByb21pc2Vcblx0ICovXG5cdGFzeW5jIGFycmF5QnVmZmVyKCkge1xuXHRcdGNvbnN0IHtidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGh9ID0gYXdhaXQgY29uc3VtZUJvZHkodGhpcyk7XG5cdFx0cmV0dXJuIGJ1ZmZlci5zbGljZShieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgYnl0ZUxlbmd0aCk7XG5cdH1cblxuXHRhc3luYyBmb3JtRGF0YSgpIHtcblx0XHRjb25zdCBjdCA9IHRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuXG5cdFx0aWYgKGN0LnN0YXJ0c1dpdGgoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpKSB7XG5cdFx0XHRjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoYXdhaXQgdGhpcy50ZXh0KCkpO1xuXG5cdFx0XHRmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgcGFyYW1ldGVycykge1xuXHRcdFx0XHRmb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm9ybURhdGE7XG5cdFx0fVxuXG5cdFx0Y29uc3Qge3RvRm9ybURhdGF9ID0gYXdhaXQgaW1wb3J0KCcuL3V0aWxzL211bHRpcGFydC1wYXJzZXIuanMnKTtcblx0XHRyZXR1cm4gdG9Gb3JtRGF0YSh0aGlzLmJvZHksIGN0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm4gcmF3IHJlc3BvbnNlIGFzIEJsb2Jcblx0ICpcblx0ICogQHJldHVybiBQcm9taXNlXG5cdCAqL1xuXHRhc3luYyBibG9iKCkge1xuXHRcdGNvbnN0IGN0ID0gKHRoaXMuaGVhZGVycyAmJiB0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkgfHwgKHRoaXNbSU5URVJOQUxTXS5ib2R5ICYmIHRoaXNbSU5URVJOQUxTXS5ib2R5LnR5cGUpIHx8ICcnO1xuXHRcdGNvbnN0IGJ1ZiA9IGF3YWl0IHRoaXMuYXJyYXlCdWZmZXIoKTtcblxuXHRcdHJldHVybiBuZXcgQmxvYihbYnVmXSwge1xuXHRcdFx0dHlwZTogY3Rcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZWNvZGUgcmVzcG9uc2UgYXMganNvblxuXHQgKlxuXHQgKiBAcmV0dXJuICBQcm9taXNlXG5cdCAqL1xuXHRhc3luYyBqc29uKCkge1xuXHRcdGNvbnN0IHRleHQgPSBhd2FpdCB0aGlzLnRleHQoKTtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSh0ZXh0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZWNvZGUgcmVzcG9uc2UgYXMgdGV4dFxuXHQgKlxuXHQgKiBAcmV0dXJuICBQcm9taXNlXG5cdCAqL1xuXHRhc3luYyB0ZXh0KCkge1xuXHRcdGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGNvbnN1bWVCb2R5KHRoaXMpO1xuXHRcdHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYnVmZmVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZWNvZGUgcmVzcG9uc2UgYXMgYnVmZmVyIChub24tc3BlYyBhcGkpXG5cdCAqXG5cdCAqIEByZXR1cm4gIFByb21pc2Vcblx0ICovXG5cdGJ1ZmZlcigpIHtcblx0XHRyZXR1cm4gY29uc3VtZUJvZHkodGhpcyk7XG5cdH1cbn1cblxuQm9keS5wcm90b3R5cGUuYnVmZmVyID0gZGVwcmVjYXRlKEJvZHkucHJvdG90eXBlLmJ1ZmZlciwgJ1BsZWFzZSB1c2UgXFwncmVzcG9uc2UuYXJyYXlCdWZmZXIoKVxcJyBpbnN0ZWFkIG9mIFxcJ3Jlc3BvbnNlLmJ1ZmZlcigpXFwnJywgJ25vZGUtZmV0Y2gjYnVmZmVyJyk7XG5cbi8vIEluIGJyb3dzZXJzLCBhbGwgcHJvcGVydGllcyBhcmUgZW51bWVyYWJsZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEJvZHkucHJvdG90eXBlLCB7XG5cdGJvZHk6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0Ym9keVVzZWQ6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0YXJyYXlCdWZmZXI6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0YmxvYjoge2VudW1lcmFibGU6IHRydWV9LFxuXHRqc29uOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdHRleHQ6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0ZGF0YToge2dldDogZGVwcmVjYXRlKCgpID0+IHt9LFxuXHRcdCdkYXRhIGRvZXNuXFwndCBleGlzdCwgdXNlIGpzb24oKSwgdGV4dCgpLCBhcnJheUJ1ZmZlcigpLCBvciBib2R5IGluc3RlYWQnLFxuXHRcdCdodHRwczovL2dpdGh1Yi5jb20vbm9kZS1mZXRjaC9ub2RlLWZldGNoL2lzc3Vlcy8xMDAwIChyZXNwb25zZSknKX1cbn0pO1xuXG4vKipcbiAqIENvbnN1bWUgYW5kIGNvbnZlcnQgYW4gZW50aXJlIEJvZHkgdG8gYSBCdWZmZXIuXG4gKlxuICogUmVmOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ib2R5LWNvbnN1bWUtYm9keVxuICpcbiAqIEByZXR1cm4gUHJvbWlzZVxuICovXG5hc3luYyBmdW5jdGlvbiBjb25zdW1lQm9keShkYXRhKSB7XG5cdGlmIChkYXRhW0lOVEVSTkFMU10uZGlzdHVyYmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgYm9keSB1c2VkIGFscmVhZHkgZm9yOiAke2RhdGEudXJsfWApO1xuXHR9XG5cblx0ZGF0YVtJTlRFUk5BTFNdLmRpc3R1cmJlZCA9IHRydWU7XG5cblx0aWYgKGRhdGFbSU5URVJOQUxTXS5lcnJvcikge1xuXHRcdHRocm93IGRhdGFbSU5URVJOQUxTXS5lcnJvcjtcblx0fVxuXG5cdGNvbnN0IHtib2R5fSA9IGRhdGE7XG5cblx0Ly8gQm9keSBpcyBudWxsXG5cdGlmIChib2R5ID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcblx0fVxuXG5cdC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cblx0aWYgKCEoYm9keSBpbnN0YW5jZW9mIFN0cmVhbSkpIHtcblx0XHRyZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuXHR9XG5cblx0Ly8gQm9keSBpcyBzdHJlYW1cblx0Ly8gZ2V0IHJlYWR5IHRvIGFjdHVhbGx5IGNvbnN1bWUgdGhlIGJvZHlcblx0Y29uc3QgYWNjdW0gPSBbXTtcblx0bGV0IGFjY3VtQnl0ZXMgPSAwO1xuXG5cdHRyeSB7XG5cdFx0Zm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBib2R5KSB7XG5cdFx0XHRpZiAoZGF0YS5zaXplID4gMCAmJiBhY2N1bUJ5dGVzICsgY2h1bmsubGVuZ3RoID4gZGF0YS5zaXplKSB7XG5cdFx0XHRcdGNvbnN0IGVycm9yID0gbmV3IEZldGNoRXJyb3IoYGNvbnRlbnQgc2l6ZSBhdCAke2RhdGEudXJsfSBvdmVyIGxpbWl0OiAke2RhdGEuc2l6ZX1gLCAnbWF4LXNpemUnKTtcblx0XHRcdFx0Ym9keS5kZXN0cm95KGVycm9yKTtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9XG5cblx0XHRcdGFjY3VtQnl0ZXMgKz0gY2h1bmsubGVuZ3RoO1xuXHRcdFx0YWNjdW0ucHVzaChjaHVuayk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnN0IGVycm9yXyA9IGVycm9yIGluc3RhbmNlb2YgRmV0Y2hCYXNlRXJyb3IgPyBlcnJvciA6IG5ldyBGZXRjaEVycm9yKGBJbnZhbGlkIHJlc3BvbnNlIGJvZHkgd2hpbGUgdHJ5aW5nIHRvIGZldGNoICR7ZGF0YS51cmx9OiAke2Vycm9yLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycm9yKTtcblx0XHR0aHJvdyBlcnJvcl87XG5cdH1cblxuXHRpZiAoYm9keS5yZWFkYWJsZUVuZGVkID09PSB0cnVlIHx8IGJvZHkuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPT09IHRydWUpIHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKGFjY3VtLmV2ZXJ5KGMgPT4gdHlwZW9mIGMgPT09ICdzdHJpbmcnKSkge1xuXHRcdFx0XHRyZXR1cm4gQnVmZmVyLmZyb20oYWNjdW0uam9pbignJykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gQnVmZmVyLmNvbmNhdChhY2N1bSwgYWNjdW1CeXRlcyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHRocm93IG5ldyBGZXRjaEVycm9yKGBDb3VsZCBub3QgY3JlYXRlIEJ1ZmZlciBmcm9tIHJlc3BvbnNlIGJvZHkgZm9yICR7ZGF0YS51cmx9OiAke2Vycm9yLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycm9yKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEZldGNoRXJyb3IoYFByZW1hdHVyZSBjbG9zZSBvZiBzZXJ2ZXIgcmVzcG9uc2Ugd2hpbGUgdHJ5aW5nIHRvIGZldGNoICR7ZGF0YS51cmx9YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBDbG9uZSBib2R5IGdpdmVuIFJlcy9SZXEgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0gICBNaXhlZCAgIGluc3RhbmNlICAgICAgIFJlc3BvbnNlIG9yIFJlcXVlc3QgaW5zdGFuY2VcbiAqIEBwYXJhbSAgIFN0cmluZyAgaGlnaFdhdGVyTWFyayAgaGlnaFdhdGVyTWFyayBmb3IgYm90aCBQYXNzVGhyb3VnaCBib2R5IHN0cmVhbXNcbiAqIEByZXR1cm4gIE1peGVkXG4gKi9cbmV4cG9ydCBjb25zdCBjbG9uZSA9IChpbnN0YW5jZSwgaGlnaFdhdGVyTWFyaykgPT4ge1xuXHRsZXQgcDE7XG5cdGxldCBwMjtcblx0bGV0IHtib2R5fSA9IGluc3RhbmNlW0lOVEVSTkFMU107XG5cblx0Ly8gRG9uJ3QgYWxsb3cgY2xvbmluZyBhIHVzZWQgYm9keVxuXHRpZiAoaW5zdGFuY2UuYm9keVVzZWQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBjbG9uZSBib2R5IGFmdGVyIGl0IGlzIHVzZWQnKTtcblx0fVxuXG5cdC8vIENoZWNrIHRoYXQgYm9keSBpcyBhIHN0cmVhbSBhbmQgbm90IGZvcm0tZGF0YSBvYmplY3Rcblx0Ly8gbm90ZTogd2UgY2FuJ3QgY2xvbmUgdGhlIGZvcm0tZGF0YSBvYmplY3Qgd2l0aG91dCBoYXZpbmcgaXQgYXMgYSBkZXBlbmRlbmN5XG5cdGlmICgoYm9keSBpbnN0YW5jZW9mIFN0cmVhbSkgJiYgKHR5cGVvZiBib2R5LmdldEJvdW5kYXJ5ICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdC8vIFRlZSBpbnN0YW5jZSBib2R5XG5cdFx0cDEgPSBuZXcgUGFzc1Rocm91Z2goe2hpZ2hXYXRlck1hcmt9KTtcblx0XHRwMiA9IG5ldyBQYXNzVGhyb3VnaCh7aGlnaFdhdGVyTWFya30pO1xuXHRcdGJvZHkucGlwZShwMSk7XG5cdFx0Ym9keS5waXBlKHAyKTtcblx0XHQvLyBTZXQgaW5zdGFuY2UgYm9keSB0byB0ZWVkIGJvZHkgYW5kIHJldHVybiB0aGUgb3RoZXIgdGVlZCBib2R5XG5cdFx0aW5zdGFuY2VbSU5URVJOQUxTXS5zdHJlYW0gPSBwMTtcblx0XHRib2R5ID0gcDI7XG5cdH1cblxuXHRyZXR1cm4gYm9keTtcbn07XG5cbmNvbnN0IGdldE5vblNwZWNGb3JtRGF0YUJvdW5kYXJ5ID0gZGVwcmVjYXRlKFxuXHRib2R5ID0+IGJvZHkuZ2V0Qm91bmRhcnkoKSxcblx0J2Zvcm0tZGF0YSBkb2VzblxcJ3QgZm9sbG93IHRoZSBzcGVjIGFuZCByZXF1aXJlcyBzcGVjaWFsIHRyZWF0bWVudC4gVXNlIGFsdGVybmF0aXZlIHBhY2thZ2UnLFxuXHQnaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9pc3N1ZXMvMTE2Nydcbik7XG5cbi8qKlxuICogUGVyZm9ybXMgdGhlIG9wZXJhdGlvbiBcImV4dHJhY3QgYSBgQ29udGVudC1UeXBlYCB2YWx1ZSBmcm9tIHxvYmplY3R8XCIgYXNcbiAqIHNwZWNpZmllZCBpbiB0aGUgc3BlY2lmaWNhdGlvbjpcbiAqIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWJvZHlpbml0LWV4dHJhY3RcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBpbnN0YW5jZS5ib2R5IGlzIHByZXNlbnQuXG4gKlxuICogQHBhcmFtIHthbnl9IGJvZHkgQW55IG9wdGlvbnMuYm9keSBpbnB1dFxuICogQHJldHVybnMge3N0cmluZyB8IG51bGx9XG4gKi9cbmV4cG9ydCBjb25zdCBleHRyYWN0Q29udGVudFR5cGUgPSAoYm9keSwgcmVxdWVzdCkgPT4ge1xuXHQvLyBCb2R5IGlzIG51bGwgb3IgdW5kZWZpbmVkXG5cdGlmIChib2R5ID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBCb2R5IGlzIHN0cmluZ1xuXHRpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnO1xuXHR9XG5cblx0Ly8gQm9keSBpcyBhIFVSTFNlYXJjaFBhcmFtc1xuXHRpZiAoaXNVUkxTZWFyY2hQYXJhbWV0ZXJzKGJvZHkpKSB7XG5cdFx0cmV0dXJuICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCc7XG5cdH1cblxuXHQvLyBCb2R5IGlzIGJsb2Jcblx0aWYgKGlzQmxvYihib2R5KSkge1xuXHRcdHJldHVybiBib2R5LnR5cGUgfHwgbnVsbDtcblx0fVxuXG5cdC8vIEJvZHkgaXMgYSBCdWZmZXIgKEJ1ZmZlciwgQXJyYXlCdWZmZXIgb3IgQXJyYXlCdWZmZXJWaWV3KVxuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpIHx8IHR5cGVzLmlzQW55QXJyYXlCdWZmZXIoYm9keSkgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KGJvZHkpKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRpZiAoYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG5cdFx0cmV0dXJuIGBtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0ke3JlcXVlc3RbSU5URVJOQUxTXS5ib3VuZGFyeX1gO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IGZvcm0gZGF0YSBpbnB1dCBmcm9tIGZvcm0tZGF0YSBtb2R1bGVcblx0aWYgKGJvZHkgJiYgdHlwZW9mIGJvZHkuZ2V0Qm91bmRhcnkgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gYG11bHRpcGFydC9mb3JtLWRhdGE7Ym91bmRhcnk9JHtnZXROb25TcGVjRm9ybURhdGFCb3VuZGFyeShib2R5KX1gO1xuXHR9XG5cblx0Ly8gQm9keSBpcyBzdHJlYW0gLSBjYW4ndCByZWFsbHkgZG8gbXVjaCBhYm91dCB0aGlzXG5cdGlmIChib2R5IGluc3RhbmNlb2YgU3RyZWFtKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBCb2R5IGNvbnN0cnVjdG9yIGRlZmF1bHRzIG90aGVyIHRoaW5ncyB0byBzdHJpbmdcblx0cmV0dXJuICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnO1xufTtcblxuLyoqXG4gKiBUaGUgRmV0Y2ggU3RhbmRhcmQgdHJlYXRzIHRoaXMgYXMgaWYgXCJ0b3RhbCBieXRlc1wiIGlzIGEgcHJvcGVydHkgb24gdGhlIGJvZHkuXG4gKiBGb3IgdXMsIHdlIGhhdmUgdG8gZXhwbGljaXRseSBnZXQgaXQgd2l0aCBhIGZ1bmN0aW9uLlxuICpcbiAqIHJlZjogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtYm9keS10b3RhbC1ieXRlc1xuICpcbiAqIEBwYXJhbSB7YW55fSBvYmouYm9keSBCb2R5IG9iamVjdCBmcm9tIHRoZSBCb2R5IGluc3RhbmNlLlxuICogQHJldHVybnMge251bWJlciB8IG51bGx9XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUb3RhbEJ5dGVzID0gcmVxdWVzdCA9PiB7XG5cdGNvbnN0IHtib2R5fSA9IHJlcXVlc3RbSU5URVJOQUxTXTtcblxuXHQvLyBCb2R5IGlzIG51bGwgb3IgdW5kZWZpbmVkXG5cdGlmIChib2R5ID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHQvLyBCb2R5IGlzIEJsb2Jcblx0aWYgKGlzQmxvYihib2R5KSkge1xuXHRcdHJldHVybiBib2R5LnNpemU7XG5cdH1cblxuXHQvLyBCb2R5IGlzIEJ1ZmZlclxuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG5cdFx0cmV0dXJuIGJvZHkubGVuZ3RoO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IGZvcm0gZGF0YSBpbnB1dCBmcm9tIGZvcm0tZGF0YSBtb2R1bGVcblx0aWYgKGJvZHkgJiYgdHlwZW9mIGJvZHkuZ2V0TGVuZ3RoU3luYyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBib2R5Lmhhc0tub3duTGVuZ3RoICYmIGJvZHkuaGFzS25vd25MZW5ndGgoKSA/IGJvZHkuZ2V0TGVuZ3RoU3luYygpIDogbnVsbDtcblx0fVxuXG5cdC8vIEJvZHkgaXMgc3RyZWFtXG5cdHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBXcml0ZSBhIEJvZHkgdG8gYSBOb2RlLmpzIFdyaXRhYmxlU3RyZWFtIChlLmcuIGh0dHAuUmVxdWVzdCkgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7U3RyZWFtLldyaXRhYmxlfSBkZXN0IFRoZSBzdHJlYW0gdG8gd3JpdGUgdG8uXG4gKiBAcGFyYW0gb2JqLmJvZHkgQm9keSBvYmplY3QgZnJvbSB0aGUgQm9keSBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVUb1N0cmVhbSA9IGFzeW5jIChkZXN0LCB7Ym9keX0pID0+IHtcblx0aWYgKGJvZHkgPT09IG51bGwpIHtcblx0XHQvLyBCb2R5IGlzIG51bGxcblx0XHRkZXN0LmVuZCgpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEJvZHkgaXMgc3RyZWFtXG5cdFx0YXdhaXQgcGlwZWxpbmUoYm9keSwgZGVzdCk7XG5cdH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/abort-error.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/abort-error.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/base.js\");\n\n\n/**\n * AbortError interface for cancelled requests\n */\nclass AbortError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.FetchBaseError {\n\tconstructor(message, type = 'aborted') {\n\t\tsuper(message, type);\n\t}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2Vycm9ycy9hYm9ydC1lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ08seUJBQXlCLG9EQUFjO0FBQzlDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2Vycm9ycy9hYm9ydC1lcnJvci5qcz9mYTY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmV0Y2hCYXNlRXJyb3J9IGZyb20gJy4vYmFzZS5qcyc7XG5cbi8qKlxuICogQWJvcnRFcnJvciBpbnRlcmZhY2UgZm9yIGNhbmNlbGxlZCByZXF1ZXN0c1xuICovXG5leHBvcnQgY2xhc3MgQWJvcnRFcnJvciBleHRlbmRzIEZldGNoQmFzZUVycm9yIHtcblx0Y29uc3RydWN0b3IobWVzc2FnZSwgdHlwZSA9ICdhYm9ydGVkJykge1xuXHRcdHN1cGVyKG1lc3NhZ2UsIHR5cGUpO1xuXHR9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/abort-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/base.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/base.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchBaseError: () => (/* binding */ FetchBaseError)\n/* harmony export */ });\nclass FetchBaseError extends Error {\n\tconstructor(message, type) {\n\t\tsuper(message);\n\t\t// Hide custom error implementation details from end-users\n\t\tError.captureStackTrace(this, this.constructor);\n\n\t\tthis.type = type;\n\t}\n\n\tget name() {\n\t\treturn this.constructor.name;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2Vycm9ycy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2Vycm9ycy9iYXNlLmpzPzViZTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEZldGNoQmFzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlLCB0eXBlKSB7XG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdFx0Ly8gSGlkZSBjdXN0b20gZXJyb3IgaW1wbGVtZW50YXRpb24gZGV0YWlscyBmcm9tIGVuZC11c2Vyc1xuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuXG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0fVxuXG5cdGdldCBuYW1lKCkge1xuXHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG5cdH1cblxuXHRnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcblx0fVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/fetch-error.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/fetch-error.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchError: () => (/* binding */ FetchError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/base.js\");\n\n\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\nclass FetchError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.FetchBaseError {\n\t/**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */\n\tconstructor(message, type, systemError) {\n\t\tsuper(message, type);\n\t\t// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n\t\tif (systemError) {\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tthis.code = this.errno = systemError.code;\n\t\t\tthis.erroredSysCall = systemError.syscall;\n\t\t}\n\t}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2Vycm9ycy9mZXRjaC1lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDeUM7O0FBRXpDO0FBQ0EsZUFBZSw4SUFBOEk7QUFDN0o7O0FBRUE7QUFDQTtBQUNBO0FBQ08seUJBQXlCLG9EQUFjO0FBQzlDO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGFBQWE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZG90cHJvbXB0L25vZGVfbW9kdWxlcy9ub2RlLWZldGNoL3NyYy9lcnJvcnMvZmV0Y2gtZXJyb3IuanM/ODNlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7RmV0Y2hCYXNlRXJyb3J9IGZyb20gJy4vYmFzZS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge3sgYWRkcmVzcz86IHN0cmluZywgY29kZTogc3RyaW5nLCBkZXN0Pzogc3RyaW5nLCBlcnJubzogbnVtYmVyLCBpbmZvPzogb2JqZWN0LCBtZXNzYWdlOiBzdHJpbmcsIHBhdGg/OiBzdHJpbmcsIHBvcnQ/OiBudW1iZXIsIHN5c2NhbGw6IHN0cmluZ319IFN5c3RlbUVycm9yXG4qL1xuXG4vKipcbiAqIEZldGNoRXJyb3IgaW50ZXJmYWNlIGZvciBvcGVyYXRpb25hbCBlcnJvcnNcbiAqL1xuZXhwb3J0IGNsYXNzIEZldGNoRXJyb3IgZXh0ZW5kcyBGZXRjaEJhc2VFcnJvciB7XG5cdC8qKlxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IG1lc3NhZ2UgLSAgICAgIEVycm9yIG1lc3NhZ2UgZm9yIGh1bWFuXG5cdCAqIEBwYXJhbSAge3N0cmluZ30gW3R5cGVdIC0gICAgICAgIEVycm9yIHR5cGUgZm9yIG1hY2hpbmVcblx0ICogQHBhcmFtICB7U3lzdGVtRXJyb3J9IFtzeXN0ZW1FcnJvcl0gLSBGb3IgTm9kZS5qcyBzeXN0ZW0gZXJyb3Jcblx0ICovXG5cdGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHR5cGUsIHN5c3RlbUVycm9yKSB7XG5cdFx0c3VwZXIobWVzc2FnZSwgdHlwZSk7XG5cdFx0Ly8gV2hlbiBlcnIudHlwZSBpcyBgc3lzdGVtYCwgZXJyLmVycm9yZWRTeXNDYWxsIGNvbnRhaW5zIHN5c3RlbSBlcnJvciBhbmQgZXJyLmNvZGUgY29udGFpbnMgc3lzdGVtIGVycm9yIGNvZGVcblx0XHRpZiAoc3lzdGVtRXJyb3IpIHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1tdWx0aS1hc3NpZ25cblx0XHRcdHRoaXMuY29kZSA9IHRoaXMuZXJybm8gPSBzeXN0ZW1FcnJvci5jb2RlO1xuXHRcdFx0dGhpcy5lcnJvcmVkU3lzQ2FsbCA9IHN5c3RlbUVycm9yLnN5c2NhbGw7XG5cdFx0fVxuXHR9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/fetch-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/headers.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/headers.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Headers),\n/* harmony export */   fromRawHeaders: () => (/* binding */ fromRawHeaders)\n/* harmony export */ });\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:http */ \"node:http\");\n/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\n\n\n\n\n/* c8 ignore next 9 */\nconst validateHeaderName = typeof node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderName === 'function' ?\n\tnode_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderName :\n\tname => {\n\t\tif (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n\t\t\tconst error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/* c8 ignore next 9 */\nconst validateHeaderValue = typeof node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderValue === 'function' ?\n\tnode_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderValue :\n\t(name, value) => {\n\t\tif (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n\t\t\tconst error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\nclass Headers extends URLSearchParams {\n\t/**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */\n\tconstructor(init) {\n\t\t// Validate and normalize init object in [name, value(s)][]\n\t\t/** @type {string[][]} */\n\t\tlet result = [];\n\t\tif (init instanceof Headers) {\n\t\t\tconst raw = init.raw();\n\t\t\tfor (const [name, values] of Object.entries(raw)) {\n\t\t\t\tresult.push(...values.map(value => [name, value]));\n\t\t\t}\n\t\t} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\t\t// No op\n\t\t} else if (typeof init === 'object' && !node_util__WEBPACK_IMPORTED_MODULE_0__.types.isBoxedPrimitive(init)) {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\t\tif (method == null) {\n\t\t\t\t// Record<ByteString, ByteString>\n\t\t\t\tresult.push(...Object.entries(init));\n\t\t\t} else {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// Sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tresult = [...init]\n\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof pair !== 'object' || node_util__WEBPACK_IMPORTED_MODULE_0__.types.isBoxedPrimitive(pair)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be an iterable object');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t}).map(pair => {\n\t\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n\t\t}\n\n\t\t// Validate and lowercase\n\t\tresult =\n\t\t\tresult.length > 0 ?\n\t\t\t\tresult.map(([name, value]) => {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn [String(name).toLowerCase(), String(value)];\n\t\t\t\t}) :\n\t\t\t\tundefined;\n\n\t\tsuper(result);\n\n\t\t// Returning a Proxy that will lowercase key names, validate parameters and sort keys\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn new Proxy(this, {\n\t\t\tget(target, p, receiver) {\n\t\t\t\tswitch (p) {\n\t\t\t\t\tcase 'append':\n\t\t\t\t\tcase 'set':\n\t\t\t\t\t\treturn (name, value) => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase(),\n\t\t\t\t\t\t\t\tString(value)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\tcase 'has':\n\t\t\t\t\tcase 'getAll':\n\t\t\t\t\t\treturn name => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'keys':\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\ttarget.sort();\n\t\t\t\t\t\t\treturn new Set(URLSearchParams.prototype.keys.call(target)).keys();\n\t\t\t\t\t\t};\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Reflect.get(target, p, receiver);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t/* c8 ignore next */\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n\n\ttoString() {\n\t\treturn Object.prototype.toString.call(this);\n\t}\n\n\tget(name) {\n\t\tconst values = this.getAll(name);\n\t\tif (values.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet value = values.join(', ');\n\t\tif (/^content-encoding$/i.test(name)) {\n\t\t\tvalue = value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tforEach(callback, thisArg = undefined) {\n\t\tfor (const name of this.keys()) {\n\t\t\tReflect.apply(callback, thisArg, [this.get(name), name, this]);\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield this.get(name);\n\t\t}\n\t}\n\n\t/**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */\n\t* entries() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield [name, this.get(name)];\n\t\t}\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */\n\traw() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tresult[key] = this.getAll(key);\n\t\t\treturn result;\n\t\t}, {});\n\t}\n\n\t/**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tconst values = this.getAll(key);\n\t\t\t// Http.request() only supports string as Host header.\n\t\t\t// This hack makes specifying custom Host header possible.\n\t\t\tif (key === 'host') {\n\t\t\t\tresult[key] = values[0];\n\t\t\t} else {\n\t\t\t\tresult[key] = values.length > 1 ? values : values[0];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, {});\n\t}\n}\n\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\nObject.defineProperties(\n\tHeaders.prototype,\n\t['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n\t\tresult[property] = {enumerable: true};\n\t\treturn result;\n\t}, {})\n);\n\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\nfunction fromRawHeaders(headers = []) {\n\treturn new Headers(\n\t\theaders\n\t\t\t// Split into pairs\n\t\t\t.reduce((result, value, index, array) => {\n\t\t\t\tif (index % 2 === 0) {\n\t\t\t\t\tresult.push(array.slice(index, index + 2));\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [])\n\t\t\t.filter(([name, value]) => {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn true;\n\t\t\t\t} catch {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t})\n\n\t);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2hlYWRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdDO0FBQ0g7O0FBRTdCO0FBQ0Esa0NBQWtDLHlEQUF1QjtBQUN6RCxDQUFDLHlEQUF1QjtBQUN4QjtBQUNBO0FBQ0EsMEVBQTBFLEtBQUs7QUFDL0UseUNBQXlDLGdDQUFnQztBQUN6RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsMERBQXdCO0FBQzNELENBQUMsMERBQXdCO0FBQ3pCO0FBQ0E7QUFDQSx3RUFBd0UsS0FBSztBQUM3RSx5Q0FBeUMsMEJBQTBCO0FBQ25FO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEscUdBQXFHO0FBQ2xIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHlCQUF5QjtBQUM3QjtBQUNBLElBQUksc0NBQXNDLDRDQUFLO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsNENBQUs7QUFDeEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsSUFBSTtBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxHQUFHLElBQUk7QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsRUFBRSxJQUFJO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyw4Q0FBOEM7QUFDekQ7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZG90cHJvbXB0L25vZGVfbW9kdWxlcy9ub2RlLWZldGNoL3NyYy9oZWFkZXJzLmpzPzFlMjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIZWFkZXJzLmpzXG4gKlxuICogSGVhZGVycyBjbGFzcyBvZmZlcnMgY29udmVuaWVudCBoZWxwZXJzXG4gKi9cblxuaW1wb3J0IHt0eXBlc30gZnJvbSAnbm9kZTp1dGlsJztcbmltcG9ydCBodHRwIGZyb20gJ25vZGU6aHR0cCc7XG5cbi8qIGM4IGlnbm9yZSBuZXh0IDkgKi9cbmNvbnN0IHZhbGlkYXRlSGVhZGVyTmFtZSA9IHR5cGVvZiBodHRwLnZhbGlkYXRlSGVhZGVyTmFtZSA9PT0gJ2Z1bmN0aW9uJyA/XG5cdGh0dHAudmFsaWRhdGVIZWFkZXJOYW1lIDpcblx0bmFtZSA9PiB7XG5cdFx0aWYgKCEvXltcXF5gXFwtXFx3ISMkJSYnKisufH5dKyQvLnRlc3QobmFtZSkpIHtcblx0XHRcdGNvbnN0IGVycm9yID0gbmV3IFR5cGVFcnJvcihgSGVhZGVyIG5hbWUgbXVzdCBiZSBhIHZhbGlkIEhUVFAgdG9rZW4gWyR7bmFtZX1dYCk7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsICdjb2RlJywge3ZhbHVlOiAnRVJSX0lOVkFMSURfSFRUUF9UT0tFTid9KTtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblx0fTtcblxuLyogYzggaWdub3JlIG5leHQgOSAqL1xuY29uc3QgdmFsaWRhdGVIZWFkZXJWYWx1ZSA9IHR5cGVvZiBodHRwLnZhbGlkYXRlSGVhZGVyVmFsdWUgPT09ICdmdW5jdGlvbicgP1xuXHRodHRwLnZhbGlkYXRlSGVhZGVyVmFsdWUgOlxuXHQobmFtZSwgdmFsdWUpID0+IHtcblx0XHRpZiAoL1teXFx0XFx1MDAyMC1cXHUwMDdFXFx1MDA4MC1cXHUwMEZGXS8udGVzdCh2YWx1ZSkpIHtcblx0XHRcdGNvbnN0IGVycm9yID0gbmV3IFR5cGVFcnJvcihgSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGNvbnRlbnQgW1wiJHtuYW1lfVwiXWApO1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGVycm9yLCAnY29kZScsIHt2YWx1ZTogJ0VSUl9JTlZBTElEX0NIQVInfSk7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9XG5cdH07XG5cbi8qKlxuICogQHR5cGVkZWYge0hlYWRlcnMgfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgSXRlcmFibGU8cmVhZG9ubHkgW3N0cmluZywgc3RyaW5nXT4gfCBJdGVyYWJsZTxJdGVyYWJsZTxzdHJpbmc+Pn0gSGVhZGVyc0luaXRcbiAqL1xuXG4vKipcbiAqIFRoaXMgRmV0Y2ggQVBJIGludGVyZmFjZSBhbGxvd3MgeW91IHRvIHBlcmZvcm0gdmFyaW91cyBhY3Rpb25zIG9uIEhUVFAgcmVxdWVzdCBhbmQgcmVzcG9uc2UgaGVhZGVycy5cbiAqIFRoZXNlIGFjdGlvbnMgaW5jbHVkZSByZXRyaWV2aW5nLCBzZXR0aW5nLCBhZGRpbmcgdG8sIGFuZCByZW1vdmluZy5cbiAqIEEgSGVhZGVycyBvYmplY3QgaGFzIGFuIGFzc29jaWF0ZWQgaGVhZGVyIGxpc3QsIHdoaWNoIGlzIGluaXRpYWxseSBlbXB0eSBhbmQgY29uc2lzdHMgb2YgemVybyBvciBtb3JlIG5hbWUgYW5kIHZhbHVlIHBhaXJzLlxuICogWW91IGNhbiBhZGQgdG8gdGhpcyB1c2luZyBtZXRob2RzIGxpa2UgYXBwZW5kKCkgKHNlZSBFeGFtcGxlcy4pXG4gKiBJbiBhbGwgbWV0aG9kcyBvZiB0aGlzIGludGVyZmFjZSwgaGVhZGVyIG5hbWVzIGFyZSBtYXRjaGVkIGJ5IGNhc2UtaW5zZW5zaXRpdmUgYnl0ZSBzZXF1ZW5jZS5cbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWRlcnMgZXh0ZW5kcyBVUkxTZWFyY2hQYXJhbXMge1xuXHQvKipcblx0ICogSGVhZGVycyBjbGFzc1xuXHQgKlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtIZWFkZXJzSW5pdH0gW2luaXRdIC0gUmVzcG9uc2UgaGVhZGVyc1xuXHQgKi9cblx0Y29uc3RydWN0b3IoaW5pdCkge1xuXHRcdC8vIFZhbGlkYXRlIGFuZCBub3JtYWxpemUgaW5pdCBvYmplY3QgaW4gW25hbWUsIHZhbHVlKHMpXVtdXG5cdFx0LyoqIEB0eXBlIHtzdHJpbmdbXVtdfSAqL1xuXHRcdGxldCByZXN1bHQgPSBbXTtcblx0XHRpZiAoaW5pdCBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcblx0XHRcdGNvbnN0IHJhdyA9IGluaXQucmF3KCk7XG5cdFx0XHRmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZXNdIG9mIE9iamVjdC5lbnRyaWVzKHJhdykpIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goLi4udmFsdWVzLm1hcCh2YWx1ZSA9PiBbbmFtZSwgdmFsdWVdKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChpbml0ID09IG51bGwpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lcS1udWxsLCBlcWVxZXFcblx0XHRcdC8vIE5vIG9wXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgaW5pdCA9PT0gJ29iamVjdCcgJiYgIXR5cGVzLmlzQm94ZWRQcmltaXRpdmUoaW5pdCkpIHtcblx0XHRcdGNvbnN0IG1ldGhvZCA9IGluaXRbU3ltYm9sLml0ZXJhdG9yXTtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLCBlcWVxZXFcblx0XHRcdGlmIChtZXRob2QgPT0gbnVsbCkge1xuXHRcdFx0XHQvLyBSZWNvcmQ8Qnl0ZVN0cmluZywgQnl0ZVN0cmluZz5cblx0XHRcdFx0cmVzdWx0LnB1c2goLi4uT2JqZWN0LmVudHJpZXMoaW5pdCkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBtZXRob2QgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdIZWFkZXIgcGFpcnMgbXVzdCBiZSBpdGVyYWJsZScpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2VxdWVuY2U8c2VxdWVuY2U8Qnl0ZVN0cmluZz4+XG5cdFx0XHRcdC8vIE5vdGU6IHBlciBzcGVjIHdlIGhhdmUgdG8gZmlyc3QgZXhoYXVzdCB0aGUgbGlzdHMgdGhlbiBwcm9jZXNzIHRoZW1cblx0XHRcdFx0cmVzdWx0ID0gWy4uLmluaXRdXG5cdFx0XHRcdFx0Lm1hcChwYWlyID0+IHtcblx0XHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFx0dHlwZW9mIHBhaXIgIT09ICdvYmplY3QnIHx8IHR5cGVzLmlzQm94ZWRQcmltaXRpdmUocGFpcilcblx0XHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFYWNoIGhlYWRlciBwYWlyIG11c3QgYmUgYW4gaXRlcmFibGUgb2JqZWN0Jyk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiBbLi4ucGFpcl07XG5cdFx0XHRcdFx0fSkubWFwKHBhaXIgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKHBhaXIubGVuZ3RoICE9PSAyKSB7XG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0VhY2ggaGVhZGVyIHBhaXIgbXVzdCBiZSBhIG5hbWUvdmFsdWUgdHVwbGUnKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0dXJuIFsuLi5wYWlyXTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRmFpbGVkIHRvIGNvbnN0cnVjdCBcXCdIZWFkZXJzXFwnOiBUaGUgcHJvdmlkZWQgdmFsdWUgaXMgbm90IG9mIHR5cGUgXFwnKHNlcXVlbmNlPHNlcXVlbmNlPEJ5dGVTdHJpbmc+PiBvciByZWNvcmQ8Qnl0ZVN0cmluZywgQnl0ZVN0cmluZz4pJyk7XG5cdFx0fVxuXG5cdFx0Ly8gVmFsaWRhdGUgYW5kIGxvd2VyY2FzZVxuXHRcdHJlc3VsdCA9XG5cdFx0XHRyZXN1bHQubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHJlc3VsdC5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+IHtcblx0XHRcdFx0XHR2YWxpZGF0ZUhlYWRlck5hbWUobmFtZSk7XG5cdFx0XHRcdFx0dmFsaWRhdGVIZWFkZXJWYWx1ZShuYW1lLCBTdHJpbmcodmFsdWUpKTtcblx0XHRcdFx0XHRyZXR1cm4gW1N0cmluZyhuYW1lKS50b0xvd2VyQ2FzZSgpLCBTdHJpbmcodmFsdWUpXTtcblx0XHRcdFx0fSkgOlxuXHRcdFx0XHR1bmRlZmluZWQ7XG5cblx0XHRzdXBlcihyZXN1bHQpO1xuXG5cdFx0Ly8gUmV0dXJuaW5nIGEgUHJveHkgdGhhdCB3aWxsIGxvd2VyY2FzZSBrZXkgbmFtZXMsIHZhbGlkYXRlIHBhcmFtZXRlcnMgYW5kIHNvcnQga2V5c1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cblx0XHRyZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcblx0XHRcdGdldCh0YXJnZXQsIHAsIHJlY2VpdmVyKSB7XG5cdFx0XHRcdHN3aXRjaCAocCkge1xuXHRcdFx0XHRcdGNhc2UgJ2FwcGVuZCc6XG5cdFx0XHRcdFx0Y2FzZSAnc2V0Jzpcblx0XHRcdFx0XHRcdHJldHVybiAobmFtZSwgdmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdFx0dmFsaWRhdGVIZWFkZXJOYW1lKG5hbWUpO1xuXHRcdFx0XHRcdFx0XHR2YWxpZGF0ZUhlYWRlclZhbHVlKG5hbWUsIFN0cmluZyh2YWx1ZSkpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtwXS5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdHRhcmdldCxcblx0XHRcdFx0XHRcdFx0XHRTdHJpbmcobmFtZSkudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdFx0XHRTdHJpbmcodmFsdWUpXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Y2FzZSAnZGVsZXRlJzpcblx0XHRcdFx0XHRjYXNlICdoYXMnOlxuXHRcdFx0XHRcdGNhc2UgJ2dldEFsbCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gbmFtZSA9PiB7XG5cdFx0XHRcdFx0XHRcdHZhbGlkYXRlSGVhZGVyTmFtZShuYW1lKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGVbcF0uY2FsbChcblx0XHRcdFx0XHRcdFx0XHR0YXJnZXQsXG5cdFx0XHRcdFx0XHRcdFx0U3RyaW5nKG5hbWUpLnRvTG93ZXJDYXNlKClcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRjYXNlICdrZXlzJzpcblx0XHRcdFx0XHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRhcmdldC5zb3J0KCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBuZXcgU2V0KFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUua2V5cy5jYWxsKHRhcmdldCkpLmtleXMoKTtcblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0cmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcCwgcmVjZWl2ZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0LyogYzggaWdub3JlIG5leHQgKi9cblx0fVxuXG5cdGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcblx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuXHR9XG5cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKTtcblx0fVxuXG5cdGdldChuYW1lKSB7XG5cdFx0Y29uc3QgdmFsdWVzID0gdGhpcy5nZXRBbGwobmFtZSk7XG5cdFx0aWYgKHZhbHVlcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGxldCB2YWx1ZSA9IHZhbHVlcy5qb2luKCcsICcpO1xuXHRcdGlmICgvXmNvbnRlbnQtZW5jb2RpbmckL2kudGVzdChuYW1lKSkge1xuXHRcdFx0dmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcgPSB1bmRlZmluZWQpIHtcblx0XHRmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy5rZXlzKCkpIHtcblx0XHRcdFJlZmxlY3QuYXBwbHkoY2FsbGJhY2ssIHRoaXNBcmcsIFt0aGlzLmdldChuYW1lKSwgbmFtZSwgdGhpc10pO1xuXHRcdH1cblx0fVxuXG5cdCogdmFsdWVzKCkge1xuXHRcdGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLmtleXMoKSkge1xuXHRcdFx0eWllbGQgdGhpcy5nZXQobmFtZSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEB0eXBlIHsoKSA9PiBJdGVyYWJsZUl0ZXJhdG9yPFtzdHJpbmcsIHN0cmluZ10+fVxuXHQgKi9cblx0KiBlbnRyaWVzKCkge1xuXHRcdGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLmtleXMoKSkge1xuXHRcdFx0eWllbGQgW25hbWUsIHRoaXMuZ2V0KG5hbWUpXTtcblx0XHR9XG5cdH1cblxuXHRbU3ltYm9sLml0ZXJhdG9yXSgpIHtcblx0XHRyZXR1cm4gdGhpcy5lbnRyaWVzKCk7XG5cdH1cblxuXHQvKipcblx0ICogTm9kZS1mZXRjaCBub24tc3BlYyBtZXRob2Rcblx0ICogcmV0dXJuaW5nIGFsbCBoZWFkZXJzIGFuZCB0aGVpciB2YWx1ZXMgYXMgYXJyYXlcblx0ICogQHJldHVybnMge1JlY29yZDxzdHJpbmcsIHN0cmluZ1tdPn1cblx0ICovXG5cdHJhdygpIHtcblx0XHRyZXR1cm4gWy4uLnRoaXMua2V5cygpXS5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG5cdFx0XHRyZXN1bHRba2V5XSA9IHRoaXMuZ2V0QWxsKGtleSk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0sIHt9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBGb3IgYmV0dGVyIGNvbnNvbGUubG9nKGhlYWRlcnMpIGFuZCBhbHNvIHRvIGNvbnZlcnQgSGVhZGVycyBpbnRvIE5vZGUuanMgUmVxdWVzdCBjb21wYXRpYmxlIGZvcm1hdFxuXHQgKi9cblx0W1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldKCkge1xuXHRcdHJldHVybiBbLi4udGhpcy5rZXlzKCldLnJlZHVjZSgocmVzdWx0LCBrZXkpID0+IHtcblx0XHRcdGNvbnN0IHZhbHVlcyA9IHRoaXMuZ2V0QWxsKGtleSk7XG5cdFx0XHQvLyBIdHRwLnJlcXVlc3QoKSBvbmx5IHN1cHBvcnRzIHN0cmluZyBhcyBIb3N0IGhlYWRlci5cblx0XHRcdC8vIFRoaXMgaGFjayBtYWtlcyBzcGVjaWZ5aW5nIGN1c3RvbSBIb3N0IGhlYWRlciBwb3NzaWJsZS5cblx0XHRcdGlmIChrZXkgPT09ICdob3N0Jykge1xuXHRcdFx0XHRyZXN1bHRba2V5XSA9IHZhbHVlc1swXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdFtrZXldID0gdmFsdWVzLmxlbmd0aCA+IDEgPyB2YWx1ZXMgOiB2YWx1ZXNbMF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSwge30pO1xuXHR9XG59XG5cbi8qKlxuICogUmUtc2hhcGluZyBvYmplY3QgZm9yIFdlYiBJREwgdGVzdHNcbiAqIE9ubHkgbmVlZCB0byBkbyBpdCBmb3Igb3ZlcnJpZGRlbiBtZXRob2RzXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuXHRIZWFkZXJzLnByb3RvdHlwZSxcblx0WydnZXQnLCAnZW50cmllcycsICdmb3JFYWNoJywgJ3ZhbHVlcyddLnJlZHVjZSgocmVzdWx0LCBwcm9wZXJ0eSkgPT4ge1xuXHRcdHJlc3VsdFtwcm9wZXJ0eV0gPSB7ZW51bWVyYWJsZTogdHJ1ZX07XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSwge30pXG4pO1xuXG4vKipcbiAqIENyZWF0ZSBhIEhlYWRlcnMgb2JqZWN0IGZyb20gYW4gaHR0cC5JbmNvbWluZ01lc3NhZ2UucmF3SGVhZGVycywgaWdub3JpbmcgdGhvc2UgdGhhdCBkb1xuICogbm90IGNvbmZvcm0gdG8gSFRUUCBncmFtbWFyIHByb2R1Y3Rpb25zLlxuICogQHBhcmFtIHtpbXBvcnQoJ2h0dHAnKS5JbmNvbWluZ01lc3NhZ2VbJ3Jhd0hlYWRlcnMnXX0gaGVhZGVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJhd0hlYWRlcnMoaGVhZGVycyA9IFtdKSB7XG5cdHJldHVybiBuZXcgSGVhZGVycyhcblx0XHRoZWFkZXJzXG5cdFx0XHQvLyBTcGxpdCBpbnRvIHBhaXJzXG5cdFx0XHQucmVkdWNlKChyZXN1bHQsIHZhbHVlLCBpbmRleCwgYXJyYXkpID0+IHtcblx0XHRcdFx0aWYgKGluZGV4ICUgMiA9PT0gMCkge1xuXHRcdFx0XHRcdHJlc3VsdC5wdXNoKGFycmF5LnNsaWNlKGluZGV4LCBpbmRleCArIDIpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9LCBbXSlcblx0XHRcdC5maWx0ZXIoKFtuYW1lLCB2YWx1ZV0pID0+IHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YWxpZGF0ZUhlYWRlck5hbWUobmFtZSk7XG5cdFx0XHRcdFx0dmFsaWRhdGVIZWFkZXJWYWx1ZShuYW1lLCBTdHJpbmcodmFsdWUpKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSBjYXRjaCB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXG5cdCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__.AbortError),\n/* harmony export */   Blob: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.Blob),\n/* harmony export */   FetchError: () => (/* reexport safe */ _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError),\n/* harmony export */   File: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.File),\n/* harmony export */   FormData: () => (/* reexport safe */ formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_6__.FormData),\n/* harmony export */   Headers: () => (/* reexport safe */ _headers_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   Request: () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   Response: () => (/* reexport safe */ _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   blobFrom: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.blobFrom),\n/* harmony export */   blobFromSync: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.blobFromSync),\n/* harmony export */   \"default\": () => (/* binding */ fetch),\n/* harmony export */   fileFrom: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.fileFrom),\n/* harmony export */   fileFromSync: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.fileFromSync),\n/* harmony export */   isRedirect: () => (/* reexport safe */ _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__.isRedirect)\n/* harmony export */ });\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var data_uri_to_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! data-uri-to-buffer */ \"(rsc)/./node_modules/data-uri-to-buffer/dist/index.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./body.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./response.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/response.js\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./headers.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./request.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/request.js\");\n/* harmony import */ var _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./errors/fetch-error.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/fetch-error.js\");\n/* harmony import */ var _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./errors/abort-error.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/errors/abort-error.js\");\n/* harmony import */ var _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/is-redirect.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is-redirect.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"(rsc)/./node_modules/formdata-polyfill/esm.min.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/is.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is.js\");\n/* harmony import */ var _utils_referrer_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/referrer.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/referrer.js\");\n/* harmony import */ var fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! fetch-blob/from.js */ \"(rsc)/./node_modules/fetch-blob/from.js\");\n/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nasync function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](url, options_);\n\t\tconst {parsedURL, options} = (0,_request_js__WEBPACK_IMPORTED_MODULE_9__.getNodeRequestOptions)(request);\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (parsedURL.protocol === 'data:') {\n\t\t\tconst data = (0,data_uri_to_buffer__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(request.url);\n\t\t\tconst response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (parsedURL.protocol === 'https:' ? node_https__WEBPACK_IMPORTED_MODULE_1__ : node_http__WEBPACK_IMPORTED_MODULE_0__).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__.AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(parsedURL.toString(), options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tif (response && response.body) {\n\t\t\t\tresponse.body.destroy(error);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = (0,_headers_js__WEBPACK_IMPORTED_MODULE_8__.fromRawHeaders)(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif ((0,_utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__.isRedirect)(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL(location, request.url);\n\t\t\t\t} catch {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Nothing to do\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new _headers_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"](request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: (0,_body_js__WEBPACK_IMPORTED_MODULE_14__.clone)(request),\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size,\n\t\t\t\t\t\t\treferrer: request.referrer,\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// when forwarding sensitive headers like \"Authorization\",\n\t\t\t\t\t\t// \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n\t\t\t\t\t\t// headers will be ignored when following a redirect to a domain\n\t\t\t\t\t\t// that is not a subdomain match or exact match of the initial domain.\n\t\t\t\t\t\t// For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n\t\t\t\t\t\t// will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n\t\t\t\t\t\t// headers will also be ignored when following a redirect to a domain using\n\t\t\t\t\t\t// a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n\t\t\t\t\t\t// will not forward the sensitive headers\n\t\t\t\t\t\tif (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_15__.isDomainOrSubdomain)(request.url, locationURL) || !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_15__.isSameProtocol)(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOptions.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\n\t\t\t\t\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\n\t\t\t\t\t\tconst responseReferrerPolicy = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_16__.parseReferrerPolicyFromHeader)(headers);\n\t\t\t\t\t\tif (responseReferrerPolicy) {\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(response_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough(), error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\t/* c8 ignore next 3 */\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createGunzip(zlibOptions), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(response_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflate(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflateRaw(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.once('end', () => {\n\t\t\t\t\t// Some old IIS servers return zero-length OK deflate responses, so\n\t\t\t\t\t// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createBrotliDecompress(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\t(0,_body_js__WEBPACK_IMPORTED_MODULE_14__.writeToStream)(request_, request).catch(reject);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tconst onData = buf => {\n\t\t\tproperLastChunkReceived = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tnode_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tnode_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\t\tsocket.on('data', onData);\n\n\t\trequest.on('close', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t\tsocket.removeListener('data', onData);\n\t\t});\n\t});\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDRTtBQUNGO0FBQ3FDO0FBQy9COztBQUVjOztBQUVGO0FBQ1Y7QUFDZ0I7QUFDTztBQUNUO0FBQ0E7QUFDRDtBQUNJO0FBQ1k7QUFDQTtBQVF0Qzs7QUFFc0Q7QUFDZDs7QUFFcEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSw0Q0FBNEM7QUFDekQsYUFBYSxHQUFHO0FBQ2hCLGFBQWE7QUFDYjtBQUNlO0FBQ2Y7QUFDQTtBQUNBLHNCQUFzQixtREFBTztBQUM3QixTQUFTLG9CQUFvQixFQUFFLGtFQUFxQjtBQUNwRDtBQUNBLGlEQUFpRCxJQUFJLGdCQUFnQixxQ0FBcUM7QUFDMUc7O0FBRUE7QUFDQSxnQkFBZ0IsOERBQWU7QUFDL0Isd0JBQXdCLHFEQUFRLFFBQVEsVUFBVSwrQkFBK0I7QUFDakY7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0RBQWtELHVDQUFLLEdBQUcsc0NBQUk7QUFDOUQsU0FBUyxRQUFRO0FBQ2pCOztBQUVBO0FBQ0EscUJBQXFCLCtEQUFVO0FBQy9CO0FBQ0EsK0NBQStDLGlEQUFlO0FBQzlEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYywrREFBVSxlQUFlLGFBQWEsa0JBQWtCLGNBQWM7QUFDcEY7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLDJEQUFjOztBQUVqQztBQUNBLE9BQU8sa0VBQVU7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrREFBVSx5REFBeUQsU0FBUztBQUM3RjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0RBQVUsMkVBQTJFLFlBQVk7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQiwrREFBVSxpQ0FBaUMsWUFBWTtBQUN6RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1EQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGdEQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrRUFBbUIsK0JBQStCLDZEQUFjO0FBQzNFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUZBQW1GLGlEQUFlO0FBQ2xHLGtCQUFrQiwrREFBVTtBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDLGtGQUE2QjtBQUNsRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsbURBQU87QUFDL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0RBQXNELGlCQUFpQjtBQUN2RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBLGNBQWMscURBQUksZ0JBQWdCLG9EQUFXO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFEQUFRO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1EQUFpQjtBQUM1QixpQkFBaUIsbURBQWlCO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQSxXQUFXLHFEQUFJLE9BQU8sbURBQWlCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxtQkFBbUIscURBQVE7QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFEQUFJLGdCQUFnQixvREFBVztBQUMvQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsYUFBYSxxREFBSSxPQUFPLG9EQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsT0FBTztBQUNQLGFBQWEscURBQUksT0FBTyx1REFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBLG9CQUFvQixxREFBUTtBQUM1QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxREFBUTtBQUM3QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcscURBQUksT0FBTyw2REFBMkI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLG1CQUFtQixxREFBUTtBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IscURBQVE7QUFDMUI7QUFDQSxHQUFHOztBQUVIO0FBQ0EsRUFBRSx3REFBYTtBQUNmLEVBQUU7QUFDRjs7QUFFQTtBQUNBLG9CQUFvQiwrQ0FBTTs7QUFFMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUyxTQUFTO0FBQ2xCO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkJBQTZCLCtDQUFNOztBQUVuQztBQUNBO0FBQ0E7QUFDQSxLQUFLLCtDQUFNO0FBQ1gsS0FBSywrQ0FBTTtBQUNYO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWdlbmtpdC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2RvdHByb21wdC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvaW5kZXguanM/MzM4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEluZGV4LmpzXG4gKlxuICogYSByZXF1ZXN0IEFQSSBjb21wYXRpYmxlIHdpdGggd2luZG93LmZldGNoXG4gKlxuICogQWxsIHNwZWMgYWxnb3JpdGhtIHN0ZXAgbnVtYmVycyBhcmUgYmFzZWQgb24gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvY29tbWl0LXNuYXBzaG90cy9hZTcxNjgyMmNiM2E2MTg0MzIyNmNkMDkwZWVmYzY1ODk0NDZjMWQyLy5cbiAqL1xuXG5pbXBvcnQgaHR0cCBmcm9tICdub2RlOmh0dHAnO1xuaW1wb3J0IGh0dHBzIGZyb20gJ25vZGU6aHR0cHMnO1xuaW1wb3J0IHpsaWIgZnJvbSAnbm9kZTp6bGliJztcbmltcG9ydCBTdHJlYW0sIHtQYXNzVGhyb3VnaCwgcGlwZWxpbmUgYXMgcHVtcH0gZnJvbSAnbm9kZTpzdHJlYW0nO1xuaW1wb3J0IHtCdWZmZXJ9IGZyb20gJ25vZGU6YnVmZmVyJztcblxuaW1wb3J0IGRhdGFVcmlUb0J1ZmZlciBmcm9tICdkYXRhLXVyaS10by1idWZmZXInO1xuXG5pbXBvcnQge3dyaXRlVG9TdHJlYW0sIGNsb25lfSBmcm9tICcuL2JvZHkuanMnO1xuaW1wb3J0IFJlc3BvbnNlIGZyb20gJy4vcmVzcG9uc2UuanMnO1xuaW1wb3J0IEhlYWRlcnMsIHtmcm9tUmF3SGVhZGVyc30gZnJvbSAnLi9oZWFkZXJzLmpzJztcbmltcG9ydCBSZXF1ZXN0LCB7Z2V0Tm9kZVJlcXVlc3RPcHRpb25zfSBmcm9tICcuL3JlcXVlc3QuanMnO1xuaW1wb3J0IHtGZXRjaEVycm9yfSBmcm9tICcuL2Vycm9ycy9mZXRjaC1lcnJvci5qcyc7XG5pbXBvcnQge0Fib3J0RXJyb3J9IGZyb20gJy4vZXJyb3JzL2Fib3J0LWVycm9yLmpzJztcbmltcG9ydCB7aXNSZWRpcmVjdH0gZnJvbSAnLi91dGlscy9pcy1yZWRpcmVjdC5qcyc7XG5pbXBvcnQge0Zvcm1EYXRhfSBmcm9tICdmb3JtZGF0YS1wb2x5ZmlsbC9lc20ubWluLmpzJztcbmltcG9ydCB7aXNEb21haW5PclN1YmRvbWFpbiwgaXNTYW1lUHJvdG9jb2x9IGZyb20gJy4vdXRpbHMvaXMuanMnO1xuaW1wb3J0IHtwYXJzZVJlZmVycmVyUG9saWN5RnJvbUhlYWRlcn0gZnJvbSAnLi91dGlscy9yZWZlcnJlci5qcyc7XG5pbXBvcnQge1xuXHRCbG9iLFxuXHRGaWxlLFxuXHRmaWxlRnJvbVN5bmMsXG5cdGZpbGVGcm9tLFxuXHRibG9iRnJvbVN5bmMsXG5cdGJsb2JGcm9tXG59IGZyb20gJ2ZldGNoLWJsb2IvZnJvbS5qcyc7XG5cbmV4cG9ydCB7Rm9ybURhdGEsIEhlYWRlcnMsIFJlcXVlc3QsIFJlc3BvbnNlLCBGZXRjaEVycm9yLCBBYm9ydEVycm9yLCBpc1JlZGlyZWN0fTtcbmV4cG9ydCB7QmxvYiwgRmlsZSwgZmlsZUZyb21TeW5jLCBmaWxlRnJvbSwgYmxvYkZyb21TeW5jLCBibG9iRnJvbX07XG5cbmNvbnN0IHN1cHBvcnRlZFNjaGVtYXMgPSBuZXcgU2V0KFsnZGF0YTonLCAnaHR0cDonLCAnaHR0cHM6J10pO1xuXG4vKipcbiAqIEZldGNoIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtICAge3N0cmluZyB8IFVSTCB8IGltcG9ydCgnLi9yZXF1ZXN0JykuZGVmYXVsdH0gdXJsIC0gQWJzb2x1dGUgdXJsIG9yIFJlcXVlc3QgaW5zdGFuY2VcbiAqIEBwYXJhbSAgIHsqfSBbb3B0aW9uc19dIC0gRmV0Y2ggb3B0aW9uc1xuICogQHJldHVybiAge1Byb21pc2U8aW1wb3J0KCcuL3Jlc3BvbnNlJykuZGVmYXVsdD59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGZldGNoKHVybCwgb3B0aW9uc18pIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHQvLyBCdWlsZCByZXF1ZXN0IG9iamVjdFxuXHRcdGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIG9wdGlvbnNfKTtcblx0XHRjb25zdCB7cGFyc2VkVVJMLCBvcHRpb25zfSA9IGdldE5vZGVSZXF1ZXN0T3B0aW9ucyhyZXF1ZXN0KTtcblx0XHRpZiAoIXN1cHBvcnRlZFNjaGVtYXMuaGFzKHBhcnNlZFVSTC5wcm90b2NvbCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYG5vZGUtZmV0Y2ggY2Fubm90IGxvYWQgJHt1cmx9LiBVUkwgc2NoZW1lIFwiJHtwYXJzZWRVUkwucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJyl9XCIgaXMgbm90IHN1cHBvcnRlZC5gKTtcblx0XHR9XG5cblx0XHRpZiAocGFyc2VkVVJMLnByb3RvY29sID09PSAnZGF0YTonKSB7XG5cdFx0XHRjb25zdCBkYXRhID0gZGF0YVVyaVRvQnVmZmVyKHJlcXVlc3QudXJsKTtcblx0XHRcdGNvbnN0IHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGRhdGEsIHtoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IGRhdGEudHlwZUZ1bGx9fSk7XG5cdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBXcmFwIGh0dHAucmVxdWVzdCBpbnRvIGZldGNoXG5cdFx0Y29uc3Qgc2VuZCA9IChwYXJzZWRVUkwucHJvdG9jb2wgPT09ICdodHRwczonID8gaHR0cHMgOiBodHRwKS5yZXF1ZXN0O1xuXHRcdGNvbnN0IHtzaWduYWx9ID0gcmVxdWVzdDtcblx0XHRsZXQgcmVzcG9uc2UgPSBudWxsO1xuXG5cdFx0Y29uc3QgYWJvcnQgPSAoKSA9PiB7XG5cdFx0XHRjb25zdCBlcnJvciA9IG5ldyBBYm9ydEVycm9yKCdUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLicpO1xuXHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdGlmIChyZXF1ZXN0LmJvZHkgJiYgcmVxdWVzdC5ib2R5IGluc3RhbmNlb2YgU3RyZWFtLlJlYWRhYmxlKSB7XG5cdFx0XHRcdHJlcXVlc3QuYm9keS5kZXN0cm95KGVycm9yKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2UuYm9keSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlLmJvZHkuZW1pdCgnZXJyb3InLCBlcnJvcik7XG5cdFx0fTtcblxuXHRcdGlmIChzaWduYWwgJiYgc2lnbmFsLmFib3J0ZWQpIHtcblx0XHRcdGFib3J0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgYWJvcnRBbmRGaW5hbGl6ZSA9ICgpID0+IHtcblx0XHRcdGFib3J0KCk7XG5cdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdH07XG5cblx0XHQvLyBTZW5kIHJlcXVlc3Rcblx0XHRjb25zdCByZXF1ZXN0XyA9IHNlbmQocGFyc2VkVVJMLnRvU3RyaW5nKCksIG9wdGlvbnMpO1xuXG5cdFx0aWYgKHNpZ25hbCkge1xuXHRcdFx0c2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRBbmRGaW5hbGl6ZSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZmluYWxpemUgPSAoKSA9PiB7XG5cdFx0XHRyZXF1ZXN0Xy5hYm9ydCgpO1xuXHRcdFx0aWYgKHNpZ25hbCkge1xuXHRcdFx0XHRzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFuZEZpbmFsaXplKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmVxdWVzdF8ub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuXHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGByZXF1ZXN0IHRvICR7cmVxdWVzdC51cmx9IGZhaWxlZCwgcmVhc29uOiAke2Vycm9yLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycm9yKSk7XG5cdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdH0pO1xuXG5cdFx0Zml4UmVzcG9uc2VDaHVua2VkVHJhbnNmZXJCYWRFbmRpbmcocmVxdWVzdF8sIGVycm9yID0+IHtcblx0XHRcdGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5ib2R5KSB7XG5cdFx0XHRcdHJlc3BvbnNlLmJvZHkuZGVzdHJveShlcnJvcik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvKiBjOCBpZ25vcmUgbmV4dCAxOCAqL1xuXHRcdGlmIChwcm9jZXNzLnZlcnNpb24gPCAndjE0Jykge1xuXHRcdFx0Ly8gQmVmb3JlIE5vZGUuanMgMTQsIHBpcGVsaW5lKCkgZG9lcyBub3QgZnVsbHkgc3VwcG9ydCBhc3luYyBpdGVyYXRvcnMgYW5kIGRvZXMgbm90IGFsd2F5c1xuXHRcdFx0Ly8gcHJvcGVybHkgaGFuZGxlIHdoZW4gdGhlIHNvY2tldCBjbG9zZS9lbmQgZXZlbnRzIGFyZSBvdXQgb2Ygb3JkZXIuXG5cdFx0XHRyZXF1ZXN0Xy5vbignc29ja2V0JywgcyA9PiB7XG5cdFx0XHRcdGxldCBlbmRlZFdpdGhFdmVudHNDb3VudDtcblx0XHRcdFx0cy5wcmVwZW5kTGlzdGVuZXIoJ2VuZCcsICgpID0+IHtcblx0XHRcdFx0XHRlbmRlZFdpdGhFdmVudHNDb3VudCA9IHMuX2V2ZW50c0NvdW50O1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cy5wcmVwZW5kTGlzdGVuZXIoJ2Nsb3NlJywgaGFkRXJyb3IgPT4ge1xuXHRcdFx0XHRcdC8vIGlmIGVuZCBoYXBwZW5lZCBiZWZvcmUgY2xvc2UgYnV0IHRoZSBzb2NrZXQgZGlkbid0IGVtaXQgYW4gZXJyb3IsIGRvIGl0IG5vd1xuXHRcdFx0XHRcdGlmIChyZXNwb25zZSAmJiBlbmRlZFdpdGhFdmVudHNDb3VudCA8IHMuX2V2ZW50c0NvdW50ICYmICFoYWRFcnJvcikge1xuXHRcdFx0XHRcdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1ByZW1hdHVyZSBjbG9zZScpO1xuXHRcdFx0XHRcdFx0ZXJyb3IuY29kZSA9ICdFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSc7XG5cdFx0XHRcdFx0XHRyZXNwb25zZS5ib2R5LmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXF1ZXN0Xy5vbigncmVzcG9uc2UnLCByZXNwb25zZV8gPT4ge1xuXHRcdFx0cmVxdWVzdF8uc2V0VGltZW91dCgwKTtcblx0XHRcdGNvbnN0IGhlYWRlcnMgPSBmcm9tUmF3SGVhZGVycyhyZXNwb25zZV8ucmF3SGVhZGVycyk7XG5cblx0XHRcdC8vIEhUVFAgZmV0Y2ggc3RlcCA1XG5cdFx0XHRpZiAoaXNSZWRpcmVjdChyZXNwb25zZV8uc3RhdHVzQ29kZSkpIHtcblx0XHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDUuMlxuXHRcdFx0XHRjb25zdCBsb2NhdGlvbiA9IGhlYWRlcnMuZ2V0KCdMb2NhdGlvbicpO1xuXG5cdFx0XHRcdC8vIEhUVFAgZmV0Y2ggc3RlcCA1LjNcblx0XHRcdFx0bGV0IGxvY2F0aW9uVVJMID0gbnVsbDtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRsb2NhdGlvblVSTCA9IGxvY2F0aW9uID09PSBudWxsID8gbnVsbCA6IG5ldyBVUkwobG9jYXRpb24sIHJlcXVlc3QudXJsKTtcblx0XHRcdFx0fSBjYXRjaCB7XG5cdFx0XHRcdFx0Ly8gZXJyb3IgaGVyZSBjYW4gb25seSBiZSBpbnZhbGlkIFVSTCBpbiBMb2NhdGlvbjogaGVhZGVyXG5cdFx0XHRcdFx0Ly8gZG8gbm90IHRocm93IHdoZW4gb3B0aW9ucy5yZWRpcmVjdCA9PSBtYW51YWxcblx0XHRcdFx0XHQvLyBsZXQgdGhlIHVzZXIgZXh0cmFjdCB0aGUgZXJyb3JuZW91cyByZWRpcmVjdCBVUkxcblx0XHRcdFx0XHRpZiAocmVxdWVzdC5yZWRpcmVjdCAhPT0gJ21hbnVhbCcpIHtcblx0XHRcdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgdXJpIHJlcXVlc3RlZCByZXNwb25kcyB3aXRoIGFuIGludmFsaWQgcmVkaXJlY3QgVVJMOiAke2xvY2F0aW9ufWAsICdpbnZhbGlkLXJlZGlyZWN0JykpO1xuXHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIVFRQIGZldGNoIHN0ZXAgNS41XG5cdFx0XHRcdHN3aXRjaCAocmVxdWVzdC5yZWRpcmVjdCkge1xuXHRcdFx0XHRcdGNhc2UgJ2Vycm9yJzpcblx0XHRcdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgdXJpIHJlcXVlc3RlZCByZXNwb25kcyB3aXRoIGEgcmVkaXJlY3QsIHJlZGlyZWN0IG1vZGUgaXMgc2V0IHRvIGVycm9yOiAke3JlcXVlc3QudXJsfWAsICduby1yZWRpcmVjdCcpKTtcblx0XHRcdFx0XHRcdGZpbmFsaXplKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0Y2FzZSAnbWFudWFsJzpcblx0XHRcdFx0XHRcdC8vIE5vdGhpbmcgdG8gZG9cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2ZvbGxvdyc6IHtcblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCAyXG5cdFx0XHRcdFx0XHRpZiAobG9jYXRpb25VUkwgPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCA1XG5cdFx0XHRcdFx0XHRpZiAocmVxdWVzdC5jb3VudGVyID49IHJlcXVlc3QuZm9sbG93KSB7XG5cdFx0XHRcdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgbWF4aW11bSByZWRpcmVjdCByZWFjaGVkIGF0OiAke3JlcXVlc3QudXJsfWAsICdtYXgtcmVkaXJlY3QnKSk7XG5cdFx0XHRcdFx0XHRcdGZpbmFsaXplKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDYgKGNvdW50ZXIgaW5jcmVtZW50KVxuXHRcdFx0XHRcdFx0Ly8gQ3JlYXRlIGEgbmV3IFJlcXVlc3Qgb2JqZWN0LlxuXHRcdFx0XHRcdFx0Y29uc3QgcmVxdWVzdE9wdGlvbnMgPSB7XG5cdFx0XHRcdFx0XHRcdGhlYWRlcnM6IG5ldyBIZWFkZXJzKHJlcXVlc3QuaGVhZGVycyksXG5cdFx0XHRcdFx0XHRcdGZvbGxvdzogcmVxdWVzdC5mb2xsb3csXG5cdFx0XHRcdFx0XHRcdGNvdW50ZXI6IHJlcXVlc3QuY291bnRlciArIDEsXG5cdFx0XHRcdFx0XHRcdGFnZW50OiByZXF1ZXN0LmFnZW50LFxuXHRcdFx0XHRcdFx0XHRjb21wcmVzczogcmVxdWVzdC5jb21wcmVzcyxcblx0XHRcdFx0XHRcdFx0bWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcblx0XHRcdFx0XHRcdFx0Ym9keTogY2xvbmUocmVxdWVzdCksXG5cdFx0XHRcdFx0XHRcdHNpZ25hbDogcmVxdWVzdC5zaWduYWwsXG5cdFx0XHRcdFx0XHRcdHNpemU6IHJlcXVlc3Quc2l6ZSxcblx0XHRcdFx0XHRcdFx0cmVmZXJyZXI6IHJlcXVlc3QucmVmZXJyZXIsXG5cdFx0XHRcdFx0XHRcdHJlZmVycmVyUG9saWN5OiByZXF1ZXN0LnJlZmVycmVyUG9saWN5XG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHQvLyB3aGVuIGZvcndhcmRpbmcgc2Vuc2l0aXZlIGhlYWRlcnMgbGlrZSBcIkF1dGhvcml6YXRpb25cIixcblx0XHRcdFx0XHRcdC8vIFwiV1dXLUF1dGhlbnRpY2F0ZVwiLCBhbmQgXCJDb29raWVcIiB0byB1bnRydXN0ZWQgdGFyZ2V0cyxcblx0XHRcdFx0XHRcdC8vIGhlYWRlcnMgd2lsbCBiZSBpZ25vcmVkIHdoZW4gZm9sbG93aW5nIGEgcmVkaXJlY3QgdG8gYSBkb21haW5cblx0XHRcdFx0XHRcdC8vIHRoYXQgaXMgbm90IGEgc3ViZG9tYWluIG1hdGNoIG9yIGV4YWN0IG1hdGNoIG9mIHRoZSBpbml0aWFsIGRvbWFpbi5cblx0XHRcdFx0XHRcdC8vIEZvciBleGFtcGxlLCBhIHJlZGlyZWN0IGZyb20gXCJmb28uY29tXCIgdG8gZWl0aGVyIFwiZm9vLmNvbVwiIG9yIFwic3ViLmZvby5jb21cIlxuXHRcdFx0XHRcdFx0Ly8gd2lsbCBmb3J3YXJkIHRoZSBzZW5zaXRpdmUgaGVhZGVycywgYnV0IGEgcmVkaXJlY3QgdG8gXCJiYXIuY29tXCIgd2lsbCBub3QuXG5cdFx0XHRcdFx0XHQvLyBoZWFkZXJzIHdpbGwgYWxzbyBiZSBpZ25vcmVkIHdoZW4gZm9sbG93aW5nIGEgcmVkaXJlY3QgdG8gYSBkb21haW4gdXNpbmdcblx0XHRcdFx0XHRcdC8vIGEgZGlmZmVyZW50IHByb3RvY29sLiBGb3IgZXhhbXBsZSwgYSByZWRpcmVjdCBmcm9tIFwiaHR0cHM6Ly9mb28uY29tXCIgdG8gXCJodHRwOi8vZm9vLmNvbVwiXG5cdFx0XHRcdFx0XHQvLyB3aWxsIG5vdCBmb3J3YXJkIHRoZSBzZW5zaXRpdmUgaGVhZGVyc1xuXHRcdFx0XHRcdFx0aWYgKCFpc0RvbWFpbk9yU3ViZG9tYWluKHJlcXVlc3QudXJsLCBsb2NhdGlvblVSTCkgfHwgIWlzU2FtZVByb3RvY29sKHJlcXVlc3QudXJsLCBsb2NhdGlvblVSTCkpIHtcblx0XHRcdFx0XHRcdFx0Zm9yIChjb25zdCBuYW1lIG9mIFsnYXV0aG9yaXphdGlvbicsICd3d3ctYXV0aGVudGljYXRlJywgJ2Nvb2tpZScsICdjb29raWUyJ10pIHtcblx0XHRcdFx0XHRcdFx0XHRyZXF1ZXN0T3B0aW9ucy5oZWFkZXJzLmRlbGV0ZShuYW1lKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgOVxuXHRcdFx0XHRcdFx0aWYgKHJlc3BvbnNlXy5zdGF0dXNDb2RlICE9PSAzMDMgJiYgcmVxdWVzdC5ib2R5ICYmIG9wdGlvbnNfLmJvZHkgaW5zdGFuY2VvZiBTdHJlYW0uUmVhZGFibGUpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKCdDYW5ub3QgZm9sbG93IHJlZGlyZWN0IHdpdGggYm9keSBiZWluZyBhIHJlYWRhYmxlIHN0cmVhbScsICd1bnN1cHBvcnRlZC1yZWRpcmVjdCcpKTtcblx0XHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgMTFcblx0XHRcdFx0XHRcdGlmIChyZXNwb25zZV8uc3RhdHVzQ29kZSA9PT0gMzAzIHx8ICgocmVzcG9uc2VfLnN0YXR1c0NvZGUgPT09IDMwMSB8fCByZXNwb25zZV8uc3RhdHVzQ29kZSA9PT0gMzAyKSAmJiByZXF1ZXN0Lm1ldGhvZCA9PT0gJ1BPU1QnKSkge1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0T3B0aW9ucy5tZXRob2QgPSAnR0VUJztcblx0XHRcdFx0XHRcdFx0cmVxdWVzdE9wdGlvbnMuYm9keSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0cmVxdWVzdE9wdGlvbnMuaGVhZGVycy5kZWxldGUoJ2NvbnRlbnQtbGVuZ3RoJyk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCAxNFxuXHRcdFx0XHRcdFx0Y29uc3QgcmVzcG9uc2VSZWZlcnJlclBvbGljeSA9IHBhcnNlUmVmZXJyZXJQb2xpY3lGcm9tSGVhZGVyKGhlYWRlcnMpO1xuXHRcdFx0XHRcdFx0aWYgKHJlc3BvbnNlUmVmZXJyZXJQb2xpY3kpIHtcblx0XHRcdFx0XHRcdFx0cmVxdWVzdE9wdGlvbnMucmVmZXJyZXJQb2xpY3kgPSByZXNwb25zZVJlZmVycmVyUG9saWN5O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgMTVcblx0XHRcdFx0XHRcdHJlc29sdmUoZmV0Y2gobmV3IFJlcXVlc3QobG9jYXRpb25VUkwsIHJlcXVlc3RPcHRpb25zKSkpO1xuXHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKGBSZWRpcmVjdCBvcHRpb24gJyR7cmVxdWVzdC5yZWRpcmVjdH0nIGlzIG5vdCBhIHZhbGlkIHZhbHVlIG9mIFJlcXVlc3RSZWRpcmVjdGApKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBQcmVwYXJlIHJlc3BvbnNlXG5cdFx0XHRpZiAoc2lnbmFsKSB7XG5cdFx0XHRcdHJlc3BvbnNlXy5vbmNlKCdlbmQnLCAoKSA9PiB7XG5cdFx0XHRcdFx0c2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRBbmRGaW5hbGl6ZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgYm9keSA9IHB1bXAocmVzcG9uc2VfLCBuZXcgUGFzc1Rocm91Z2goKSwgZXJyb3IgPT4ge1xuXHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvcHVsbC8yOTM3NlxuXHRcdFx0LyogYzggaWdub3JlIG5leHQgMyAqL1xuXHRcdFx0aWYgKHByb2Nlc3MudmVyc2lvbiA8ICd2MTIuMTAnKSB7XG5cdFx0XHRcdHJlc3BvbnNlXy5vbignYWJvcnRlZCcsIGFib3J0QW5kRmluYWxpemUpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCByZXNwb25zZU9wdGlvbnMgPSB7XG5cdFx0XHRcdHVybDogcmVxdWVzdC51cmwsXG5cdFx0XHRcdHN0YXR1czogcmVzcG9uc2VfLnN0YXR1c0NvZGUsXG5cdFx0XHRcdHN0YXR1c1RleHQ6IHJlc3BvbnNlXy5zdGF0dXNNZXNzYWdlLFxuXHRcdFx0XHRoZWFkZXJzLFxuXHRcdFx0XHRzaXplOiByZXF1ZXN0LnNpemUsXG5cdFx0XHRcdGNvdW50ZXI6IHJlcXVlc3QuY291bnRlcixcblx0XHRcdFx0aGlnaFdhdGVyTWFyazogcmVxdWVzdC5oaWdoV2F0ZXJNYXJrXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBIVFRQLW5ldHdvcmsgZmV0Y2ggc3RlcCAxMi4xLjEuM1xuXHRcdFx0Y29uc3QgY29kaW5ncyA9IGhlYWRlcnMuZ2V0KCdDb250ZW50LUVuY29kaW5nJyk7XG5cblx0XHRcdC8vIEhUVFAtbmV0d29yayBmZXRjaCBzdGVwIDEyLjEuMS40OiBoYW5kbGUgY29udGVudCBjb2RpbmdzXG5cblx0XHRcdC8vIGluIGZvbGxvd2luZyBzY2VuYXJpb3Mgd2UgaWdub3JlIGNvbXByZXNzaW9uIHN1cHBvcnRcblx0XHRcdC8vIDEuIGNvbXByZXNzaW9uIHN1cHBvcnQgaXMgZGlzYWJsZWRcblx0XHRcdC8vIDIuIEhFQUQgcmVxdWVzdFxuXHRcdFx0Ly8gMy4gbm8gQ29udGVudC1FbmNvZGluZyBoZWFkZXJcblx0XHRcdC8vIDQuIG5vIGNvbnRlbnQgcmVzcG9uc2UgKDIwNClcblx0XHRcdC8vIDUuIGNvbnRlbnQgbm90IG1vZGlmaWVkIHJlc3BvbnNlICgzMDQpXG5cdFx0XHRpZiAoIXJlcXVlc3QuY29tcHJlc3MgfHwgcmVxdWVzdC5tZXRob2QgPT09ICdIRUFEJyB8fCBjb2RpbmdzID09PSBudWxsIHx8IHJlc3BvbnNlXy5zdGF0dXNDb2RlID09PSAyMDQgfHwgcmVzcG9uc2VfLnN0YXR1c0NvZGUgPT09IDMwNCkge1xuXHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZU9wdGlvbnMpO1xuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgTm9kZSB2Nitcblx0XHRcdC8vIEJlIGxlc3Mgc3RyaWN0IHdoZW4gZGVjb2RpbmcgY29tcHJlc3NlZCByZXNwb25zZXMsIHNpbmNlIHNvbWV0aW1lc1xuXHRcdFx0Ly8gc2VydmVycyBzZW5kIHNsaWdodGx5IGludmFsaWQgcmVzcG9uc2VzIHRoYXQgYXJlIHN0aWxsIGFjY2VwdGVkXG5cdFx0XHQvLyBieSBjb21tb24gYnJvd3NlcnMuXG5cdFx0XHQvLyBBbHdheXMgdXNpbmcgWl9TWU5DX0ZMVVNIIGlzIHdoYXQgY1VSTCBkb2VzLlxuXHRcdFx0Y29uc3QgemxpYk9wdGlvbnMgPSB7XG5cdFx0XHRcdGZsdXNoOiB6bGliLlpfU1lOQ19GTFVTSCxcblx0XHRcdFx0ZmluaXNoRmx1c2g6IHpsaWIuWl9TWU5DX0ZMVVNIXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBGb3IgZ3ppcFxuXHRcdFx0aWYgKGNvZGluZ3MgPT09ICdnemlwJyB8fCBjb2RpbmdzID09PSAneC1nemlwJykge1xuXHRcdFx0XHRib2R5ID0gcHVtcChib2R5LCB6bGliLmNyZWF0ZUd1bnppcCh6bGliT3B0aW9ucyksIGVycm9yID0+IHtcblx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2VPcHRpb25zKTtcblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIGRlZmxhdGVcblx0XHRcdGlmIChjb2RpbmdzID09PSAnZGVmbGF0ZScgfHwgY29kaW5ncyA9PT0gJ3gtZGVmbGF0ZScpIHtcblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBpbmZhbW91cyByYXcgZGVmbGF0ZSByZXNwb25zZSBmcm9tIG9sZCBzZXJ2ZXJzXG5cdFx0XHRcdC8vIGEgaGFjayBmb3Igb2xkIElJUyBhbmQgQXBhY2hlIHNlcnZlcnNcblx0XHRcdFx0Y29uc3QgcmF3ID0gcHVtcChyZXNwb25zZV8sIG5ldyBQYXNzVGhyb3VnaCgpLCBlcnJvciA9PiB7XG5cdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJhdy5vbmNlKCdkYXRhJywgY2h1bmsgPT4ge1xuXHRcdFx0XHRcdC8vIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM3NTE5ODI4XG5cdFx0XHRcdFx0aWYgKChjaHVua1swXSAmIDB4MEYpID09PSAweDA4KSB7XG5cdFx0XHRcdFx0XHRib2R5ID0gcHVtcChib2R5LCB6bGliLmNyZWF0ZUluZmxhdGUoKSwgZXJyb3IgPT4ge1xuXHRcdFx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ym9keSA9IHB1bXAoYm9keSwgemxpYi5jcmVhdGVJbmZsYXRlUmF3KCksIGVycm9yID0+IHtcblx0XHRcdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2VPcHRpb25zKTtcblx0XHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJhdy5vbmNlKCdlbmQnLCAoKSA9PiB7XG5cdFx0XHRcdFx0Ly8gU29tZSBvbGQgSUlTIHNlcnZlcnMgcmV0dXJuIHplcm8tbGVuZ3RoIE9LIGRlZmxhdGUgcmVzcG9uc2VzLCBzb1xuXHRcdFx0XHRcdC8vICdkYXRhJyBpcyBuZXZlciBlbWl0dGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9wdWxsLzkwM1xuXHRcdFx0XHRcdGlmICghcmVzcG9uc2UpIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlT3B0aW9ucyk7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBiclxuXHRcdFx0aWYgKGNvZGluZ3MgPT09ICdicicpIHtcblx0XHRcdFx0Ym9keSA9IHB1bXAoYm9keSwgemxpYi5jcmVhdGVCcm90bGlEZWNvbXByZXNzKCksIGVycm9yID0+IHtcblx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2VPcHRpb25zKTtcblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCB1c2UgcmVzcG9uc2UgYXMtaXNcblx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlT3B0aW9ucyk7XG5cdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHR9KTtcblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG5cdFx0d3JpdGVUb1N0cmVhbShyZXF1ZXN0XywgcmVxdWVzdCkuY2F0Y2gocmVqZWN0KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGZpeFJlc3BvbnNlQ2h1bmtlZFRyYW5zZmVyQmFkRW5kaW5nKHJlcXVlc3QsIGVycm9yQ2FsbGJhY2spIHtcblx0Y29uc3QgTEFTVF9DSFVOSyA9IEJ1ZmZlci5mcm9tKCcwXFxyXFxuXFxyXFxuJyk7XG5cblx0bGV0IGlzQ2h1bmtlZFRyYW5zZmVyID0gZmFsc2U7XG5cdGxldCBwcm9wZXJMYXN0Q2h1bmtSZWNlaXZlZCA9IGZhbHNlO1xuXHRsZXQgcHJldmlvdXNDaHVuaztcblxuXHRyZXF1ZXN0Lm9uKCdyZXNwb25zZScsIHJlc3BvbnNlID0+IHtcblx0XHRjb25zdCB7aGVhZGVyc30gPSByZXNwb25zZTtcblx0XHRpc0NodW5rZWRUcmFuc2ZlciA9IGhlYWRlcnNbJ3RyYW5zZmVyLWVuY29kaW5nJ10gPT09ICdjaHVua2VkJyAmJiAhaGVhZGVyc1snY29udGVudC1sZW5ndGgnXTtcblx0fSk7XG5cblx0cmVxdWVzdC5vbignc29ja2V0Jywgc29ja2V0ID0+IHtcblx0XHRjb25zdCBvblNvY2tldENsb3NlID0gKCkgPT4ge1xuXHRcdFx0aWYgKGlzQ2h1bmtlZFRyYW5zZmVyICYmICFwcm9wZXJMYXN0Q2h1bmtSZWNlaXZlZCkge1xuXHRcdFx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcignUHJlbWF0dXJlIGNsb3NlJyk7XG5cdFx0XHRcdGVycm9yLmNvZGUgPSAnRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UnO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGVycm9yKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3Qgb25EYXRhID0gYnVmID0+IHtcblx0XHRcdHByb3Blckxhc3RDaHVua1JlY2VpdmVkID0gQnVmZmVyLmNvbXBhcmUoYnVmLnNsaWNlKC01KSwgTEFTVF9DSFVOSykgPT09IDA7XG5cblx0XHRcdC8vIFNvbWV0aW1lcyBmaW5hbCAwLWxlbmd0aCBjaHVuayBhbmQgZW5kIG9mIG1lc3NhZ2UgY29kZSBhcmUgaW4gc2VwYXJhdGUgcGFja2V0c1xuXHRcdFx0aWYgKCFwcm9wZXJMYXN0Q2h1bmtSZWNlaXZlZCAmJiBwcmV2aW91c0NodW5rKSB7XG5cdFx0XHRcdHByb3Blckxhc3RDaHVua1JlY2VpdmVkID0gKFxuXHRcdFx0XHRcdEJ1ZmZlci5jb21wYXJlKHByZXZpb3VzQ2h1bmsuc2xpY2UoLTMpLCBMQVNUX0NIVU5LLnNsaWNlKDAsIDMpKSA9PT0gMCAmJlxuXHRcdFx0XHRcdEJ1ZmZlci5jb21wYXJlKGJ1Zi5zbGljZSgtMiksIExBU1RfQ0hVTksuc2xpY2UoMykpID09PSAwXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdHByZXZpb3VzQ2h1bmsgPSBidWY7XG5cdFx0fTtcblxuXHRcdHNvY2tldC5wcmVwZW5kTGlzdGVuZXIoJ2Nsb3NlJywgb25Tb2NrZXRDbG9zZSk7XG5cdFx0c29ja2V0Lm9uKCdkYXRhJywgb25EYXRhKTtcblxuXHRcdHJlcXVlc3Qub24oJ2Nsb3NlJywgKCkgPT4ge1xuXHRcdFx0c29ja2V0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uU29ja2V0Q2xvc2UpO1xuXHRcdFx0c29ja2V0LnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25EYXRhKTtcblx0XHR9KTtcblx0fSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/request.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/request.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Request),\n/* harmony export */   getNodeRequestOptions: () => (/* binding */ getNodeRequestOptions)\n/* harmony export */ });\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./headers.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./body.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/is.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is.js\");\n/* harmony import */ var _utils_get_search_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/get-search.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/get-search.js\");\n/* harmony import */ var _utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/referrer.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/referrer.js\");\n/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\n\n\n\n\n\n\n\n\nconst INTERNALS = Symbol('Request internals');\n\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */\nconst isRequest = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object[INTERNALS] === 'object'\n\t);\n};\n\nconst doBadDataWarn = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(() => {},\n\t'.data is not a valid RequestInit property, use .body instead',\n\t'https://github.com/node-fetch/node-fetch/issues/1000 (request)');\n\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request extends _body_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n\tconstructor(input, init = {}) {\n\t\tlet parsedURL;\n\n\t\t// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n\t\tif (isRequest(input)) {\n\t\t\tparsedURL = new URL(input.url);\n\t\t} else {\n\t\t\tparsedURL = new URL(input);\n\t\t\tinput = {};\n\t\t}\n\n\t\tif (parsedURL.username !== '' || parsedURL.password !== '') {\n\t\t\tthrow new TypeError(`${parsedURL} is an url with embedded credentials.`);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tif (/^(delete|get|head|options|post|put)$/i.test(method)) {\n\t\t\tmethod = method.toUpperCase();\n\t\t}\n\n\t\tif (!isRequest(init) && 'data' in init) {\n\t\t\tdoBadDataWarn();\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif ((init.body != null || (isRequest(input) && input.body !== null)) &&\n\t\t\t(method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tconst inputBody = init.body ?\n\t\t\tinit.body :\n\t\t\t(isRequest(input) && input.body !== null ?\n\t\t\t\t(0,_body_js__WEBPACK_IMPORTED_MODULE_2__.clone)(input) :\n\t\t\t\tnull);\n\n\t\tsuper(inputBody, {\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new _headers_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](init.headers || input.headers || {});\n\n\t\tif (inputBody !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.extractContentType)(inputBody, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.set('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ?\n\t\t\tinput.signal :\n\t\t\tnull;\n\t\tif ('signal' in init) {\n\t\t\tsignal = init.signal;\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif (signal != null && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_4__.isAbortSignal)(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');\n\t\t}\n\n\t\t// §5.4, Request constructor steps, step 15.1\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tlet referrer = init.referrer == null ? input.referrer : init.referrer;\n\t\tif (referrer === '') {\n\t\t\t// §5.4, Request constructor steps, step 15.2\n\t\t\treferrer = 'no-referrer';\n\t\t} else if (referrer) {\n\t\t\t// §5.4, Request constructor steps, step 15.3.1, 15.3.2\n\t\t\tconst parsedReferrer = new URL(referrer);\n\t\t\t// §5.4, Request constructor steps, step 15.3.3, 15.3.4\n\t\t\treferrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;\n\t\t} else {\n\t\t\treferrer = undefined;\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal,\n\t\t\treferrer\n\t\t};\n\n\t\t// Node-fetch-only options\n\t\tthis.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;\n\t\tthis.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t\tthis.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n\t\tthis.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n\n\t\t// §5.4, Request constructor steps, step 16.\n\t\t// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n\t\tthis.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';\n\t}\n\n\t/** @returns {string} */\n\tget method() {\n\t\treturn this[INTERNALS].method;\n\t}\n\n\t/** @returns {string} */\n\tget url() {\n\t\treturn (0,node_url__WEBPACK_IMPORTED_MODULE_0__.format)(this[INTERNALS].parsedURL);\n\t}\n\n\t/** @returns {Headers} */\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS].redirect;\n\t}\n\n\t/** @returns {AbortSignal} */\n\tget signal() {\n\t\treturn this[INTERNALS].signal;\n\t}\n\n\t// https://fetch.spec.whatwg.org/#dom-request-referrer\n\tget referrer() {\n\t\tif (this[INTERNALS].referrer === 'no-referrer') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer === 'client') {\n\t\t\treturn 'about:client';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer) {\n\t\t\treturn this[INTERNALS].referrer.toString();\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget referrerPolicy() {\n\t\treturn this[INTERNALS].referrerPolicy;\n\t}\n\n\tset referrerPolicy(referrerPolicy) {\n\t\tthis[INTERNALS].referrerPolicy = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.validateReferrerPolicy)(referrerPolicy);\n\t}\n\n\t/**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Request';\n\t}\n}\n\nObject.defineProperties(Request.prototype, {\n\tmethod: {enumerable: true},\n\turl: {enumerable: true},\n\theaders: {enumerable: true},\n\tredirect: {enumerable: true},\n\tclone: {enumerable: true},\n\tsignal: {enumerable: true},\n\treferrer: {enumerable: true},\n\treferrerPolicy: {enumerable: true}\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */\nconst getNodeRequestOptions = request => {\n\tconst {parsedURL} = request[INTERNALS];\n\tconst headers = new _headers_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](request[INTERNALS].headers);\n\n\t// Fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body === null && /^(post|put)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\n\tif (request.body !== null) {\n\t\tconst totalBytes = (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.getTotalBytes)(request);\n\t\t// Set Content-Length if totalBytes is a number (that is not NaN)\n\t\tif (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// 4.1. Main fetch, step 2.6\n\t// > If request's referrer policy is the empty string, then set request's referrer policy to the\n\t// > default referrer policy.\n\tif (request.referrerPolicy === '') {\n\t\trequest.referrerPolicy = _utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_REFERRER_POLICY;\n\t}\n\n\t// 4.1. Main fetch, step 2.7\n\t// > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n\t// > determine request's referrer.\n\tif (request.referrer && request.referrer !== 'no-referrer') {\n\t\trequest[INTERNALS].referrer = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.determineRequestsReferrer)(request);\n\t} else {\n\t\trequest[INTERNALS].referrer = 'no-referrer';\n\t}\n\n\t// 4.5. HTTP-network-or-cache fetch, step 6.9\n\t// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n\t// >  and isomorphic encoded, to httpRequest's header list.\n\tif (request[INTERNALS].referrer instanceof URL) {\n\t\theaders.set('Referer', request.referrer);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip, deflate, br');\n\t}\n\n\tlet {agent} = request;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\tconst search = (0,_utils_get_search_js__WEBPACK_IMPORTED_MODULE_6__.getSearch)(parsedURL);\n\n\t// Pass the full URL directly to request(), but overwrite the following\n\t// options:\n\tconst options = {\n\t\t// Overwrite search to retain trailing ? (issue #776)\n\t\tpath: parsedURL.pathname + search,\n\t\t// The following options are not expressed in the URL\n\t\tmethod: request.method,\n\t\theaders: headers[Symbol.for('nodejs.util.inspect.custom')](),\n\t\tinsecureHTTPParser: request.insecureHTTPParser,\n\t\tagent\n\t};\n\n\treturn {\n\t\t/** @type {URL} */\n\t\tparsedURL,\n\t\toptions\n\t};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3JlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZDO0FBQ1Q7QUFDRDtBQUNzQztBQUM3QjtBQUNJO0FBR25COztBQUU3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEdBQUc7QUFDZixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLG9EQUFTLFNBQVM7QUFDeEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSxzQkFBc0IsZ0RBQUk7QUFDekMsNkJBQTZCO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEIsV0FBVztBQUNyQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLCtDQUFLO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUgsc0JBQXNCLG1EQUFPLG9DQUFvQzs7QUFFakU7QUFDQSx1QkFBdUIsNERBQWtCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QiwyREFBYTtBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxTQUFTLGdEQUFTO0FBQ2xCOztBQUVBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DLDBFQUFzQjtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVSxpQkFBaUI7QUFDM0IsT0FBTyxpQkFBaUI7QUFDeEIsV0FBVyxpQkFBaUI7QUFDNUIsWUFBWSxpQkFBaUI7QUFDN0IsU0FBUyxpQkFBaUI7QUFDMUIsVUFBVSxpQkFBaUI7QUFDM0IsWUFBWSxpQkFBaUI7QUFDN0Isa0JBQWtCO0FBQ2xCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDTztBQUNQLFFBQVEsV0FBVztBQUNuQixxQkFBcUIsbURBQU87O0FBRTVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsdURBQWE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdUVBQXVCO0FBQ2xEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDZFQUF5QjtBQUN6RCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTSxPQUFPO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCLCtEQUFTOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3JlcXVlc3QuanM/NTRkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlcXVlc3QuanNcbiAqXG4gKiBSZXF1ZXN0IGNsYXNzIGNvbnRhaW5zIHNlcnZlciBvbmx5IG9wdGlvbnNcbiAqXG4gKiBBbGwgc3BlYyBhbGdvcml0aG0gc3RlcCBudW1iZXJzIGFyZSBiYXNlZCBvbiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy9jb21taXQtc25hcHNob3RzL2FlNzE2ODIyY2IzYTYxODQzMjI2Y2QwOTBlZWZjNjU4OTQ0NmMxZDIvLlxuICovXG5cbmltcG9ydCB7Zm9ybWF0IGFzIGZvcm1hdFVybH0gZnJvbSAnbm9kZTp1cmwnO1xuaW1wb3J0IHtkZXByZWNhdGV9IGZyb20gJ25vZGU6dXRpbCc7XG5pbXBvcnQgSGVhZGVycyBmcm9tICcuL2hlYWRlcnMuanMnO1xuaW1wb3J0IEJvZHksIHtjbG9uZSwgZXh0cmFjdENvbnRlbnRUeXBlLCBnZXRUb3RhbEJ5dGVzfSBmcm9tICcuL2JvZHkuanMnO1xuaW1wb3J0IHtpc0Fib3J0U2lnbmFsfSBmcm9tICcuL3V0aWxzL2lzLmpzJztcbmltcG9ydCB7Z2V0U2VhcmNofSBmcm9tICcuL3V0aWxzL2dldC1zZWFyY2guanMnO1xuaW1wb3J0IHtcblx0dmFsaWRhdGVSZWZlcnJlclBvbGljeSwgZGV0ZXJtaW5lUmVxdWVzdHNSZWZlcnJlciwgREVGQVVMVF9SRUZFUlJFUl9QT0xJQ1lcbn0gZnJvbSAnLi91dGlscy9yZWZlcnJlci5qcyc7XG5cbmNvbnN0IElOVEVSTkFMUyA9IFN5bWJvbCgnUmVxdWVzdCBpbnRlcm5hbHMnKTtcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhbiBpbnN0YW5jZSBvZiBSZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSAgeyp9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaXNSZXF1ZXN0ID0gb2JqZWN0ID0+IHtcblx0cmV0dXJuIChcblx0XHR0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiBvYmplY3RbSU5URVJOQUxTXSA9PT0gJ29iamVjdCdcblx0KTtcbn07XG5cbmNvbnN0IGRvQmFkRGF0YVdhcm4gPSBkZXByZWNhdGUoKCkgPT4ge30sXG5cdCcuZGF0YSBpcyBub3QgYSB2YWxpZCBSZXF1ZXN0SW5pdCBwcm9wZXJ0eSwgdXNlIC5ib2R5IGluc3RlYWQnLFxuXHQnaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9pc3N1ZXMvMTAwMCAocmVxdWVzdCknKTtcblxuLyoqXG4gKiBSZXF1ZXN0IGNsYXNzXG4gKlxuICogUmVmOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jcmVxdWVzdC1jbGFzc1xuICpcbiAqIEBwYXJhbSAgIE1peGVkICAgaW5wdXQgIFVybCBvciBSZXF1ZXN0IGluc3RhbmNlXG4gKiBAcGFyYW0gICBPYmplY3QgIGluaXQgICBDdXN0b20gb3B0aW9uc1xuICogQHJldHVybiAgVm9pZFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0IGV4dGVuZHMgQm9keSB7XG5cdGNvbnN0cnVjdG9yKGlucHV0LCBpbml0ID0ge30pIHtcblx0XHRsZXQgcGFyc2VkVVJMO1xuXG5cdFx0Ly8gTm9ybWFsaXplIGlucHV0IGFuZCBmb3JjZSBVUkwgdG8gYmUgZW5jb2RlZCBhcyBVVEYtOCAoaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9pc3N1ZXMvMjQ1KVxuXHRcdGlmIChpc1JlcXVlc3QoaW5wdXQpKSB7XG5cdFx0XHRwYXJzZWRVUkwgPSBuZXcgVVJMKGlucHV0LnVybCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhcnNlZFVSTCA9IG5ldyBVUkwoaW5wdXQpO1xuXHRcdFx0aW5wdXQgPSB7fTtcblx0XHR9XG5cblx0XHRpZiAocGFyc2VkVVJMLnVzZXJuYW1lICE9PSAnJyB8fCBwYXJzZWRVUkwucGFzc3dvcmQgIT09ICcnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAke3BhcnNlZFVSTH0gaXMgYW4gdXJsIHdpdGggZW1iZWRkZWQgY3JlZGVudGlhbHMuYCk7XG5cdFx0fVxuXG5cdFx0bGV0IG1ldGhvZCA9IGluaXQubWV0aG9kIHx8IGlucHV0Lm1ldGhvZCB8fCAnR0VUJztcblx0XHRpZiAoL14oZGVsZXRlfGdldHxoZWFkfG9wdGlvbnN8cG9zdHxwdXQpJC9pLnRlc3QobWV0aG9kKSkge1xuXHRcdFx0bWV0aG9kID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFpc1JlcXVlc3QoaW5pdCkgJiYgJ2RhdGEnIGluIGluaXQpIHtcblx0XHRcdGRvQmFkRGF0YVdhcm4oKTtcblx0XHR9XG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCwgZXFlcWVxXG5cdFx0aWYgKChpbml0LmJvZHkgIT0gbnVsbCB8fCAoaXNSZXF1ZXN0KGlucHV0KSAmJiBpbnB1dC5ib2R5ICE9PSBudWxsKSkgJiZcblx0XHRcdChtZXRob2QgPT09ICdHRVQnIHx8IG1ldGhvZCA9PT0gJ0hFQUQnKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUmVxdWVzdCB3aXRoIEdFVC9IRUFEIG1ldGhvZCBjYW5ub3QgaGF2ZSBib2R5Jyk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaW5wdXRCb2R5ID0gaW5pdC5ib2R5ID9cblx0XHRcdGluaXQuYm9keSA6XG5cdFx0XHQoaXNSZXF1ZXN0KGlucHV0KSAmJiBpbnB1dC5ib2R5ICE9PSBudWxsID9cblx0XHRcdFx0Y2xvbmUoaW5wdXQpIDpcblx0XHRcdFx0bnVsbCk7XG5cblx0XHRzdXBlcihpbnB1dEJvZHksIHtcblx0XHRcdHNpemU6IGluaXQuc2l6ZSB8fCBpbnB1dC5zaXplIHx8IDBcblx0XHR9KTtcblxuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbml0LmhlYWRlcnMgfHwgaW5wdXQuaGVhZGVycyB8fCB7fSk7XG5cblx0XHRpZiAoaW5wdXRCb2R5ICE9PSBudWxsICYmICFoZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJykpIHtcblx0XHRcdGNvbnN0IGNvbnRlbnRUeXBlID0gZXh0cmFjdENvbnRlbnRUeXBlKGlucHV0Qm9keSwgdGhpcyk7XG5cdFx0XHRpZiAoY29udGVudFR5cGUpIHtcblx0XHRcdFx0aGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGNvbnRlbnRUeXBlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRsZXQgc2lnbmFsID0gaXNSZXF1ZXN0KGlucHV0KSA/XG5cdFx0XHRpbnB1dC5zaWduYWwgOlxuXHRcdFx0bnVsbDtcblx0XHRpZiAoJ3NpZ25hbCcgaW4gaW5pdCkge1xuXHRcdFx0c2lnbmFsID0gaW5pdC5zaWduYWw7XG5cdFx0fVxuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsIGVxZXFlcVxuXHRcdGlmIChzaWduYWwgIT0gbnVsbCAmJiAhaXNBYm9ydFNpZ25hbChzaWduYWwpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBzaWduYWwgdG8gYmUgYW4gaW5zdGFuY2VvZiBBYm9ydFNpZ25hbCBvciBFdmVudFRhcmdldCcpO1xuXHRcdH1cblxuXHRcdC8vIMKnNS40LCBSZXF1ZXN0IGNvbnN0cnVjdG9yIHN0ZXBzLCBzdGVwIDE1LjFcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCwgZXFlcWVxXG5cdFx0bGV0IHJlZmVycmVyID0gaW5pdC5yZWZlcnJlciA9PSBudWxsID8gaW5wdXQucmVmZXJyZXIgOiBpbml0LnJlZmVycmVyO1xuXHRcdGlmIChyZWZlcnJlciA9PT0gJycpIHtcblx0XHRcdC8vIMKnNS40LCBSZXF1ZXN0IGNvbnN0cnVjdG9yIHN0ZXBzLCBzdGVwIDE1LjJcblx0XHRcdHJlZmVycmVyID0gJ25vLXJlZmVycmVyJztcblx0XHR9IGVsc2UgaWYgKHJlZmVycmVyKSB7XG5cdFx0XHQvLyDCpzUuNCwgUmVxdWVzdCBjb25zdHJ1Y3RvciBzdGVwcywgc3RlcCAxNS4zLjEsIDE1LjMuMlxuXHRcdFx0Y29uc3QgcGFyc2VkUmVmZXJyZXIgPSBuZXcgVVJMKHJlZmVycmVyKTtcblx0XHRcdC8vIMKnNS40LCBSZXF1ZXN0IGNvbnN0cnVjdG9yIHN0ZXBzLCBzdGVwIDE1LjMuMywgMTUuMy40XG5cdFx0XHRyZWZlcnJlciA9IC9eYWJvdXQ6KFxcL1xcLyk/Y2xpZW50JC8udGVzdChwYXJzZWRSZWZlcnJlcikgPyAnY2xpZW50JyA6IHBhcnNlZFJlZmVycmVyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZWZlcnJlciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHR0aGlzW0lOVEVSTkFMU10gPSB7XG5cdFx0XHRtZXRob2QsXG5cdFx0XHRyZWRpcmVjdDogaW5pdC5yZWRpcmVjdCB8fCBpbnB1dC5yZWRpcmVjdCB8fCAnZm9sbG93Jyxcblx0XHRcdGhlYWRlcnMsXG5cdFx0XHRwYXJzZWRVUkwsXG5cdFx0XHRzaWduYWwsXG5cdFx0XHRyZWZlcnJlclxuXHRcdH07XG5cblx0XHQvLyBOb2RlLWZldGNoLW9ubHkgb3B0aW9uc1xuXHRcdHRoaXMuZm9sbG93ID0gaW5pdC5mb2xsb3cgPT09IHVuZGVmaW5lZCA/IChpbnB1dC5mb2xsb3cgPT09IHVuZGVmaW5lZCA/IDIwIDogaW5wdXQuZm9sbG93KSA6IGluaXQuZm9sbG93O1xuXHRcdHRoaXMuY29tcHJlc3MgPSBpbml0LmNvbXByZXNzID09PSB1bmRlZmluZWQgPyAoaW5wdXQuY29tcHJlc3MgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBpbnB1dC5jb21wcmVzcykgOiBpbml0LmNvbXByZXNzO1xuXHRcdHRoaXMuY291bnRlciA9IGluaXQuY291bnRlciB8fCBpbnB1dC5jb3VudGVyIHx8IDA7XG5cdFx0dGhpcy5hZ2VudCA9IGluaXQuYWdlbnQgfHwgaW5wdXQuYWdlbnQ7XG5cdFx0dGhpcy5oaWdoV2F0ZXJNYXJrID0gaW5pdC5oaWdoV2F0ZXJNYXJrIHx8IGlucHV0LmhpZ2hXYXRlck1hcmsgfHwgMTYzODQ7XG5cdFx0dGhpcy5pbnNlY3VyZUhUVFBQYXJzZXIgPSBpbml0Lmluc2VjdXJlSFRUUFBhcnNlciB8fCBpbnB1dC5pbnNlY3VyZUhUVFBQYXJzZXIgfHwgZmFsc2U7XG5cblx0XHQvLyDCpzUuNCwgUmVxdWVzdCBjb25zdHJ1Y3RvciBzdGVwcywgc3RlcCAxNi5cblx0XHQvLyBEZWZhdWx0IGlzIGVtcHR5IHN0cmluZyBwZXIgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtcmVxdWVzdC1yZWZlcnJlci1wb2xpY3lcblx0XHR0aGlzLnJlZmVycmVyUG9saWN5ID0gaW5pdC5yZWZlcnJlclBvbGljeSB8fCBpbnB1dC5yZWZlcnJlclBvbGljeSB8fCAnJztcblx0fVxuXG5cdC8qKiBAcmV0dXJucyB7c3RyaW5nfSAqL1xuXHRnZXQgbWV0aG9kKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10ubWV0aG9kO1xuXHR9XG5cblx0LyoqIEByZXR1cm5zIHtzdHJpbmd9ICovXG5cdGdldCB1cmwoKSB7XG5cdFx0cmV0dXJuIGZvcm1hdFVybCh0aGlzW0lOVEVSTkFMU10ucGFyc2VkVVJMKTtcblx0fVxuXG5cdC8qKiBAcmV0dXJucyB7SGVhZGVyc30gKi9cblx0Z2V0IGhlYWRlcnMoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5oZWFkZXJzO1xuXHR9XG5cblx0Z2V0IHJlZGlyZWN0KCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10ucmVkaXJlY3Q7XG5cdH1cblxuXHQvKiogQHJldHVybnMge0Fib3J0U2lnbmFsfSAqL1xuXHRnZXQgc2lnbmFsKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10uc2lnbmFsO1xuXHR9XG5cblx0Ly8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0LXJlZmVycmVyXG5cdGdldCByZWZlcnJlcigpIHtcblx0XHRpZiAodGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyID09PSAnbm8tcmVmZXJyZXInKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXNbSU5URVJOQUxTXS5yZWZlcnJlciA9PT0gJ2NsaWVudCcpIHtcblx0XHRcdHJldHVybiAnYWJvdXQ6Y2xpZW50Jztcblx0XHR9XG5cblx0XHRpZiAodGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyKSB7XG5cdFx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyLnRvU3RyaW5nKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdGdldCByZWZlcnJlclBvbGljeSgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyUG9saWN5O1xuXHR9XG5cblx0c2V0IHJlZmVycmVyUG9saWN5KHJlZmVycmVyUG9saWN5KSB7XG5cdFx0dGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyUG9saWN5ID0gdmFsaWRhdGVSZWZlcnJlclBvbGljeShyZWZlcnJlclBvbGljeSk7XG5cdH1cblxuXHQvKipcblx0ICogQ2xvbmUgdGhpcyByZXF1ZXN0XG5cdCAqXG5cdCAqIEByZXR1cm4gIFJlcXVlc3Rcblx0ICovXG5cdGNsb25lKCkge1xuXHRcdHJldHVybiBuZXcgUmVxdWVzdCh0aGlzKTtcblx0fVxuXG5cdGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcblx0XHRyZXR1cm4gJ1JlcXVlc3QnO1xuXHR9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlcXVlc3QucHJvdG90eXBlLCB7XG5cdG1ldGhvZDoge2VudW1lcmFibGU6IHRydWV9LFxuXHR1cmw6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0aGVhZGVyczoge2VudW1lcmFibGU6IHRydWV9LFxuXHRyZWRpcmVjdDoge2VudW1lcmFibGU6IHRydWV9LFxuXHRjbG9uZToge2VudW1lcmFibGU6IHRydWV9LFxuXHRzaWduYWw6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0cmVmZXJyZXI6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0cmVmZXJyZXJQb2xpY3k6IHtlbnVtZXJhYmxlOiB0cnVlfVxufSk7XG5cbi8qKlxuICogQ29udmVydCBhIFJlcXVlc3QgdG8gTm9kZS5qcyBodHRwIHJlcXVlc3Qgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge1JlcXVlc3R9IHJlcXVlc3QgLSBBIFJlcXVlc3QgaW5zdGFuY2VcbiAqIEByZXR1cm4gVGhlIG9wdGlvbnMgb2JqZWN0IHRvIGJlIHBhc3NlZCB0byBodHRwLnJlcXVlc3RcbiAqL1xuZXhwb3J0IGNvbnN0IGdldE5vZGVSZXF1ZXN0T3B0aW9ucyA9IHJlcXVlc3QgPT4ge1xuXHRjb25zdCB7cGFyc2VkVVJMfSA9IHJlcXVlc3RbSU5URVJOQUxTXTtcblx0Y29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlcXVlc3RbSU5URVJOQUxTXS5oZWFkZXJzKTtcblxuXHQvLyBGZXRjaCBzdGVwIDEuM1xuXHRpZiAoIWhlYWRlcnMuaGFzKCdBY2NlcHQnKSkge1xuXHRcdGhlYWRlcnMuc2V0KCdBY2NlcHQnLCAnKi8qJyk7XG5cdH1cblxuXHQvLyBIVFRQLW5ldHdvcmstb3ItY2FjaGUgZmV0Y2ggc3RlcHMgMi40LTIuN1xuXHRsZXQgY29udGVudExlbmd0aFZhbHVlID0gbnVsbDtcblx0aWYgKHJlcXVlc3QuYm9keSA9PT0gbnVsbCAmJiAvXihwb3N0fHB1dCkkL2kudGVzdChyZXF1ZXN0Lm1ldGhvZCkpIHtcblx0XHRjb250ZW50TGVuZ3RoVmFsdWUgPSAnMCc7XG5cdH1cblxuXHRpZiAocmVxdWVzdC5ib2R5ICE9PSBudWxsKSB7XG5cdFx0Y29uc3QgdG90YWxCeXRlcyA9IGdldFRvdGFsQnl0ZXMocmVxdWVzdCk7XG5cdFx0Ly8gU2V0IENvbnRlbnQtTGVuZ3RoIGlmIHRvdGFsQnl0ZXMgaXMgYSBudW1iZXIgKHRoYXQgaXMgbm90IE5hTilcblx0XHRpZiAodHlwZW9mIHRvdGFsQnl0ZXMgPT09ICdudW1iZXInICYmICFOdW1iZXIuaXNOYU4odG90YWxCeXRlcykpIHtcblx0XHRcdGNvbnRlbnRMZW5ndGhWYWx1ZSA9IFN0cmluZyh0b3RhbEJ5dGVzKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoY29udGVudExlbmd0aFZhbHVlKSB7XG5cdFx0aGVhZGVycy5zZXQoJ0NvbnRlbnQtTGVuZ3RoJywgY29udGVudExlbmd0aFZhbHVlKTtcblx0fVxuXG5cdC8vIDQuMS4gTWFpbiBmZXRjaCwgc3RlcCAyLjZcblx0Ly8gPiBJZiByZXF1ZXN0J3MgcmVmZXJyZXIgcG9saWN5IGlzIHRoZSBlbXB0eSBzdHJpbmcsIHRoZW4gc2V0IHJlcXVlc3QncyByZWZlcnJlciBwb2xpY3kgdG8gdGhlXG5cdC8vID4gZGVmYXVsdCByZWZlcnJlciBwb2xpY3kuXG5cdGlmIChyZXF1ZXN0LnJlZmVycmVyUG9saWN5ID09PSAnJykge1xuXHRcdHJlcXVlc3QucmVmZXJyZXJQb2xpY3kgPSBERUZBVUxUX1JFRkVSUkVSX1BPTElDWTtcblx0fVxuXG5cdC8vIDQuMS4gTWFpbiBmZXRjaCwgc3RlcCAyLjdcblx0Ly8gPiBJZiByZXF1ZXN0J3MgcmVmZXJyZXIgaXMgbm90IFwibm8tcmVmZXJyZXJcIiwgc2V0IHJlcXVlc3QncyByZWZlcnJlciB0byB0aGUgcmVzdWx0IG9mIGludm9raW5nXG5cdC8vID4gZGV0ZXJtaW5lIHJlcXVlc3QncyByZWZlcnJlci5cblx0aWYgKHJlcXVlc3QucmVmZXJyZXIgJiYgcmVxdWVzdC5yZWZlcnJlciAhPT0gJ25vLXJlZmVycmVyJykge1xuXHRcdHJlcXVlc3RbSU5URVJOQUxTXS5yZWZlcnJlciA9IGRldGVybWluZVJlcXVlc3RzUmVmZXJyZXIocmVxdWVzdCk7XG5cdH0gZWxzZSB7XG5cdFx0cmVxdWVzdFtJTlRFUk5BTFNdLnJlZmVycmVyID0gJ25vLXJlZmVycmVyJztcblx0fVxuXG5cdC8vIDQuNS4gSFRUUC1uZXR3b3JrLW9yLWNhY2hlIGZldGNoLCBzdGVwIDYuOVxuXHQvLyA+IElmIGh0dHBSZXF1ZXN0J3MgcmVmZXJyZXIgaXMgYSBVUkwsIHRoZW4gYXBwZW5kIGBSZWZlcmVyYC9odHRwUmVxdWVzdCdzIHJlZmVycmVyLCBzZXJpYWxpemVkXG5cdC8vID4gIGFuZCBpc29tb3JwaGljIGVuY29kZWQsIHRvIGh0dHBSZXF1ZXN0J3MgaGVhZGVyIGxpc3QuXG5cdGlmIChyZXF1ZXN0W0lOVEVSTkFMU10ucmVmZXJyZXIgaW5zdGFuY2VvZiBVUkwpIHtcblx0XHRoZWFkZXJzLnNldCgnUmVmZXJlcicsIHJlcXVlc3QucmVmZXJyZXIpO1xuXHR9XG5cblx0Ly8gSFRUUC1uZXR3b3JrLW9yLWNhY2hlIGZldGNoIHN0ZXAgMi4xMVxuXHRpZiAoIWhlYWRlcnMuaGFzKCdVc2VyLUFnZW50JykpIHtcblx0XHRoZWFkZXJzLnNldCgnVXNlci1BZ2VudCcsICdub2RlLWZldGNoJyk7XG5cdH1cblxuXHQvLyBIVFRQLW5ldHdvcmstb3ItY2FjaGUgZmV0Y2ggc3RlcCAyLjE1XG5cdGlmIChyZXF1ZXN0LmNvbXByZXNzICYmICFoZWFkZXJzLmhhcygnQWNjZXB0LUVuY29kaW5nJykpIHtcblx0XHRoZWFkZXJzLnNldCgnQWNjZXB0LUVuY29kaW5nJywgJ2d6aXAsIGRlZmxhdGUsIGJyJyk7XG5cdH1cblxuXHRsZXQge2FnZW50fSA9IHJlcXVlc3Q7XG5cdGlmICh0eXBlb2YgYWdlbnQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRhZ2VudCA9IGFnZW50KHBhcnNlZFVSTCk7XG5cdH1cblxuXHQvLyBIVFRQLW5ldHdvcmsgZmV0Y2ggc3RlcCA0LjJcblx0Ly8gY2h1bmtlZCBlbmNvZGluZyBpcyBoYW5kbGVkIGJ5IE5vZGUuanNcblxuXHRjb25zdCBzZWFyY2ggPSBnZXRTZWFyY2gocGFyc2VkVVJMKTtcblxuXHQvLyBQYXNzIHRoZSBmdWxsIFVSTCBkaXJlY3RseSB0byByZXF1ZXN0KCksIGJ1dCBvdmVyd3JpdGUgdGhlIGZvbGxvd2luZ1xuXHQvLyBvcHRpb25zOlxuXHRjb25zdCBvcHRpb25zID0ge1xuXHRcdC8vIE92ZXJ3cml0ZSBzZWFyY2ggdG8gcmV0YWluIHRyYWlsaW5nID8gKGlzc3VlICM3NzYpXG5cdFx0cGF0aDogcGFyc2VkVVJMLnBhdGhuYW1lICsgc2VhcmNoLFxuXHRcdC8vIFRoZSBmb2xsb3dpbmcgb3B0aW9ucyBhcmUgbm90IGV4cHJlc3NlZCBpbiB0aGUgVVJMXG5cdFx0bWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcblx0XHRoZWFkZXJzOiBoZWFkZXJzW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldKCksXG5cdFx0aW5zZWN1cmVIVFRQUGFyc2VyOiByZXF1ZXN0Lmluc2VjdXJlSFRUUFBhcnNlcixcblx0XHRhZ2VudFxuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0LyoqIEB0eXBlIHtVUkx9ICovXG5cdFx0cGFyc2VkVVJMLFxuXHRcdG9wdGlvbnNcblx0fTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/response.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/response.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Response)\n/* harmony export */ });\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./headers.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./body.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/is-redirect.js */ \"(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is-redirect.js\");\n/**\n * Response.js\n *\n * Response class provides content decoding\n */\n\n\n\n\n\nconst INTERNALS = Symbol('Response internals');\n\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response extends _body_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\tconstructor(body = null, options = {}) {\n\t\tsuper(body, options);\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\t\tconst status = options.status != null ? options.status : 200;\n\n\t\tconst headers = new _headers_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](options.headers);\n\n\t\tif (body !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = (0,_body_js__WEBPACK_IMPORTED_MODULE_0__.extractContentType)(body, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\ttype: 'default',\n\t\t\turl: options.url,\n\t\t\tstatus,\n\t\t\tstatusText: options.statusText || '',\n\t\t\theaders,\n\t\t\tcounter: options.counter,\n\t\t\thighWaterMark: options.highWaterMark\n\t\t};\n\t}\n\n\tget type() {\n\t\treturn this[INTERNALS].type;\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS].status;\n\t}\n\n\t/**\n\t * Convenience property representing if the request ended normally\n\t */\n\tget ok() {\n\t\treturn this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget highWaterMark() {\n\t\treturn this[INTERNALS].highWaterMark;\n\t}\n\n\t/**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */\n\tclone() {\n\t\treturn new Response((0,_body_js__WEBPACK_IMPORTED_MODULE_0__.clone)(this, this.highWaterMark), {\n\t\t\ttype: this.type,\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected,\n\t\t\tsize: this.size,\n\t\t\thighWaterMark: this.highWaterMark\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */\n\tstatic redirect(url, status = 302) {\n\t\tif (!(0,_utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_2__.isRedirect)(status)) {\n\t\t\tthrow new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n\t\t}\n\n\t\treturn new Response(null, {\n\t\t\theaders: {\n\t\t\t\tlocation: new URL(url).toString()\n\t\t\t},\n\t\t\tstatus\n\t\t});\n\t}\n\n\tstatic error() {\n\t\tconst response = new Response(null, {status: 0, statusText: ''});\n\t\tresponse[INTERNALS].type = 'error';\n\t\treturn response;\n\t}\n\n\tstatic json(data = undefined, init = {}) {\n\t\tconst body = JSON.stringify(data);\n\n\t\tif (body === undefined) {\n\t\t\tthrow new TypeError('data is not JSON serializable');\n\t\t}\n\n\t\tconst headers = new _headers_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](init && init.headers);\n\n\t\tif (!headers.has('content-type')) {\n\t\t\theaders.set('content-type', 'application/json');\n\t\t}\n\n\t\treturn new Response(body, {\n\t\t\t...init,\n\t\t\theaders\n\t\t});\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Response';\n\t}\n}\n\nObject.defineProperties(Response.prototype, {\n\ttype: {enumerable: true},\n\turl: {enumerable: true},\n\tstatus: {enumerable: true},\n\tok: {enumerable: true},\n\tredirected: {enumerable: true},\n\tstatusText: {enumerable: true},\n\theaders: {enumerable: true},\n\tclone: {enumerable: true}\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3Jlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVtQztBQUN1QjtBQUNSOztBQUVsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSx1QkFBdUIsZ0RBQUk7QUFDMUMsc0NBQXNDO0FBQ3RDOztBQUVBO0FBQ0E7O0FBRUEsc0JBQXNCLG1EQUFPOztBQUU3QjtBQUNBLHVCQUF1Qiw0REFBa0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsK0NBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLFlBQVksUUFBUTtBQUNwQixjQUFjLGFBQWE7QUFDM0I7QUFDQTtBQUNBLE9BQU8saUVBQVU7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSx1Q0FBdUMsMEJBQTBCO0FBQ2pFO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0M7QUFDeEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixtREFBTzs7QUFFN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsaUJBQWlCO0FBQ3pCLE9BQU8saUJBQWlCO0FBQ3hCLFVBQVUsaUJBQWlCO0FBQzNCLE1BQU0saUJBQWlCO0FBQ3ZCLGNBQWMsaUJBQWlCO0FBQy9CLGNBQWMsaUJBQWlCO0FBQy9CLFdBQVcsaUJBQWlCO0FBQzVCLFNBQVM7QUFDVCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3Jlc3BvbnNlLmpzP2ViMWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXNwb25zZS5qc1xuICpcbiAqIFJlc3BvbnNlIGNsYXNzIHByb3ZpZGVzIGNvbnRlbnQgZGVjb2RpbmdcbiAqL1xuXG5pbXBvcnQgSGVhZGVycyBmcm9tICcuL2hlYWRlcnMuanMnO1xuaW1wb3J0IEJvZHksIHtjbG9uZSwgZXh0cmFjdENvbnRlbnRUeXBlfSBmcm9tICcuL2JvZHkuanMnO1xuaW1wb3J0IHtpc1JlZGlyZWN0fSBmcm9tICcuL3V0aWxzL2lzLXJlZGlyZWN0LmpzJztcblxuY29uc3QgSU5URVJOQUxTID0gU3ltYm9sKCdSZXNwb25zZSBpbnRlcm5hbHMnKTtcblxuLyoqXG4gKiBSZXNwb25zZSBjbGFzc1xuICpcbiAqIFJlZjogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI3Jlc3BvbnNlLWNsYXNzXG4gKlxuICogQHBhcmFtICAgU3RyZWFtICBib2R5ICBSZWFkYWJsZSBzdHJlYW1cbiAqIEBwYXJhbSAgIE9iamVjdCAgb3B0cyAgUmVzcG9uc2Ugb3B0aW9uc1xuICogQHJldHVybiAgVm9pZFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNwb25zZSBleHRlbmRzIEJvZHkge1xuXHRjb25zdHJ1Y3Rvcihib2R5ID0gbnVsbCwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0c3VwZXIoYm9keSwgb3B0aW9ucyk7XG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCwgZXFlcWVxLCBuby1uZWdhdGVkLWNvbmRpdGlvblxuXHRcdGNvbnN0IHN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzICE9IG51bGwgPyBvcHRpb25zLnN0YXR1cyA6IDIwMDtcblxuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpO1xuXG5cdFx0aWYgKGJvZHkgIT09IG51bGwgJiYgIWhlYWRlcnMuaGFzKCdDb250ZW50LVR5cGUnKSkge1xuXHRcdFx0Y29uc3QgY29udGVudFR5cGUgPSBleHRyYWN0Q29udGVudFR5cGUoYm9keSwgdGhpcyk7XG5cdFx0XHRpZiAoY29udGVudFR5cGUpIHtcblx0XHRcdFx0aGVhZGVycy5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsIGNvbnRlbnRUeXBlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzW0lOVEVSTkFMU10gPSB7XG5cdFx0XHR0eXBlOiAnZGVmYXVsdCcsXG5cdFx0XHR1cmw6IG9wdGlvbnMudXJsLFxuXHRcdFx0c3RhdHVzLFxuXHRcdFx0c3RhdHVzVGV4dDogb3B0aW9ucy5zdGF0dXNUZXh0IHx8ICcnLFxuXHRcdFx0aGVhZGVycyxcblx0XHRcdGNvdW50ZXI6IG9wdGlvbnMuY291bnRlcixcblx0XHRcdGhpZ2hXYXRlck1hcms6IG9wdGlvbnMuaGlnaFdhdGVyTWFya1xuXHRcdH07XG5cdH1cblxuXHRnZXQgdHlwZSgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLnR5cGU7XG5cdH1cblxuXHRnZXQgdXJsKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10udXJsIHx8ICcnO1xuXHR9XG5cblx0Z2V0IHN0YXR1cygpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLnN0YXR1cztcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZW5pZW5jZSBwcm9wZXJ0eSByZXByZXNlbnRpbmcgaWYgdGhlIHJlcXVlc3QgZW5kZWQgbm9ybWFsbHlcblx0ICovXG5cdGdldCBvaygpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLnN0YXR1cyA+PSAyMDAgJiYgdGhpc1tJTlRFUk5BTFNdLnN0YXR1cyA8IDMwMDtcblx0fVxuXG5cdGdldCByZWRpcmVjdGVkKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10uY291bnRlciA+IDA7XG5cdH1cblxuXHRnZXQgc3RhdHVzVGV4dCgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLnN0YXR1c1RleHQ7XG5cdH1cblxuXHRnZXQgaGVhZGVycygpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLmhlYWRlcnM7XG5cdH1cblxuXHRnZXQgaGlnaFdhdGVyTWFyaygpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLmhpZ2hXYXRlck1hcms7XG5cdH1cblxuXHQvKipcblx0ICogQ2xvbmUgdGhpcyByZXNwb25zZVxuXHQgKlxuXHQgKiBAcmV0dXJuICBSZXNwb25zZVxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cdFx0cmV0dXJuIG5ldyBSZXNwb25zZShjbG9uZSh0aGlzLCB0aGlzLmhpZ2hXYXRlck1hcmspLCB7XG5cdFx0XHR0eXBlOiB0aGlzLnR5cGUsXG5cdFx0XHR1cmw6IHRoaXMudXJsLFxuXHRcdFx0c3RhdHVzOiB0aGlzLnN0YXR1cyxcblx0XHRcdHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcblx0XHRcdGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcblx0XHRcdG9rOiB0aGlzLm9rLFxuXHRcdFx0cmVkaXJlY3RlZDogdGhpcy5yZWRpcmVjdGVkLFxuXHRcdFx0c2l6ZTogdGhpcy5zaXplLFxuXHRcdFx0aGlnaFdhdGVyTWFyazogdGhpcy5oaWdoV2F0ZXJNYXJrXG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAgICBUaGUgVVJMIHRoYXQgdGhlIG5ldyByZXNwb25zZSBpcyB0byBvcmlnaW5hdGUgZnJvbS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1cyBBbiBvcHRpb25hbCBzdGF0dXMgY29kZSBmb3IgdGhlIHJlc3BvbnNlIChlLmcuLCAzMDIuKVxuXHQgKiBAcmV0dXJucyB7UmVzcG9uc2V9ICAgIEEgUmVzcG9uc2Ugb2JqZWN0LlxuXHQgKi9cblx0c3RhdGljIHJlZGlyZWN0KHVybCwgc3RhdHVzID0gMzAyKSB7XG5cdFx0aWYgKCFpc1JlZGlyZWN0KHN0YXR1cykpIHtcblx0XHRcdHRocm93IG5ldyBSYW5nZUVycm9yKCdGYWlsZWQgdG8gZXhlY3V0ZSBcInJlZGlyZWN0XCIgb24gXCJyZXNwb25zZVwiOiBJbnZhbGlkIHN0YXR1cyBjb2RlJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7XG5cdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdGxvY2F0aW9uOiBuZXcgVVJMKHVybCkudG9TdHJpbmcoKVxuXHRcdFx0fSxcblx0XHRcdHN0YXR1c1xuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIGVycm9yKCkge1xuXHRcdGNvbnN0IHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSk7XG5cdFx0cmVzcG9uc2VbSU5URVJOQUxTXS50eXBlID0gJ2Vycm9yJztcblx0XHRyZXR1cm4gcmVzcG9uc2U7XG5cdH1cblxuXHRzdGF0aWMganNvbihkYXRhID0gdW5kZWZpbmVkLCBpbml0ID0ge30pIHtcblx0XHRjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG5cblx0XHRpZiAoYm9keSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIGlzIG5vdCBKU09OIHNlcmlhbGl6YWJsZScpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbml0ICYmIGluaXQuaGVhZGVycyk7XG5cblx0XHRpZiAoIWhlYWRlcnMuaGFzKCdjb250ZW50LXR5cGUnKSkge1xuXHRcdFx0aGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBSZXNwb25zZShib2R5LCB7XG5cdFx0XHQuLi5pbml0LFxuXHRcdFx0aGVhZGVyc1xuXHRcdH0pO1xuXHR9XG5cblx0Z2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuXHRcdHJldHVybiAnUmVzcG9uc2UnO1xuXHR9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlc3BvbnNlLnByb3RvdHlwZSwge1xuXHR0eXBlOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdHVybDoge2VudW1lcmFibGU6IHRydWV9LFxuXHRzdGF0dXM6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0b2s6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0cmVkaXJlY3RlZDoge2VudW1lcmFibGU6IHRydWV9LFxuXHRzdGF0dXNUZXh0OiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdGhlYWRlcnM6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0Y2xvbmU6IHtlbnVtZXJhYmxlOiB0cnVlfVxufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/get-search.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/get-search.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSearch: () => (/* binding */ getSearch)\n/* harmony export */ });\nconst getSearch = parsedURL => {\n\tif (parsedURL.search) {\n\t\treturn parsedURL.search;\n\t}\n\n\tconst lastOffset = parsedURL.href.length - 1;\n\tconst hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\n\treturn parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3V0aWxzL2dldC1zZWFyY2guanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3V0aWxzL2dldC1zZWFyY2guanM/MzNjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZ2V0U2VhcmNoID0gcGFyc2VkVVJMID0+IHtcblx0aWYgKHBhcnNlZFVSTC5zZWFyY2gpIHtcblx0XHRyZXR1cm4gcGFyc2VkVVJMLnNlYXJjaDtcblx0fVxuXG5cdGNvbnN0IGxhc3RPZmZzZXQgPSBwYXJzZWRVUkwuaHJlZi5sZW5ndGggLSAxO1xuXHRjb25zdCBoYXNoID0gcGFyc2VkVVJMLmhhc2ggfHwgKHBhcnNlZFVSTC5ocmVmW2xhc3RPZmZzZXRdID09PSAnIycgPyAnIycgOiAnJyk7XG5cdHJldHVybiBwYXJzZWRVUkwuaHJlZltsYXN0T2Zmc2V0IC0gaGFzaC5sZW5ndGhdID09PSAnPycgPyAnPycgOiAnJztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/get-search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is-redirect.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is-redirect.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isRedirect: () => (/* binding */ isRedirect)\n/* harmony export */ });\nconst redirectStatus = new Set([301, 302, 303, 307, 308]);\n\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */\nconst isRedirect = code => {\n\treturn redirectStatus.has(code);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3V0aWxzL2lzLXJlZGlyZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1nZW5raXQvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3V0aWxzL2lzLXJlZGlyZWN0LmpzPzlhYzAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmVkaXJlY3RTdGF0dXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuXG4vKipcbiAqIFJlZGlyZWN0IGNvZGUgbWF0Y2hpbmdcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZSAtIFN0YXR1cyBjb2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaXNSZWRpcmVjdCA9IGNvZGUgPT4ge1xuXHRyZXR1cm4gcmVkaXJlY3RTdGF0dXMuaGFzKGNvZGUpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is-redirect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAbortSignal: () => (/* binding */ isAbortSignal),\n/* harmony export */   isBlob: () => (/* binding */ isBlob),\n/* harmony export */   isDomainOrSubdomain: () => (/* binding */ isDomainOrSubdomain),\n/* harmony export */   isSameProtocol: () => (/* binding */ isSameProtocol),\n/* harmony export */   isURLSearchParameters: () => (/* binding */ isURLSearchParameters)\n/* harmony export */ });\n/**\n * Is.js\n *\n * Object type checks.\n */\n\nconst NAME = Symbol.toStringTag;\n\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nconst isURLSearchParameters = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.append === 'function' &&\n\t\ttypeof object.delete === 'function' &&\n\t\ttypeof object.get === 'function' &&\n\t\ttypeof object.getAll === 'function' &&\n\t\ttypeof object.has === 'function' &&\n\t\ttypeof object.set === 'function' &&\n\t\ttypeof object.sort === 'function' &&\n\t\tobject[NAME] === 'URLSearchParams'\n\t);\n};\n\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nconst isBlob = object => {\n\treturn (\n\t\tobject &&\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.arrayBuffer === 'function' &&\n\t\ttypeof object.type === 'string' &&\n\t\ttypeof object.stream === 'function' &&\n\t\ttypeof object.constructor === 'function' &&\n\t\t/^(Blob|File)$/.test(object[NAME])\n\t);\n};\n\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nconst isAbortSignal = object => {\n\treturn (\n\t\ttypeof object === 'object' && (\n\t\t\tobject[NAME] === 'AbortSignal' ||\n\t\t\tobject[NAME] === 'EventTarget'\n\t\t)\n\t);\n};\n\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nconst isDomainOrSubdomain = (destination, original) => {\n\tconst orig = new URL(original).hostname;\n\tconst dest = new URL(destination).hostname;\n\n\treturn orig === dest || orig.endsWith(`.${dest}`);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nconst isSameProtocol = (destination, original) => {\n\tconst orig = new URL(original).protocol;\n\tconst dest = new URL(destination).protocol;\n\n\treturn orig === dest;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9kb3Rwcm9tcHQvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3V0aWxzL2lzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsWUFBWTtBQUN2QjtBQUNPO0FBQ1A7QUFDQTs7QUFFQSwyQ0FBMkMsS0FBSztBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLFlBQVk7QUFDdkI7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZG90cHJvbXB0L25vZGVfbW9kdWxlcy9ub2RlLWZldGNoL3NyYy91dGlscy9pcy5qcz83NDFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSXMuanNcbiAqXG4gKiBPYmplY3QgdHlwZSBjaGVja3MuXG4gKi9cblxuY29uc3QgTkFNRSA9IFN5bWJvbC50b1N0cmluZ1RhZztcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9pc3N1ZXMvMjk2I2lzc3VlY29tbWVudC0zMDc1OTgxNDNcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gT2JqZWN0IHRvIGNoZWNrIGZvclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVVJMU2VhcmNoUGFyYW1ldGVycyA9IG9iamVjdCA9PiB7XG5cdHJldHVybiAoXG5cdFx0dHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LmFwcGVuZCA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBvYmplY3QuZGVsZXRlID09PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIG9iamVjdC5nZXQgPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LmdldEFsbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBvYmplY3QuaGFzID09PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIG9iamVjdC5zZXQgPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LnNvcnQgPT09ICdmdW5jdGlvbicgJiZcblx0XHRvYmplY3RbTkFNRV0gPT09ICdVUkxTZWFyY2hQYXJhbXMnXG5cdCk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGBvYmplY3RgIGlzIGEgVzNDIGBCbG9iYCBvYmplY3QgKHdoaWNoIGBGaWxlYCBpbmhlcml0cyBmcm9tKVxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBPYmplY3QgdG8gY2hlY2sgZm9yXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaXNCbG9iID0gb2JqZWN0ID0+IHtcblx0cmV0dXJuIChcblx0XHRvYmplY3QgJiZcblx0XHR0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiBvYmplY3QuYXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LnR5cGUgPT09ICdzdHJpbmcnICYmXG5cdFx0dHlwZW9mIG9iamVjdC5zdHJlYW0gPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nICYmXG5cdFx0L14oQmxvYnxGaWxlKSQvLnRlc3Qob2JqZWN0W05BTUVdKVxuXHQpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhbiBpbnN0YW5jZSBvZiBBYm9ydFNpZ25hbC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gT2JqZWN0IHRvIGNoZWNrIGZvclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQWJvcnRTaWduYWwgPSBvYmplY3QgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIChcblx0XHRcdG9iamVjdFtOQU1FXSA9PT0gJ0Fib3J0U2lnbmFsJyB8fFxuXHRcdFx0b2JqZWN0W05BTUVdID09PSAnRXZlbnRUYXJnZXQnXG5cdFx0KVxuXHQpO1xufTtcblxuLyoqXG4gKiBpc0RvbWFpbk9yU3ViZG9tYWluIHJlcG9ydHMgd2hldGhlciBzdWIgaXMgYSBzdWJkb21haW4gKG9yIGV4YWN0IG1hdGNoKSBvZlxuICogdGhlIHBhcmVudCBkb21haW4uXG4gKlxuICogQm90aCBkb21haW5zIG11c3QgYWxyZWFkeSBiZSBpbiBjYW5vbmljYWwgZm9ybS5cbiAqIEBwYXJhbSB7c3RyaW5nfFVSTH0gb3JpZ2luYWxcbiAqIEBwYXJhbSB7c3RyaW5nfFVSTH0gZGVzdGluYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGlzRG9tYWluT3JTdWJkb21haW4gPSAoZGVzdGluYXRpb24sIG9yaWdpbmFsKSA9PiB7XG5cdGNvbnN0IG9yaWcgPSBuZXcgVVJMKG9yaWdpbmFsKS5ob3N0bmFtZTtcblx0Y29uc3QgZGVzdCA9IG5ldyBVUkwoZGVzdGluYXRpb24pLmhvc3RuYW1lO1xuXG5cdHJldHVybiBvcmlnID09PSBkZXN0IHx8IG9yaWcuZW5kc1dpdGgoYC4ke2Rlc3R9YCk7XG59O1xuXG4vKipcbiAqIGlzU2FtZVByb3RvY29sIHJlcG9ydHMgd2hldGhlciB0aGUgdHdvIHByb3ZpZGVkIFVSTHMgdXNlIHRoZSBzYW1lIHByb3RvY29sLlxuICpcbiAqIEJvdGggZG9tYWlucyBtdXN0IGFscmVhZHkgYmUgaW4gY2Fub25pY2FsIGZvcm0uXG4gKiBAcGFyYW0ge3N0cmluZ3xVUkx9IG9yaWdpbmFsXG4gKiBAcGFyYW0ge3N0cmluZ3xVUkx9IGRlc3RpbmF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBpc1NhbWVQcm90b2NvbCA9IChkZXN0aW5hdGlvbiwgb3JpZ2luYWwpID0+IHtcblx0Y29uc3Qgb3JpZyA9IG5ldyBVUkwob3JpZ2luYWwpLnByb3RvY29sO1xuXHRjb25zdCBkZXN0ID0gbmV3IFVSTChkZXN0aW5hdGlvbikucHJvdG9jb2w7XG5cblx0cmV0dXJuIG9yaWcgPT09IGRlc3Q7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/is.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/multipart-parser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/multipart-parser.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFormData: () => (/* binding */ toFormData)\n/* harmony export */ });\n/* harmony import */ var fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fetch-blob/from.js */ \"(rsc)/./node_modules/fetch-blob/from.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"(rsc)/./node_modules/formdata-polyfill/esm.min.js\");\n\n\n\nlet s = 0;\nconst S = {\n\tSTART_BOUNDARY: s++,\n\tHEADER_FIELD_START: s++,\n\tHEADER_FIELD: s++,\n\tHEADER_VALUE_START: s++,\n\tHEADER_VALUE: s++,\n\tHEADER_VALUE_ALMOST_DONE: s++,\n\tHEADERS_ALMOST_DONE: s++,\n\tPART_DATA_START: s++,\n\tPART_DATA: s++,\n\tEND: s++\n};\n\nlet f = 1;\nconst F = {\n\tPART_BOUNDARY: f,\n\tLAST_BOUNDARY: f *= 2\n};\n\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\n\nconst lower = c => c | 0x20;\n\nconst noop = () => {};\n\nclass MultipartParser {\n\t/**\n\t * @param {string} boundary\n\t */\n\tconstructor(boundary) {\n\t\tthis.index = 0;\n\t\tthis.flags = 0;\n\n\t\tthis.onHeaderEnd = noop;\n\t\tthis.onHeaderField = noop;\n\t\tthis.onHeadersEnd = noop;\n\t\tthis.onHeaderValue = noop;\n\t\tthis.onPartBegin = noop;\n\t\tthis.onPartData = noop;\n\t\tthis.onPartEnd = noop;\n\n\t\tthis.boundaryChars = {};\n\n\t\tboundary = '\\r\\n--' + boundary;\n\t\tconst ui8a = new Uint8Array(boundary.length);\n\t\tfor (let i = 0; i < boundary.length; i++) {\n\t\t\tui8a[i] = boundary.charCodeAt(i);\n\t\t\tthis.boundaryChars[ui8a[i]] = true;\n\t\t}\n\n\t\tthis.boundary = ui8a;\n\t\tthis.lookbehind = new Uint8Array(this.boundary.length + 8);\n\t\tthis.state = S.START_BOUNDARY;\n\t}\n\n\t/**\n\t * @param {Uint8Array} data\n\t */\n\twrite(data) {\n\t\tlet i = 0;\n\t\tconst length_ = data.length;\n\t\tlet previousIndex = this.index;\n\t\tlet {lookbehind, boundary, boundaryChars, index, state, flags} = this;\n\t\tconst boundaryLength = this.boundary.length;\n\t\tconst boundaryEnd = boundaryLength - 1;\n\t\tconst bufferLength = data.length;\n\t\tlet c;\n\t\tlet cl;\n\n\t\tconst mark = name => {\n\t\t\tthis[name + 'Mark'] = i;\n\t\t};\n\n\t\tconst clear = name => {\n\t\t\tdelete this[name + 'Mark'];\n\t\t};\n\n\t\tconst callback = (callbackSymbol, start, end, ui8a) => {\n\t\t\tif (start === undefined || start !== end) {\n\t\t\t\tthis[callbackSymbol](ui8a && ui8a.subarray(start, end));\n\t\t\t}\n\t\t};\n\n\t\tconst dataCallback = (name, clear) => {\n\t\t\tconst markSymbol = name + 'Mark';\n\t\t\tif (!(markSymbol in this)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (clear) {\n\t\t\t\tcallback(name, this[markSymbol], i, data);\n\t\t\t\tdelete this[markSymbol];\n\t\t\t} else {\n\t\t\t\tcallback(name, this[markSymbol], data.length, data);\n\t\t\t\tthis[markSymbol] = 0;\n\t\t\t}\n\t\t};\n\n\t\tfor (i = 0; i < length_; i++) {\n\t\t\tc = data[i];\n\n\t\t\tswitch (state) {\n\t\t\t\tcase S.START_BOUNDARY:\n\t\t\t\t\tif (index === boundary.length - 2) {\n\t\t\t\t\t\tif (c === HYPHEN) {\n\t\t\t\t\t\t\tflags |= F.LAST_BOUNDARY;\n\t\t\t\t\t\t} else if (c !== CR) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (index - 1 === boundary.length - 2) {\n\t\t\t\t\t\tif (flags & F.LAST_BOUNDARY && c === HYPHEN) {\n\t\t\t\t\t\t\tstate = S.END;\n\t\t\t\t\t\t\tflags = 0;\n\t\t\t\t\t\t} else if (!(flags & F.LAST_BOUNDARY) && c === LF) {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\tcallback('onPartBegin');\n\t\t\t\t\t\t\tstate = S.HEADER_FIELD_START;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c !== boundary[index + 2]) {\n\t\t\t\t\t\tindex = -2;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c === boundary[index + 2]) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADER_FIELD_START:\n\t\t\t\t\tstate = S.HEADER_FIELD;\n\t\t\t\t\tmark('onHeaderField');\n\t\t\t\t\tindex = 0;\n\t\t\t\t\t// falls through\n\t\t\t\tcase S.HEADER_FIELD:\n\t\t\t\t\tif (c === CR) {\n\t\t\t\t\t\tclear('onHeaderField');\n\t\t\t\t\t\tstate = S.HEADERS_ALMOST_DONE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tif (c === HYPHEN) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c === COLON) {\n\t\t\t\t\t\tif (index === 1) {\n\t\t\t\t\t\t\t// empty header field\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdataCallback('onHeaderField', true);\n\t\t\t\t\t\tstate = S.HEADER_VALUE_START;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcl = lower(c);\n\t\t\t\t\tif (cl < A || cl > Z) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADER_VALUE_START:\n\t\t\t\t\tif (c === SPACE) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmark('onHeaderValue');\n\t\t\t\t\tstate = S.HEADER_VALUE;\n\t\t\t\t\t// falls through\n\t\t\t\tcase S.HEADER_VALUE:\n\t\t\t\t\tif (c === CR) {\n\t\t\t\t\t\tdataCallback('onHeaderValue', true);\n\t\t\t\t\t\tcallback('onHeaderEnd');\n\t\t\t\t\t\tstate = S.HEADER_VALUE_ALMOST_DONE;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADER_VALUE_ALMOST_DONE:\n\t\t\t\t\tif (c !== LF) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate = S.HEADER_FIELD_START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADERS_ALMOST_DONE:\n\t\t\t\t\tif (c !== LF) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback('onHeadersEnd');\n\t\t\t\t\tstate = S.PART_DATA_START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.PART_DATA_START:\n\t\t\t\t\tstate = S.PART_DATA;\n\t\t\t\t\tmark('onPartData');\n\t\t\t\t\t// falls through\n\t\t\t\tcase S.PART_DATA:\n\t\t\t\t\tpreviousIndex = index;\n\n\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\t// boyer-moore derrived algorithm to safely skip non-boundary data\n\t\t\t\t\t\ti += boundaryEnd;\n\t\t\t\t\t\twhile (i < bufferLength && !(data[i] in boundaryChars)) {\n\t\t\t\t\t\t\ti += boundaryLength;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ti -= boundaryEnd;\n\t\t\t\t\t\tc = data[i];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index < boundary.length) {\n\t\t\t\t\t\tif (boundary[index] === c) {\n\t\t\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\t\t\tdataCallback('onPartData', true);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (index === boundary.length) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tif (c === CR) {\n\t\t\t\t\t\t\t// CR = part boundary\n\t\t\t\t\t\t\tflags |= F.PART_BOUNDARY;\n\t\t\t\t\t\t} else if (c === HYPHEN) {\n\t\t\t\t\t\t\t// HYPHEN = end boundary\n\t\t\t\t\t\t\tflags |= F.LAST_BOUNDARY;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (index - 1 === boundary.length) {\n\t\t\t\t\t\tif (flags & F.PART_BOUNDARY) {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\tif (c === LF) {\n\t\t\t\t\t\t\t\t// unset the PART_BOUNDARY flag\n\t\t\t\t\t\t\t\tflags &= ~F.PART_BOUNDARY;\n\t\t\t\t\t\t\t\tcallback('onPartEnd');\n\t\t\t\t\t\t\t\tcallback('onPartBegin');\n\t\t\t\t\t\t\t\tstate = S.HEADER_FIELD_START;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (flags & F.LAST_BOUNDARY) {\n\t\t\t\t\t\t\tif (c === HYPHEN) {\n\t\t\t\t\t\t\t\tcallback('onPartEnd');\n\t\t\t\t\t\t\t\tstate = S.END;\n\t\t\t\t\t\t\t\tflags = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t// when matching a possible boundary, keep a lookbehind reference\n\t\t\t\t\t\t// in case it turns out to be a false lead\n\t\t\t\t\t\tlookbehind[index - 1] = c;\n\t\t\t\t\t} else if (previousIndex > 0) {\n\t\t\t\t\t\t// if our boundary turned out to be rubbish, the captured lookbehind\n\t\t\t\t\t\t// belongs to partData\n\t\t\t\t\t\tconst _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);\n\t\t\t\t\t\tcallback('onPartData', 0, previousIndex, _lookbehind);\n\t\t\t\t\t\tpreviousIndex = 0;\n\t\t\t\t\t\tmark('onPartData');\n\n\t\t\t\t\t\t// reconsider the current character even so it interrupted the sequence\n\t\t\t\t\t\t// it could be the beginning of a new sequence\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.END:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unexpected state entered: ${state}`);\n\t\t\t}\n\t\t}\n\n\t\tdataCallback('onHeaderField');\n\t\tdataCallback('onHeaderValue');\n\t\tdataCallback('onPartData');\n\n\t\t// Update properties for the next call\n\t\tthis.index = index;\n\t\tthis.state = state;\n\t\tthis.flags = flags;\n\t}\n\n\tend() {\n\t\tif ((this.state === S.HEADER_FIELD_START && this.index === 0) ||\n\t\t\t(this.state === S.PART_DATA && this.index === this.boundary.length)) {\n\t\t\tthis.onPartEnd();\n\t\t} else if (this.state !== S.END) {\n\t\t\tthrow new Error('MultipartParser.end(): stream ended unexpectedly');\n\t\t}\n\t}\n}\n\nfunction _fileName(headerValue) {\n\t// matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n\tconst m = headerValue.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);\n\tif (!m) {\n\t\treturn;\n\t}\n\n\tconst match = m[2] || m[3] || '';\n\tlet filename = match.slice(match.lastIndexOf('\\\\') + 1);\n\tfilename = filename.replace(/%22/g, '\"');\n\tfilename = filename.replace(/&#(\\d{4});/g, (m, code) => {\n\t\treturn String.fromCharCode(code);\n\t});\n\treturn filename;\n}\n\nasync function toFormData(Body, ct) {\n\tif (!/multipart/i.test(ct)) {\n\t\tthrow new TypeError('Failed to fetch');\n\t}\n\n\tconst m = ct.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n\n\tif (!m) {\n\t\tthrow new TypeError('no or bad content-type header, no multipart boundary');\n\t}\n\n\tconst parser = new MultipartParser(m[1] || m[2]);\n\n\tlet headerField;\n\tlet headerValue;\n\tlet entryValue;\n\tlet entryName;\n\tlet contentType;\n\tlet filename;\n\tconst entryChunks = [];\n\tconst formData = new formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_1__.FormData();\n\n\tconst onPartData = ui8a => {\n\t\tentryValue += decoder.decode(ui8a, {stream: true});\n\t};\n\n\tconst appendToFile = ui8a => {\n\t\tentryChunks.push(ui8a);\n\t};\n\n\tconst appendFileToFormData = () => {\n\t\tconst file = new fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_0__.File(entryChunks, filename, {type: contentType});\n\t\tformData.append(entryName, file);\n\t};\n\n\tconst appendEntryToFormData = () => {\n\t\tformData.append(entryName, entryValue);\n\t};\n\n\tconst decoder = new TextDecoder('utf-8');\n\tdecoder.decode();\n\n\tparser.onPartBegin = function () {\n\t\tparser.onPartData = onPartData;\n\t\tparser.onPartEnd = appendEntryToFormData;\n\n\t\theaderField = '';\n\t\theaderValue = '';\n\t\tentryValue = '';\n\t\tentryName = '';\n\t\tcontentType = '';\n\t\tfilename = null;\n\t\tentryChunks.length = 0;\n\t};\n\n\tparser.onHeaderField = function (ui8a) {\n\t\theaderField += decoder.decode(ui8a, {stream: true});\n\t};\n\n\tparser.onHeaderValue = function (ui8a) {\n\t\theaderValue += decoder.decode(ui8a, {stream: true});\n\t};\n\n\tparser.onHeaderEnd = function () {\n\t\theaderValue += decoder.decode();\n\t\theaderField = headerField.toLowerCase();\n\n\t\tif (headerField === 'content-disposition') {\n\t\t\t// matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n\t\t\tconst m = headerValue.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);\n\n\t\t\tif (m) {\n\t\t\t\tentryName = m[2] || m[3] || '';\n\t\t\t}\n\n\t\t\tfilename = _fileName(headerValue);\n\n\t\t\tif (filename) {\n\t\t\t\tparser.onPartData = appendToFile;\n\t\t\t\tparser.onPartEnd = appendFileToFormData;\n\t\t\t}\n\t\t} else if (headerField === 'content-type') {\n\t\t\tcontentType = headerValue;\n\t\t}\n\n\t\theaderValue = '';\n\t\theaderField = '';\n\t};\n\n\tfor await (const chunk of Body) {\n\t\tparser.write(chunk);\n\t}\n\n\tparser.end();\n\n\treturn formData;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/multipart-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/referrer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/referrer.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_REFERRER_POLICY: () => (/* binding */ DEFAULT_REFERRER_POLICY),\n/* harmony export */   ReferrerPolicy: () => (/* binding */ ReferrerPolicy),\n/* harmony export */   determineRequestsReferrer: () => (/* binding */ determineRequestsReferrer),\n/* harmony export */   isOriginPotentiallyTrustworthy: () => (/* binding */ isOriginPotentiallyTrustworthy),\n/* harmony export */   isUrlPotentiallyTrustworthy: () => (/* binding */ isUrlPotentiallyTrustworthy),\n/* harmony export */   parseReferrerPolicyFromHeader: () => (/* binding */ parseReferrerPolicyFromHeader),\n/* harmony export */   stripURLForUseAsAReferrer: () => (/* binding */ stripURLForUseAsAReferrer),\n/* harmony export */   validateReferrerPolicy: () => (/* binding */ validateReferrerPolicy)\n/* harmony export */ });\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:net */ \"node:net\");\n\n\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */\n\n/**\n * @module utils/referrer\n * @private\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */\nfunction stripURLForUseAsAReferrer(url, originOnly = false) {\n\t// 1. If url is null, return no referrer.\n\tif (url == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\treturn 'no-referrer';\n\t}\n\n\turl = new URL(url);\n\n\t// 2. If url's scheme is a local scheme, then return no referrer.\n\tif (/^(about|blob|data):$/.test(url.protocol)) {\n\t\treturn 'no-referrer';\n\t}\n\n\t// 3. Set url's username to the empty string.\n\turl.username = '';\n\n\t// 4. Set url's password to null.\n\t// Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n\turl.password = '';\n\n\t// 5. Set url's fragment to null.\n\t// Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n\turl.hash = '';\n\n\t// 6. If the origin-only flag is true, then:\n\tif (originOnly) {\n\t\t// 6.1. Set url's path to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n\t\turl.pathname = '';\n\n\t\t// 6.2. Set url's query to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n\t\turl.search = '';\n\t}\n\n\t// 7. Return url.\n\treturn url;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */\nconst ReferrerPolicy = new Set([\n\t'',\n\t'no-referrer',\n\t'no-referrer-when-downgrade',\n\t'same-origin',\n\t'origin',\n\t'strict-origin',\n\t'origin-when-cross-origin',\n\t'strict-origin-when-cross-origin',\n\t'unsafe-url'\n]);\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */\nconst DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */\nfunction validateReferrerPolicy(referrerPolicy) {\n\tif (!ReferrerPolicy.has(referrerPolicy)) {\n\t\tthrow new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n\t}\n\n\treturn referrerPolicy;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nfunction isOriginPotentiallyTrustworthy(url) {\n\t// 1. If origin is an opaque origin, return \"Not Trustworthy\".\n\t// Not applicable\n\n\t// 2. Assert: origin is a tuple origin.\n\t// Not for implementations\n\n\t// 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n\tif (/^(http|ws)s:$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n\tconst hostIp = url.host.replace(/(^\\[)|(]$)/g, '');\n\tconst hostIPVersion = (0,node_net__WEBPACK_IMPORTED_MODULE_0__.isIP)(hostIp);\n\n\tif (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\tif (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\t// 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n\t// We are returning FALSE here because we cannot ensure conformance to\n\t// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n\tif (url.host === 'localhost' || url.host.endsWith('.localhost')) {\n\t\treturn false;\n\t}\n\n\t// 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n\tif (url.protocol === 'file:') {\n\t\treturn true;\n\t}\n\n\t// 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 9. Return \"Not Trustworthy\".\n\treturn false;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nfunction isUrlPotentiallyTrustworthy(url) {\n\t// 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n\tif (/^about:(blank|srcdoc)$/.test(url)) {\n\t\treturn true;\n\t}\n\n\t// 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n\tif (url.protocol === 'data:') {\n\t\treturn true;\n\t}\n\n\t// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n\t// created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n\t// trustworthy.\n\tif (/^(blob|filesystem):$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n\treturn isOriginPotentiallyTrustworthy(url);\n}\n\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */\n\n/**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */\nfunction determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {\n\t// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n\t// these cases:\n\t// > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n\t// > Note: If request's referrer policy is the empty string, Fetch will not call into this\n\t// > algorithm.\n\tif (request.referrer === 'no-referrer' || request.referrerPolicy === '') {\n\t\treturn null;\n\t}\n\n\t// 1. Let policy be request's associated referrer policy.\n\tconst policy = request.referrerPolicy;\n\n\t// 2. Let environment be request's client.\n\t// not applicable to node.js\n\n\t// 3. Switch on request's referrer:\n\tif (request.referrer === 'about:client') {\n\t\treturn 'no-referrer';\n\t}\n\n\t// \"a URL\": Let referrerSource be request's referrer.\n\tconst referrerSource = request.referrer;\n\n\t// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n\tlet referrerURL = stripURLForUseAsAReferrer(referrerSource);\n\n\t// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n\t//    origin-only flag set to true.\n\tlet referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n\n\t// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n\t//    referrerURL to referrerOrigin.\n\tif (referrerURL.toString().length > 4096) {\n\t\treferrerURL = referrerOrigin;\n\t}\n\n\t// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n\t//    policy considerations in the interests of minimizing data leakage. For example, the user\n\t//    agent could strip the URL down to an origin, modify its host, replace it with an empty\n\t//    string, etc.\n\tif (referrerURLCallback) {\n\t\treferrerURL = referrerURLCallback(referrerURL);\n\t}\n\n\tif (referrerOriginCallback) {\n\t\treferrerOrigin = referrerOriginCallback(referrerOrigin);\n\t}\n\n\t// 8.Execute the statements corresponding to the value of policy:\n\tconst currentURL = new URL(request.url);\n\n\tswitch (policy) {\n\t\tcase 'no-referrer':\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin':\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'unsafe-url':\n\t\t\treturn referrerURL;\n\n\t\tcase 'strict-origin':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerOrigin.\n\t\t\treturn referrerOrigin.toString();\n\n\t\tcase 'strict-origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 3. Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'same-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. Return no referrer.\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'no-referrer-when-downgrade':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerURL.\n\t\t\treturn referrerURL;\n\n\t\tdefault:\n\t\t\tthrow new TypeError(`Invalid referrerPolicy: ${policy}`);\n\t}\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */\nfunction parseReferrerPolicyFromHeader(headers) {\n\t// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n\t//    and response’s header list.\n\tconst policyTokens = (headers.get('referrer-policy') || '').split(/[,\\s]+/);\n\n\t// 2. Let policy be the empty string.\n\tlet policy = '';\n\n\t// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n\t//    string, then set policy to token.\n\t// Note: This algorithm loops over multiple policy values to allow deployment of new policy\n\t// values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n\tfor (const token of policyTokens) {\n\t\tif (token && ReferrerPolicy.has(token)) {\n\t\t\tpolicy = token;\n\t\t}\n\t}\n\n\t// 4. Return policy.\n\treturn policy;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/dotprompt/node_modules/node-fetch/src/utils/referrer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/googleai/lib/chunk-WFI2LP4G.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/chunk-WFI2LP4G.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __async: () => (/* binding */ __async),\n/* harmony export */   __forAwait: () => (/* binding */ __forAwait),\n/* harmony export */   __spreadProps: () => (/* binding */ __spreadProps),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => {\n  return (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __forAwait = (obj, it, method) => (it = obj[__knownSymbol(\"asyncIterator\")]) ? it.call(obj) : (obj = obj[__knownSymbol(\"iterator\")](), it = {}, method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method(\"next\"), method(\"return\"), it);\n\n\n//# sourceMappingURL=chunk-WFI2LP4G.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGVhaS9saWIvY2h1bmstV0ZJMkxQNEcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsNkRBQTZEO0FBQzNJO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGtKQUFrSiwwTEFBMEwsYUFBYTs7QUFPdlY7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2NodW5rLVdGSTJMUDRHLm1qcz81ODhkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIF9fa25vd25TeW1ib2wgPSAobmFtZSwgc3ltYm9sKSA9PiB7XG4gIHJldHVybiAoc3ltYm9sID0gU3ltYm9sW25hbWVdKSA/IHN5bWJvbCA6IFN5bWJvbC5mb3IoXCJTeW1ib2wuXCIgKyBuYW1lKTtcbn07XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19zcHJlYWRWYWx1ZXMgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcbiAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIGE7XG59O1xudmFyIF9fc3ByZWFkUHJvcHMgPSAoYSwgYikgPT4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xudmFyIF9fZm9yQXdhaXQgPSAob2JqLCBpdCwgbWV0aG9kKSA9PiAoaXQgPSBvYmpbX19rbm93blN5bWJvbChcImFzeW5jSXRlcmF0b3JcIildKSA/IGl0LmNhbGwob2JqKSA6IChvYmogPSBvYmpbX19rbm93blN5bWJvbChcIml0ZXJhdG9yXCIpXSgpLCBpdCA9IHt9LCBtZXRob2QgPSAoa2V5LCBmbikgPT4gKGZuID0gb2JqW2tleV0pICYmIChpdFtrZXldID0gKGFyZykgPT4gbmV3IFByb21pc2UoKHllcywgbm8sIGRvbmUpID0+IChhcmcgPSBmbi5jYWxsKG9iaiwgYXJnKSwgZG9uZSA9IGFyZy5kb25lLCBQcm9taXNlLnJlc29sdmUoYXJnLnZhbHVlKS50aGVuKCh2YWx1ZSkgPT4geWVzKHsgdmFsdWUsIGRvbmUgfSksIG5vKSkpKSwgbWV0aG9kKFwibmV4dFwiKSwgbWV0aG9kKFwicmV0dXJuXCIpLCBpdCk7XG5cbmV4cG9ydCB7XG4gIF9fc3ByZWFkVmFsdWVzLFxuICBfX3NwcmVhZFByb3BzLFxuICBfX2FzeW5jLFxuICBfX2ZvckF3YWl0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstV0ZJMkxQNEcubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/googleai/lib/chunk-WFI2LP4G.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@genkit-ai/googleai/lib/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ src_default),\n/* harmony export */   gemini10Pro: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_3__.gemini10Pro),\n/* harmony export */   gemini15Flash: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_3__.gemini15Flash),\n/* harmony export */   gemini15Pro: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_3__.gemini15Pro),\n/* harmony export */   googleAI: () => (/* binding */ googleAI),\n/* harmony export */   textEmbeddingGecko001: () => (/* reexport safe */ _embedder_js__WEBPACK_IMPORTED_MODULE_2__.textEmbeddingGecko001)\n/* harmony export */ });\n/* harmony import */ var _chunk_WFI2LP4G_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-WFI2LP4G.mjs */ \"(rsc)/./node_modules/@genkit-ai/googleai/lib/chunk-WFI2LP4G.mjs\");\n/* harmony import */ var genkit_plugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! genkit/plugin */ \"(rsc)/./node_modules/genkit/lib/plugin.mjs\");\n/* harmony import */ var _embedder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./embedder.js */ \"(rsc)/./node_modules/@genkit-ai/googleai/lib/embedder.js\");\n/* harmony import */ var _gemini_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gemini.js */ \"(rsc)/./node_modules/@genkit-ai/googleai/lib/gemini.js\");\n\n\n\n\nfunction googleAI(options) {\n  return (0,genkit_plugin__WEBPACK_IMPORTED_MODULE_1__.genkitPlugin)(\"googleai\", (ai) => (0,_chunk_WFI2LP4G_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function* () {\n    let apiVersions = [\"v1\"];\n    if (options == null ? void 0 : options.apiVersion) {\n      if (Array.isArray(options == null ? void 0 : options.apiVersion)) {\n        apiVersions = options == null ? void 0 : options.apiVersion;\n      } else {\n        apiVersions = [options == null ? void 0 : options.apiVersion];\n      }\n    }\n    if (apiVersions.includes(\"v1beta\")) {\n      Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_3__.SUPPORTED_V15_MODELS).forEach(\n        (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_3__.defineGoogleAIModel)(\n          ai,\n          name,\n          options == null ? void 0 : options.apiKey,\n          \"v1beta\",\n          options == null ? void 0 : options.baseUrl\n        )\n      );\n    }\n    if (apiVersions.includes(\"v1\")) {\n      Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_3__.SUPPORTED_V1_MODELS).forEach(\n        (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_3__.defineGoogleAIModel)(\n          ai,\n          name,\n          options == null ? void 0 : options.apiKey,\n          void 0,\n          options == null ? void 0 : options.baseUrl\n        )\n      );\n      Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_3__.SUPPORTED_V15_MODELS).forEach(\n        (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_3__.defineGoogleAIModel)(\n          ai,\n          name,\n          options == null ? void 0 : options.apiKey,\n          void 0,\n          options == null ? void 0 : options.baseUrl\n        )\n      );\n      Object.keys(_embedder_js__WEBPACK_IMPORTED_MODULE_2__.SUPPORTED_MODELS).forEach(\n        (name) => (0,_embedder_js__WEBPACK_IMPORTED_MODULE_2__.defineGoogleAIEmbedder)(ai, name, { apiKey: options == null ? void 0 : options.apiKey })\n      );\n    }\n  }));\n}\nvar src_default = googleAI;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGVhaS9saWIvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFOEI7QUFDZTtBQUt0QjtBQVFGO0FBQ3JCO0FBQ0EsU0FBUywyREFBWSxxQkFBcUIsNERBQU87QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNERBQW9CO0FBQ3RDLGtCQUFrQiwrREFBbUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDJEQUFtQjtBQUNyQyxrQkFBa0IsK0RBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDREQUFvQjtBQUN0QyxrQkFBa0IsK0RBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBEQUFlO0FBQ2pDLGtCQUFrQixvRUFBc0IsYUFBYSxtREFBbUQ7QUFDeEc7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBUUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZ2Vua2l0Ly4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2luZGV4Lm1qcz81MDhmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIF9fYXN5bmNcbn0gZnJvbSBcIi4vY2h1bmstV0ZJMkxQNEcubWpzXCI7XG5pbXBvcnQgeyBnZW5raXRQbHVnaW4gfSBmcm9tIFwiZ2Vua2l0L3BsdWdpblwiO1xuaW1wb3J0IHtcbiAgU1VQUE9SVEVEX01PREVMUyBhcyBFTUJFRERFUl9NT0RFTFMsXG4gIGRlZmluZUdvb2dsZUFJRW1iZWRkZXIsXG4gIHRleHRFbWJlZGRpbmdHZWNrbzAwMVxufSBmcm9tIFwiLi9lbWJlZGRlci5qc1wiO1xuaW1wb3J0IHtcbiAgU1VQUE9SVEVEX1YxNV9NT0RFTFMsXG4gIFNVUFBPUlRFRF9WMV9NT0RFTFMsXG4gIGRlZmluZUdvb2dsZUFJTW9kZWwsXG4gIGdlbWluaTEwUHJvLFxuICBnZW1pbmkxNUZsYXNoLFxuICBnZW1pbmkxNVByb1xufSBmcm9tIFwiLi9nZW1pbmkuanNcIjtcbmZ1bmN0aW9uIGdvb2dsZUFJKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGdlbmtpdFBsdWdpbihcImdvb2dsZWFpXCIsIChhaSkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGxldCBhcGlWZXJzaW9ucyA9IFtcInYxXCJdO1xuICAgIGlmIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmFwaVZlcnNpb24pIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuYXBpVmVyc2lvbikpIHtcbiAgICAgICAgYXBpVmVyc2lvbnMgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmFwaVZlcnNpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcGlWZXJzaW9ucyA9IFtvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmFwaVZlcnNpb25dO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXBpVmVyc2lvbnMuaW5jbHVkZXMoXCJ2MWJldGFcIikpIHtcbiAgICAgIE9iamVjdC5rZXlzKFNVUFBPUlRFRF9WMTVfTU9ERUxTKS5mb3JFYWNoKFxuICAgICAgICAobmFtZSkgPT4gZGVmaW5lR29vZ2xlQUlNb2RlbChcbiAgICAgICAgICBhaSxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuYXBpS2V5LFxuICAgICAgICAgIFwidjFiZXRhXCIsXG4gICAgICAgICAgb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5iYXNlVXJsXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChhcGlWZXJzaW9ucy5pbmNsdWRlcyhcInYxXCIpKSB7XG4gICAgICBPYmplY3Qua2V5cyhTVVBQT1JURURfVjFfTU9ERUxTKS5mb3JFYWNoKFxuICAgICAgICAobmFtZSkgPT4gZGVmaW5lR29vZ2xlQUlNb2RlbChcbiAgICAgICAgICBhaSxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuYXBpS2V5LFxuICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmJhc2VVcmxcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIE9iamVjdC5rZXlzKFNVUFBPUlRFRF9WMTVfTU9ERUxTKS5mb3JFYWNoKFxuICAgICAgICAobmFtZSkgPT4gZGVmaW5lR29vZ2xlQUlNb2RlbChcbiAgICAgICAgICBhaSxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuYXBpS2V5LFxuICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmJhc2VVcmxcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIE9iamVjdC5rZXlzKEVNQkVEREVSX01PREVMUykuZm9yRWFjaChcbiAgICAgICAgKG5hbWUpID0+IGRlZmluZUdvb2dsZUFJRW1iZWRkZXIoYWksIG5hbWUsIHsgYXBpS2V5OiBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmFwaUtleSB9KVxuICAgICAgKTtcbiAgICB9XG4gIH0pKTtcbn1cbnZhciBzcmNfZGVmYXVsdCA9IGdvb2dsZUFJO1xuZXhwb3J0IHtcbiAgc3JjX2RlZmF1bHQgYXMgZGVmYXVsdCxcbiAgZ2VtaW5pMTBQcm8sXG4gIGdlbWluaTE1Rmxhc2gsXG4gIGdlbWluaTE1UHJvLFxuICBnb29nbGVBSSxcbiAgdGV4dEVtYmVkZGluZ0dlY2tvMDAxXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@genkit-ai/googleai/lib/index.mjs\n");

/***/ })

};
;